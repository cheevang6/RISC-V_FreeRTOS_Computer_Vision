
Creative_MiV_FreeRTOS_Demo.elf:     file format elf32-littleriscv
Creative_MiV_FreeRTOS_Demo.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x60000000

Program Header:
    LOAD off    0x00001000 vaddr 0x60000000 paddr 0x60000000 align 2**12
         filesz 0x00002fd0 memsz 0x00002fd0 flags r-x
    LOAD off    0x00004000 vaddr 0x80000000 paddr 0x60002fd0 align 2**12
         filesz 0x000000a0 memsz 0x00000110 flags rw-
    LOAD off    0x00004110 vaddr 0x80000110 paddr 0x60003070 align 2**12
         filesz 0x00000000 memsz 0x000190d0 flags rw-
    LOAD off    0x000041e0 vaddr 0x800191e0 paddr 0x60003070 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x000041e0 vaddr 0x8001a1e0 paddr 0x60003070 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00002fd0  60000000  60000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80000000  60002fd0  00004000  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          00000080  80000020  60002ff0  00004020  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  800000a0  60003070  000040a0  2**4  ALLOC
  4 .bss           000190d0  80000110  60003070  00004110  2**4  ALLOC
  5 .heap          00001000  800191e0  60003070  000041e0  2**4  ALLOC
  6 .stack         00001000  8001a1e0  60003070  000041e0  2**4  ALLOC
  7 .debug_line    00006443  00000000  00000000  000040a0  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    00008158  00000000  00000000  0000a4e3  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  000018d9  00000000  00000000  0001263b  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006d8  00000000  00000000  00013f18  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00011784  00000000  00000000  000145f0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000005d8  00000000  00000000  00025d74  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   0000427b  00000000  00000000  0002634c  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000058  00000000  00000000  0002a5c7  2**0  CONTENTS, READONLY
 15 .debug_frame   00001854  00000000  00000000  0002a620  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
60000000 l    d  .text	00000000 .text
80000000 l    d  .sdata	00000000 .sdata
80000020 l    d  .data	00000000 .data
800000a0 l    d  .sbss	00000000 .sbss
80000110 l    d  .bss	00000000 .bss
800191e0 l    d  .heap	00000000 .heap
8001a1e0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
6000000c l       .text	00000000 handle_reset
60000004 l       .text	00000000 nmi_vector
60000008 l       .text	00000000 trap_vector
60000034 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
60000160 l     F .text	00000060 copy_section
600001c0 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
600002c4 l     F .text	000000b8 PLIC_DisableIRQ
6000037c l     F .text	00000044 PLIC_ClaimIRQ
600003c0 l     F .text	0000004c PLIC_CompleteIRQ
800000a0 l     O .sbss	00000008 g_systick_increment
60000430 l     F .text	000000a8 handle_m_timer_interrupt
600004d8 l     F .text	00000070 handle_m_ext_interrupt
60000548 l     F .text	00000030 handle_m_soft_interrupt
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 core_gpio.c
00000000 l    df *ABS*	00000000 heap_2.c
80000110 l     O .bss	00019000 ucHeap
800000a8 l     O .sbss	00000008 xStart
800000b0 l     O .sbss	00000008 xEnd
80000000 l     O .sdata	00000004 xFreeBytesRemaining
800000b8 l     O .sbss	00000004 xHeapHasBeenInitialised.2592
60001440 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
600014b4 l     F .text	0000004c raise_soft_interrupt
80000004 l     O .sdata	00000004 uxCriticalNesting
80000008 l     O .sdata	00000004 mtime
8000000c l     O .sdata	00000004 mtimecmp
60001574 l     F .text	000000cc prvSetNextTimerInterrupt
6000170c l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80019110 l     O .bss	00000064 pxReadyTasksLists
80019174 l     O .bss	00000014 xDelayedTaskList1
80019188 l     O .bss	00000014 xDelayedTaskList2
800000c4 l     O .sbss	00000004 pxDelayedTaskList
800000c8 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001919c l     O .bss	00000014 xPendingReadyList
800191b0 l     O .bss	00000014 xTasksWaitingTermination
800000cc l     O .sbss	00000004 uxTasksDeleted
800191c4 l     O .bss	00000014 xSuspendedTaskList
800000d0 l     O .sbss	00000004 uxCurrentNumberOfTasks
800000d4 l     O .sbss	00000004 xTickCount
800000d8 l     O .sbss	00000004 uxTopReadyPriority
800000dc l     O .sbss	00000004 xSchedulerRunning
800000e0 l     O .sbss	00000004 uxPendedTicks
800000e4 l     O .sbss	00000004 xYieldPending
800000e8 l     O .sbss	00000004 xNumOfOverflows
800000ec l     O .sbss	00000004 uxTaskNumber
800000f0 l     O .sbss	00000004 xNextTaskUnblockTime
800000f4 l     O .sbss	00000004 uxSchedulerSuspended
6000283c l     F .text	000000c0 prvAllocateTCBAndStack
6000251c l     F .text	00000138 prvInitialiseTCBVariables
60002654 l     F .text	000000c0 prvInitialiseTaskLists
6000293c l     F .text	00000060 prvResetNextTaskUnblockTime
600027b4 l     F .text	00000088 prvAddCurrentTaskToDelayedList
600024e8 l     F .text	00000034 prvIdleTask
60002714 l     F .text	000000a0 prvCheckTasksWaitingTermination
600028fc l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 BasicIO.c
800000f8 l     O .sbss	00000008 g_gpio_in_PBs
80000100 l     O .sbss	00000008 g_gpio_out_LEDs
80000108 l     O .sbss	00000008 g_uart_term
00000000 l    df *ABS*	00000000 main.c
60002bf4 l     F .text	000000d0 PLIC_init
60002e28 l     F .text	00000030 vLEDTestTask1
60002e58 l     F .text	00000030 vLEDTestTask2
60002e88 l     F .text	00000030 vLEDTestTask3
60001534 g     F .text	00000040 vPortExitCritical
00001000 g       *ABS*	00000000 STACK_SIZE
80000014 g     O .sdata	00000004 g_MSG_DEMO
600007d4  w    F .text	00000020 External_11_IRQHandler
80000800 g       .sdata	00000000 __global_pointer$
60002ff0 g       *ABS*	00000000 __data_load
600017cc g     F .text	000000cc SysTick_Handler
60000714  w    F .text	00000020 External_5_IRQHandler
60000adc g       .text	00000000 HW_get_8bit_reg_field
800000c0 g     O .sbss	00000004 pxCurrentTCB
800000a0 g       .sbss	00000000 __sbss_start
60000a14 g       .text	00000000 HW_set_32bit_reg
6000299c g     F .text	000000c4 BasicIO_Init
600008f4  w    F .text	00000020 External_20_IRQHandler
60001898 g     F .text	00000044 xPortStartScheduler
6000040c g     F .text	00000024 __enable_irq
60001d58 g     F .text	0000021c xTaskGenericCreate
80000000 g       .sdata	00000000 __sdata_start
60001374 g     F .text	000000cc vPortFree
60000ab4 g       .text	00000000 HW_set_8bit_reg_field
600009b4  w    F .text	00000020 External_26_IRQHandler
60000578 g     F .text	000000fc handle_trap
60001a7c g     F .text	00000088 vListInsertEnd
00100000 g       *ABS*	00000000 RAM_SIZE
600007b4  w    F .text	00000020 External_10_IRQHandler
60002ac8 g     F .text	00000034 setLED1_RED
60001a54 g     F .text	00000028 vListInitialiseItem
60002ce0 g     F .text	0000001c External_30_IRQHandler
60000894  w    F .text	00000020 External_17_IRQHandler
8001a1e0 g       .heap	00000000 _heap_end
60002a94 g     F .text	00000034 clearLED1_GREEN
800191e0 g       .bss	00000000 __bss_end
60001198 g     F .text	000001dc pvPortMalloc
60000210 g     F .text	00000098 _init
600019f0 g     F .text	00000064 vListInitialise
60000aa4 g       .text	00000000 HW_set_8bit_reg
60000aac g       .text	00000000 HW_get_8bit_reg
60001118 g     F .text	00000080 GPIO_enable_irq
80000110 g       .sbss	00000000 __sbss_end
60000a24 g       .text	00000000 HW_set_32bit_reg_field
60002df8 g     F .text	00000014 vApplicationMallocFailedHook
60000994  w    F .text	00000020 External_25_IRQHandler
8001b1e0 g       .stack	00000000 __stack_top
60002cfc g     F .text	0000001c External_29_IRQHandler
60000cb8 g     F .text	000000b0 UART_polled_tx_string
80000010 g     O .sdata	00000004 g_MSG_INTRO
60000814  w    F .text	00000020 External_13_IRQHandler
600006b4  w    F .text	00000020 External_2_IRQHandler
00001000 g       *ABS*	00000000 HEAP_SIZE
600007f4  w    F .text	00000020 External_12_IRQHandler
60000c04 g     F .text	000000b4 UART_send
60000000 g       .text	00000000 _start
60002088 g     F .text	00000028 vTaskSuspendAll
60001bd8 g     F .text	00000098 uxListRemove
60002afc g     F .text	00000034 clearLED1_RED
60002fd0 g       *ABS*	00000000 __sdata_load
800000a0 g       .data	00000000 __data_end
60002b64 g     F .text	00000034 clearLED2_GREEN
600023fc g     F .text	000000ec vTaskSwitchContext
600008b4  w    F .text	00000020 External_18_IRQHandler
60000a4c g       .text	00000000 HW_get_32bit_reg_field
60000d68 g     F .text	00000174 GPIO_init
60000934  w    F .text	00000020 External_22_IRQHandler
60000854  w    F .text	00000020 External_15_IRQHandler
600019c8 g     F .text	00000028 vPortYield
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80000110 g       .bss	00000000 __bss_start
60000874  w    F .text	00000020 External_16_IRQHandler
60001c70 g     F .text	000000e8 memset
60002d18 g     F .text	000000e0 main
60001b04 g     F .text	000000d4 vListInsert
600009f4  w    F .text	00000020 External_28_IRQHandler
60000a64 g       .text	00000000 HW_get_16bit_reg
80000020 g       .sdata	00000000 __sdata_end
8001a1e0 g       .heap	00000000 __heap_end
60000834  w    F .text	00000020 External_14_IRQHandler
600002a8 g     F .text	0000001c _fini
60002b98 g     F .text	0000005c UART_Tx_Msg
60002b30 g     F .text	00000034 setLED2_GREEN
600020b0 g     F .text	00000160 xTaskResumeAll
60001ff8 g     F .text	00000090 vTaskStartScheduler
80000020 g     O .data	00000080 ext_irq_handler_table
60000a6c g       .text	00000000 HW_set_16bit_reg_field
8001a1e0 g       .stack	00000000 __stack_bottom
600018dc g     F .text	000000ec Software_IRQHandler
600009d4  w    F .text	00000020 External_27_IRQHandler
60000774  w    F .text	00000020 External_8_IRQHandler
60000794  w    F .text	00000020 External_9_IRQHandler
800191e0 g       .heap	00000000 __heap_start
60000674  w    F .text	00000020 Invalid_IRQHandler
600006d4  w    F .text	00000020 External_3_IRQHandler
60002210 g     F .text	000001ec xTaskIncrementTick
800000bc g     O .sbss	00000004 g_startscheduler
600008d4  w    F .text	00000020 External_19_IRQHandler
800191e0 g       .bss	00000000 _end
60001640 g     F .text	000000cc vPortSetupTimer
60001f74 g     F .text	00000084 vTaskDelay
60000aec g     F .text	00000118 UART_init
60000a1c g       .text	00000000 HW_get_32bit_reg
60000a5c g       .text	00000000 HW_set_16bit_reg
60001738 g     F .text	00000094 pxPortInitialiseStack
60000694  w    F .text	00000020 External_1_IRQHandler
60000734  w    F .text	00000020 External_6_IRQHandler
60002cc4 g     F .text	0000001c External_31_IRQHandler
60001500 g     F .text	00000034 vPortEnterCritical
80000020 g       .data	00000000 __data_start
60000914  w    F .text	00000020 External_21_IRQHandler
60000a94 g       .text	00000000 HW_get_16bit_reg_field
60000954  w    F .text	00000020 External_23_IRQHandler
60000974  w    F .text	00000020 External_24_IRQHandler
60000edc g     F .text	0000023c GPIO_set_output
600006f4  w    F .text	00000020 External_4_IRQHandler
60002a60 g     F .text	00000034 setLED1_GREEN
60000754  w    F .text	00000020 External_7_IRQHandler
60002e0c g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

60000000 <_start>:
_start():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
60000000:	00c0006f          	j	6000000c <handle_reset>

60000004 <nmi_vector>:
nmi_vector():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
60000004:	0000006f          	j	60000004 <nmi_vector>

60000008 <trap_vector>:
trap_vector():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
60000008:	02c0006f          	j	60000034 <trap_entry>

6000000c <handle_reset>:
handle_reset():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
6000000c:	00000297          	auipc	t0,0x0
60000010:	02828293          	addi	t0,t0,40 # 60000034 <trap_entry>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
60000014:	30529073          	csrw	mtvec,t0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
60000018:	30005073          	csrwi	mstatus,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
6000001c:	30405073          	csrwi	mie,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:64

# Ensure the instruction is not optimized, since gp is not yet set

.option norelax
  # initialize global pointer
  la gp, __global_pointer$
60000020:	20000197          	auipc	gp,0x20000
60000024:	7e018193          	addi	gp,gp,2016 # 80000800 <__global_pointer$>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:69

.option pop

  # initialize stack pointer
  la sp, __stack_top
60000028:	2001b117          	auipc	sp,0x2001b
6000002c:	1b810113          	addi	sp,sp,440 # 8001b1e0 <__stack_top>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:72

  # perform the rest of initialization in C
  j _init
60000030:	1e00006f          	j	60000210 <_init>

60000034 <trap_entry>:
trap_entry():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:76


trap_entry:
  addi sp, sp, -32*REGBYTES
60000034:	f8010113          	addi	sp,sp,-128
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:78

  SREG x1, 0 * REGBYTES(sp)
60000038:	00112023          	sw	ra,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:79
  SREG x2, 1 * REGBYTES(sp)
6000003c:	00212223          	sw	sp,4(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:80
  SREG x3, 2 * REGBYTES(sp)
60000040:	00312423          	sw	gp,8(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:81
  SREG x4, 3 * REGBYTES(sp)
60000044:	00412623          	sw	tp,12(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:82
  SREG x5, 4 * REGBYTES(sp)
60000048:	00512823          	sw	t0,16(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:83
  SREG x6, 5 * REGBYTES(sp)
6000004c:	00612a23          	sw	t1,20(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:84
  SREG x7, 6 * REGBYTES(sp)
60000050:	00712c23          	sw	t2,24(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:85
  SREG x8, 7 * REGBYTES(sp)
60000054:	00812e23          	sw	s0,28(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:86
  SREG x9, 8 * REGBYTES(sp)
60000058:	02912023          	sw	s1,32(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:87
  SREG x10, 9 * REGBYTES(sp)
6000005c:	02a12223          	sw	a0,36(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:88
  SREG x11, 10 * REGBYTES(sp)
60000060:	02b12423          	sw	a1,40(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:89
  SREG x12, 11 * REGBYTES(sp)
60000064:	02c12623          	sw	a2,44(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:90
  SREG x13, 12 * REGBYTES(sp)
60000068:	02d12823          	sw	a3,48(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:91
  SREG x14, 13 * REGBYTES(sp)
6000006c:	02e12a23          	sw	a4,52(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:92
  SREG x15, 14 * REGBYTES(sp)
60000070:	02f12c23          	sw	a5,56(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:93
  SREG x16, 15 * REGBYTES(sp)
60000074:	03012e23          	sw	a6,60(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:94
  SREG x17, 16 * REGBYTES(sp)
60000078:	05112023          	sw	a7,64(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:95
  SREG x18, 17 * REGBYTES(sp)
6000007c:	05212223          	sw	s2,68(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:96
  SREG x19, 18 * REGBYTES(sp)
60000080:	05312423          	sw	s3,72(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:97
  SREG x20, 19 * REGBYTES(sp)
60000084:	05412623          	sw	s4,76(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:98
  SREG x21, 20 * REGBYTES(sp)
60000088:	05512823          	sw	s5,80(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:99
  SREG x22, 21 * REGBYTES(sp)
6000008c:	05612a23          	sw	s6,84(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:100
  SREG x23, 22 * REGBYTES(sp)
60000090:	05712c23          	sw	s7,88(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:101
  SREG x24, 23 * REGBYTES(sp)
60000094:	05812e23          	sw	s8,92(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:102
  SREG x25, 24 * REGBYTES(sp)
60000098:	07912023          	sw	s9,96(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:103
  SREG x26, 25 * REGBYTES(sp)
6000009c:	07a12223          	sw	s10,100(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:104
  SREG x27, 26 * REGBYTES(sp)
600000a0:	07b12423          	sw	s11,104(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:105
  SREG x28, 27 * REGBYTES(sp)
600000a4:	07c12623          	sw	t3,108(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:106
  SREG x29, 28 * REGBYTES(sp)
600000a8:	07d12823          	sw	t4,112(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:107
  SREG x30, 29 * REGBYTES(sp)
600000ac:	07e12a23          	sw	t5,116(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:108
  SREG x31, 30 * REGBYTES(sp)
600000b0:	07f12c23          	sw	t6,120(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:111


  csrr t0, mepc
600000b4:	341022f3          	csrr	t0,mepc
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:112
  SREG t0, 31 * REGBYTES(sp)
600000b8:	06512e23          	sw	t0,124(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:114

  csrr a0, mcause
600000bc:	34202573          	csrr	a0,mcause
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:115
  csrr a1, mepc
600000c0:	341025f3          	csrr	a1,mepc
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:116
  mv a2, sp
600000c4:	00010613          	mv	a2,sp
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:117
  jal handle_trap
600000c8:	4b0000ef          	jal	ra,60000578 <handle_trap>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:118
  csrw mepc, a0
600000cc:	34151073          	csrw	mepc,a0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:121

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
600000d0:	000022b7          	lui	t0,0x2
600000d4:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE+0x800>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:122
  csrs mstatus, t0
600000d8:	3002a073          	csrs	mstatus,t0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:124

  LREG x1, 0 * REGBYTES(sp)
600000dc:	00012083          	lw	ra,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:125
  LREG x2, 1 * REGBYTES(sp)
600000e0:	00412103          	lw	sp,4(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:126
  LREG x3, 2 * REGBYTES(sp)
600000e4:	00812183          	lw	gp,8(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:127
  LREG x4, 3 * REGBYTES(sp)
600000e8:	00c12203          	lw	tp,12(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:128
  LREG x5, 4 * REGBYTES(sp)
600000ec:	01012283          	lw	t0,16(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:129
  LREG x6, 5 * REGBYTES(sp)
600000f0:	01412303          	lw	t1,20(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:130
  LREG x7, 6 * REGBYTES(sp)
600000f4:	01812383          	lw	t2,24(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:131
  LREG x8, 7 * REGBYTES(sp)
600000f8:	01c12403          	lw	s0,28(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:132
  LREG x9, 8 * REGBYTES(sp)
600000fc:	02012483          	lw	s1,32(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:133
  LREG x10, 9 * REGBYTES(sp)
60000100:	02412503          	lw	a0,36(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:134
  LREG x11, 10 * REGBYTES(sp)
60000104:	02812583          	lw	a1,40(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:135
  LREG x12, 11 * REGBYTES(sp)
60000108:	02c12603          	lw	a2,44(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:136
  LREG x13, 12 * REGBYTES(sp)
6000010c:	03012683          	lw	a3,48(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:137
  LREG x14, 13 * REGBYTES(sp)
60000110:	03412703          	lw	a4,52(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:138
  LREG x15, 14 * REGBYTES(sp)
60000114:	03812783          	lw	a5,56(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:139
  LREG x16, 15 * REGBYTES(sp)
60000118:	03c12803          	lw	a6,60(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:140
  LREG x17, 16 * REGBYTES(sp)
6000011c:	04012883          	lw	a7,64(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:141
  LREG x18, 17 * REGBYTES(sp)
60000120:	04412903          	lw	s2,68(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:142
  LREG x19, 18 * REGBYTES(sp)
60000124:	04812983          	lw	s3,72(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:143
  LREG x20, 19 * REGBYTES(sp)
60000128:	04c12a03          	lw	s4,76(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:144
  LREG x21, 20 * REGBYTES(sp)
6000012c:	05012a83          	lw	s5,80(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:145
  LREG x22, 21 * REGBYTES(sp)
60000130:	05412b03          	lw	s6,84(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:146
  LREG x23, 22 * REGBYTES(sp)
60000134:	05812b83          	lw	s7,88(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:147
  LREG x24, 23 * REGBYTES(sp)
60000138:	05c12c03          	lw	s8,92(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:148
  LREG x25, 24 * REGBYTES(sp)
6000013c:	06012c83          	lw	s9,96(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:149
  LREG x26, 25 * REGBYTES(sp)
60000140:	06412d03          	lw	s10,100(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:150
  LREG x27, 26 * REGBYTES(sp)
60000144:	06812d83          	lw	s11,104(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:151
  LREG x28, 27 * REGBYTES(sp)
60000148:	06c12e03          	lw	t3,108(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:152
  LREG x29, 28 * REGBYTES(sp)
6000014c:	07012e83          	lw	t4,112(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:153
  LREG x30, 29 * REGBYTES(sp)
60000150:	07412f03          	lw	t5,116(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:154
  LREG x31, 30 * REGBYTES(sp)
60000154:	07812f83          	lw	t6,120(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:156

  addi sp, sp, 32*REGBYTES
60000158:	08010113          	addi	sp,sp,128
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:157
  mret
6000015c:	30200073          	mret

60000160 <copy_section>:
copy_section():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:37
extern uint32_t     __bss_start;
extern uint32_t     __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
60000160:	fe010113          	addi	sp,sp,-32
60000164:	00812e23          	sw	s0,28(sp)
60000168:	02010413          	addi	s0,sp,32
6000016c:	fea42623          	sw	a0,-20(s0)
60000170:	feb42423          	sw	a1,-24(s0)
60000174:	fec42223          	sw	a2,-28(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
60000178:	02c0006f          	j	600001a4 <copy_section+0x44>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:40
    {
        *p_vma = *p_load;
6000017c:	fec42783          	lw	a5,-20(s0)
60000180:	0007a703          	lw	a4,0(a5)
60000184:	fe842783          	lw	a5,-24(s0)
60000188:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:41
        ++p_load;
6000018c:	fec42783          	lw	a5,-20(s0)
60000190:	00478793          	addi	a5,a5,4
60000194:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:42
        ++p_vma;
60000198:	fe842783          	lw	a5,-24(s0)
6000019c:	00478793          	addi	a5,a5,4
600001a0:	fef42423          	sw	a5,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
600001a4:	fe842703          	lw	a4,-24(s0)
600001a8:	fe442783          	lw	a5,-28(s0)
600001ac:	fce7f8e3          	bleu	a4,a5,6000017c <copy_section+0x1c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:44
    }
}
600001b0:	00000013          	nop
600001b4:	01c12403          	lw	s0,28(sp)
600001b8:	02010113          	addi	sp,sp,32
600001bc:	00008067          	ret

600001c0 <zero_section>:
zero_section():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:47

static void zero_section(uint32_t * start, uint32_t * end)
{
600001c0:	fd010113          	addi	sp,sp,-48
600001c4:	02812623          	sw	s0,44(sp)
600001c8:	03010413          	addi	s0,sp,48
600001cc:	fca42e23          	sw	a0,-36(s0)
600001d0:	fcb42c23          	sw	a1,-40(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
600001d4:	fdc42783          	lw	a5,-36(s0)
600001d8:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
600001dc:	0180006f          	j	600001f4 <zero_section+0x34>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
600001e0:	fec42783          	lw	a5,-20(s0)
600001e4:	0007a023          	sw	zero,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:53
        ++p_zero;
600001e8:	fec42783          	lw	a5,-20(s0)
600001ec:	00478793          	addi	a5,a5,4
600001f0:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
600001f4:	fec42703          	lw	a4,-20(s0)
600001f8:	fd842783          	lw	a5,-40(s0)
600001fc:	fee7f2e3          	bleu	a4,a5,600001e0 <zero_section+0x20>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:55
    }
}
60000200:	00000013          	nop
60000204:	02c12403          	lw	s0,44(sp)
60000208:	03010113          	addi	sp,sp,48
6000020c:	00008067          	ret

60000210 <_init>:
_init():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:58

void _init(void)
{
60000210:	fe010113          	addi	sp,sp,-32
60000214:	00112e23          	sw	ra,28(sp)
60000218:	00812c23          	sw	s0,24(sp)
6000021c:	02010413          	addi	s0,sp,32
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
60000220:	600037b7          	lui	a5,0x60003
60000224:	ec078793          	addi	a5,a5,-320 # 60002ec0 <vLEDTestTask3+0x38>
60000228:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
6000022c:	fec42783          	lw	a5,-20(s0)
60000230:	fef42023          	sw	a5,-32(s0)
60000234:	fe042223          	sw	zero,-28(s0)
60000238:	fe042423          	sw	zero,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:63

    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
6000023c:	82018613          	addi	a2,gp,-2016 # 80000020 <__sdata_end>
60000240:	800007b7          	lui	a5,0x80000
60000244:	00078593          	mv	a1,a5
60000248:	600037b7          	lui	a5,0x60003
6000024c:	fd078513          	addi	a0,a5,-48 # 60002fd0 <__sdata_load>
60000250:	f11ff0ef          	jal	ra,60000160 <copy_section>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:64
    copy_section(&__data_load, &__data_start, &__data_end);
60000254:	8a018613          	addi	a2,gp,-1888 # 800000a0 <__data_end>
60000258:	82018593          	addi	a1,gp,-2016 # 80000020 <__sdata_end>
6000025c:	600037b7          	lui	a5,0x60003
60000260:	ff078513          	addi	a0,a5,-16 # 60002ff0 <__data_load>
60000264:	efdff0ef          	jal	ra,60000160 <copy_section>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:65
    zero_section(&__sbss_start, &__sbss_end);
60000268:	91018593          	addi	a1,gp,-1776 # 80000110 <__sbss_end>
6000026c:	8a018513          	addi	a0,gp,-1888 # 800000a0 <__data_end>
60000270:	f51ff0ef          	jal	ra,600001c0 <zero_section>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:66
    zero_section(&__bss_start, &__bss_end);
60000274:	800197b7          	lui	a5,0x80019
60000278:	1e078593          	addi	a1,a5,480 # 800191e0 <__stack_top+0xffffe000>
6000027c:	91018513          	addi	a0,gp,-1776 # 80000110 <__sbss_end>
60000280:	f41ff0ef          	jal	ra,600001c0 <zero_section>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:68
    
    main(1, argv);
60000284:	fe040793          	addi	a5,s0,-32
60000288:	00078593          	mv	a1,a5
6000028c:	00100513          	li	a0,1
60000290:	289020ef          	jal	ra,60002d18 <main>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:69
}
60000294:	00000013          	nop
60000298:	01c12083          	lw	ra,28(sp)
6000029c:	01812403          	lw	s0,24(sp)
600002a0:	02010113          	addi	sp,sp,32
600002a4:	00008067          	ret

600002a8 <_fini>:
_fini():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:74

/* Function called after main() finishes */
void
_fini()
{
600002a8:	ff010113          	addi	sp,sp,-16
600002ac:	00812623          	sw	s0,12(sp)
600002b0:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:75
}
600002b4:	00000013          	nop
600002b8:	00c12403          	lw	s0,12(sp)
600002bc:	01010113          	addi	sp,sp,16
600002c0:	00008067          	ret

600002c4 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:113

        ret_val = SUCCESS;
    }

    return ret_val;
}
600002c4:	fd010113          	addi	sp,sp,-48
600002c8:	02812623          	sw	s0,44(sp)
600002cc:	03010413          	addi	s0,sp,48
600002d0:	fca42e23          	sw	a0,-36(s0)
600002d4:	f14027f3          	csrr	a5,mhartid
600002d8:	fef42623          	sw	a5,-20(s0)
600002dc:	fec42783          	lw	a5,-20(s0)
600002e0:	fef42423          	sw	a5,-24(s0)
600002e4:	40000737          	lui	a4,0x40000
600002e8:	fdc42783          	lw	a5,-36(s0)
600002ec:	0057d793          	srli	a5,a5,0x5
600002f0:	fe842683          	lw	a3,-24(s0)
600002f4:	00569693          	slli	a3,a3,0x5
600002f8:	00f686b3          	add	a3,a3,a5
600002fc:	000017b7          	lui	a5,0x1
60000300:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000304:	00f687b3          	add	a5,a3,a5
60000308:	00279793          	slli	a5,a5,0x2
6000030c:	00f707b3          	add	a5,a4,a5
60000310:	0007a783          	lw	a5,0(a5)
60000314:	fef42223          	sw	a5,-28(s0)
60000318:	fdc42783          	lw	a5,-36(s0)
6000031c:	01f7f793          	andi	a5,a5,31
60000320:	00100713          	li	a4,1
60000324:	00f717b3          	sll	a5,a4,a5
60000328:	fff7c793          	not	a5,a5
6000032c:	fe442703          	lw	a4,-28(s0)
60000330:	00f777b3          	and	a5,a4,a5
60000334:	fef42223          	sw	a5,-28(s0)
60000338:	40000737          	lui	a4,0x40000
6000033c:	fdc42783          	lw	a5,-36(s0)
60000340:	0057d793          	srli	a5,a5,0x5
60000344:	fe842683          	lw	a3,-24(s0)
60000348:	00569693          	slli	a3,a3,0x5
6000034c:	00f686b3          	add	a3,a3,a5
60000350:	000017b7          	lui	a5,0x1
60000354:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000358:	00f687b3          	add	a5,a3,a5
6000035c:	00279793          	slli	a5,a5,0x2
60000360:	00f707b3          	add	a5,a4,a5
60000364:	fe442703          	lw	a4,-28(s0)
60000368:	00e7a023          	sw	a4,0(a5)
6000036c:	00000013          	nop
60000370:	02c12403          	lw	s0,44(sp)
60000374:	03010113          	addi	sp,sp,48
60000378:	00008067          	ret

6000037c <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
6000037c:	fe010113          	addi	sp,sp,-32
60000380:	00812e23          	sw	s0,28(sp)
60000384:	02010413          	addi	s0,sp,32
60000388:	f14027f3          	csrr	a5,mhartid
6000038c:	fef42623          	sw	a5,-20(s0)
60000390:	fec42783          	lw	a5,-20(s0)
60000394:	fef42423          	sw	a5,-24(s0)
60000398:	40000737          	lui	a4,0x40000
6000039c:	fe842783          	lw	a5,-24(s0)
600003a0:	20078793          	addi	a5,a5,512
600003a4:	00c79793          	slli	a5,a5,0xc
600003a8:	00f707b3          	add	a5,a4,a5
600003ac:	0047a783          	lw	a5,4(a5)
600003b0:	00078513          	mv	a0,a5
600003b4:	01c12403          	lw	s0,28(sp)
600003b8:	02010113          	addi	sp,sp,32
600003bc:	00008067          	ret

600003c0 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
600003c0:	fd010113          	addi	sp,sp,-48
600003c4:	02812623          	sw	s0,44(sp)
600003c8:	03010413          	addi	s0,sp,48
600003cc:	fca42e23          	sw	a0,-36(s0)
600003d0:	f14027f3          	csrr	a5,mhartid
600003d4:	fef42623          	sw	a5,-20(s0)
600003d8:	fec42783          	lw	a5,-20(s0)
600003dc:	fef42423          	sw	a5,-24(s0)
600003e0:	40000737          	lui	a4,0x40000
600003e4:	fe842783          	lw	a5,-24(s0)
600003e8:	20078793          	addi	a5,a5,512
600003ec:	00c79793          	slli	a5,a5,0xc
600003f0:	00f707b3          	add	a5,a4,a5
600003f4:	fdc42703          	lw	a4,-36(s0)
600003f8:	00e7a223          	sw	a4,4(a5)
600003fc:	00000013          	nop
60000400:	02c12403          	lw	s0,44(sp)
60000404:	03010113          	addi	sp,sp,48
60000408:	00008067          	ret

6000040c <__enable_irq>:
__enable_irq():
6000040c:	fe010113          	addi	sp,sp,-32
60000410:	00812e23          	sw	s0,28(sp)
60000414:	02010413          	addi	s0,sp,32
60000418:	300467f3          	csrrsi	a5,mstatus,8
6000041c:	fef42623          	sw	a5,-20(s0)
60000420:	00000013          	nop
60000424:	01c12403          	lw	s0,28(sp)
60000428:	02010113          	addi	sp,sp,32
6000042c:	00008067          	ret

60000430 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:119

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
static void handle_m_timer_interrupt(void)
{
60000430:	fe010113          	addi	sp,sp,-32
60000434:	00112e23          	sw	ra,28(sp)
60000438:	00812c23          	sw	s0,24(sp)
6000043c:	02010413          	addi	s0,sp,32
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:120
    clear_csr(mie, MIP_MTIP);
60000440:	08000793          	li	a5,128
60000444:	3047b7f3          	csrrc	a5,mie,a5
60000448:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:122

    SysTick_Handler();
6000044c:	380010ef          	jal	ra,600017cc <SysTick_Handler>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:124

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
60000450:	44000737          	lui	a4,0x44000
60000454:	0000c7b7          	lui	a5,0xc
60000458:	00f707b3          	add	a5,a4,a5
6000045c:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE+0xaffc>
60000460:	ff87a783          	lw	a5,-8(a5)
60000464:	8a01a583          	lw	a1,-1888(gp) # 800000a0 <__data_end>
60000468:	8a41a603          	lw	a2,-1884(gp) # 800000a4 <__data_end+0x4>
6000046c:	44000537          	lui	a0,0x44000
60000470:	f1402773          	csrr	a4,mhartid
60000474:	fee42423          	sw	a4,-24(s0)
60000478:	fe842883          	lw	a7,-24(s0)
6000047c:	00b786b3          	add	a3,a5,a1
60000480:	00068313          	mv	t1,a3
60000484:	00f33333          	sltu	t1,t1,a5
60000488:	00c80733          	add	a4,a6,a2
6000048c:	00e307b3          	add	a5,t1,a4
60000490:	00078713          	mv	a4,a5
60000494:	00068793          	mv	a5,a3
60000498:	00070813          	mv	a6,a4
6000049c:	00001737          	lui	a4,0x1
600004a0:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0x800>
600004a4:	00e88733          	add	a4,a7,a4
600004a8:	00371713          	slli	a4,a4,0x3
600004ac:	00e50733          	add	a4,a0,a4
600004b0:	00f72023          	sw	a5,0(a4)
600004b4:	01072223          	sw	a6,4(a4)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:126

    set_csr(mie, MIP_MTIP);
600004b8:	08000793          	li	a5,128
600004bc:	3047a7f3          	csrrs	a5,mie,a5
600004c0:	fef42223          	sw	a5,-28(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:127
}
600004c4:	00000013          	nop
600004c8:	01c12083          	lw	ra,28(sp)
600004cc:	01812403          	lw	s0,24(sp)
600004d0:	02010113          	addi	sp,sp,32
600004d4:	00008067          	ret

600004d8 <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:172

/*------------------------------------------------------------------------------
 *
 */
static void handle_m_ext_interrupt(void)
{
600004d8:	fe010113          	addi	sp,sp,-32
600004dc:	00112e23          	sw	ra,28(sp)
600004e0:	00812c23          	sw	s0,24(sp)
600004e4:	02010413          	addi	s0,sp,32
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:173
    uint32_t int_num  = PLIC_ClaimIRQ();
600004e8:	e95ff0ef          	jal	ra,6000037c <PLIC_ClaimIRQ>
600004ec:	fea42623          	sw	a0,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:174
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
600004f0:	fe0405a3          	sb	zero,-21(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:176

    disable = ext_irq_handler_table[int_num]();
600004f4:	800007b7          	lui	a5,0x80000
600004f8:	fec42703          	lw	a4,-20(s0)
600004fc:	00271713          	slli	a4,a4,0x2
60000500:	02078793          	addi	a5,a5,32 # 80000020 <__stack_top+0xfffe4e40>
60000504:	00f707b3          	add	a5,a4,a5
60000508:	0007a783          	lw	a5,0(a5)
6000050c:	000780e7          	jalr	a5
60000510:	00050793          	mv	a5,a0
60000514:	fef405a3          	sb	a5,-21(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:178

    PLIC_CompleteIRQ(int_num);
60000518:	fec42503          	lw	a0,-20(s0)
6000051c:	ea5ff0ef          	jal	ra,600003c0 <PLIC_CompleteIRQ>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:180

    if(EXT_IRQ_DISABLE == disable)
60000520:	feb44703          	lbu	a4,-21(s0)
60000524:	00100793          	li	a5,1
60000528:	00f71663          	bne	a4,a5,60000534 <handle_m_ext_interrupt+0x5c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:182
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
6000052c:	fec42503          	lw	a0,-20(s0)
60000530:	d95ff0ef          	jal	ra,600002c4 <PLIC_DisableIRQ>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:184
    }
}
60000534:	00000013          	nop
60000538:	01c12083          	lw	ra,28(sp)
6000053c:	01812403          	lw	s0,24(sp)
60000540:	02010113          	addi	sp,sp,32
60000544:	00008067          	ret

60000548 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:187

static void handle_m_soft_interrupt(void)
{
60000548:	ff010113          	addi	sp,sp,-16
6000054c:	00112623          	sw	ra,12(sp)
60000550:	00812423          	sw	s0,8(sp)
60000554:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:188
    Software_IRQHandler();
60000558:	384010ef          	jal	ra,600018dc <Software_IRQHandler>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:191

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00U;
6000055c:	440007b7          	lui	a5,0x44000
60000560:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f00000>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:192
}
60000564:	00000013          	nop
60000568:	00c12083          	lw	ra,12(sp)
6000056c:	00812403          	lw	s0,8(sp)
60000570:	01010113          	addi	sp,sp,16
60000574:	00008067          	ret

60000578 <handle_trap>:
handle_trap():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:198

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t mepc)
{
60000578:	fb010113          	addi	sp,sp,-80
6000057c:	04112623          	sw	ra,76(sp)
60000580:	04812423          	sw	s0,72(sp)
60000584:	05010413          	addi	s0,sp,80
60000588:	faa42e23          	sw	a0,-68(s0)
6000058c:	fab42c23          	sw	a1,-72(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:199
    if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
60000590:	fbc42783          	lw	a5,-68(s0)
60000594:	0207d263          	bgez	a5,600005b8 <handle_trap+0x40>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:199 (discriminator 1)
60000598:	fbc42703          	lw	a4,-68(s0)
6000059c:	800007b7          	lui	a5,0x80000
600005a0:	fff7c793          	not	a5,a5
600005a4:	00f77733          	and	a4,a4,a5
600005a8:	00b00793          	li	a5,11
600005ac:	00f71663          	bne	a4,a5,600005b8 <handle_trap+0x40>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:201
    {
        handle_m_ext_interrupt();
600005b0:	f29ff0ef          	jal	ra,600004d8 <handle_m_ext_interrupt>
600005b4:	0a80006f          	j	6000065c <handle_trap+0xe4>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:203
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
600005b8:	fbc42783          	lw	a5,-68(s0)
600005bc:	0207d263          	bgez	a5,600005e0 <handle_trap+0x68>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:203 (discriminator 1)
600005c0:	fbc42703          	lw	a4,-68(s0)
600005c4:	800007b7          	lui	a5,0x80000
600005c8:	fff7c793          	not	a5,a5
600005cc:	00f77733          	and	a4,a4,a5
600005d0:	00700793          	li	a5,7
600005d4:	00f71663          	bne	a4,a5,600005e0 <handle_trap+0x68>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:205
    {
        handle_m_timer_interrupt();
600005d8:	e59ff0ef          	jal	ra,60000430 <handle_m_timer_interrupt>
600005dc:	0800006f          	j	6000065c <handle_trap+0xe4>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:207
    }
    else if ( (mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
600005e0:	fbc42783          	lw	a5,-68(s0)
600005e4:	0207d263          	bgez	a5,60000608 <handle_trap+0x90>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:207 (discriminator 1)
600005e8:	fbc42703          	lw	a4,-68(s0)
600005ec:	800007b7          	lui	a5,0x80000
600005f0:	fff7c793          	not	a5,a5
600005f4:	00f77733          	and	a4,a4,a5
600005f8:	00300793          	li	a5,3
600005fc:	00f71663          	bne	a4,a5,60000608 <handle_trap+0x90>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:209
    {
        handle_m_soft_interrupt();
60000600:	f49ff0ef          	jal	ra,60000548 <handle_m_soft_interrupt>
60000604:	0580006f          	j	6000065c <handle_trap+0xe4>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:234
         B Instruction page fault
         C Load page fault                (mtval/mbadaddr is the address)
         E Store page fault               (mtval/mbadaddr is the address)
        */

         uintptr_t mip      = read_csr(mip);      /* interrupt pending */
60000608:	344027f3          	csrr	a5,mip
6000060c:	fef42623          	sw	a5,-20(s0)
60000610:	fec42783          	lw	a5,-20(s0)
60000614:	fef42423          	sw	a5,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:235
         uintptr_t mbadaddr = read_csr(mbadaddr); /* additional info and meaning depends on mcause */
60000618:	343027f3          	csrr	a5,mbadaddr
6000061c:	fef42223          	sw	a5,-28(s0)
60000620:	fe442783          	lw	a5,-28(s0)
60000624:	fef42023          	sw	a5,-32(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:236
         uintptr_t mtvec    = read_csr(mtvec);    /* trap vector */
60000628:	305027f3          	csrr	a5,mtvec
6000062c:	fcf42e23          	sw	a5,-36(s0)
60000630:	fdc42783          	lw	a5,-36(s0)
60000634:	fcf42c23          	sw	a5,-40(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:237
         uintptr_t mscratch = read_csr(mscratch); /* temporary, sometimes might hold temporary value of a0 */
60000638:	340027f3          	csrr	a5,mscratch
6000063c:	fcf42a23          	sw	a5,-44(s0)
60000640:	fd442783          	lw	a5,-44(s0)
60000644:	fcf42823          	sw	a5,-48(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:238
         uintptr_t mstatus  = read_csr(mstatus);  /* status contains many smaller fields: */
60000648:	300027f3          	csrr	a5,mstatus
6000064c:	fcf42623          	sw	a5,-52(s0)
60000650:	fcc42783          	lw	a5,-52(s0)
60000654:	fcf42423          	sw	a5,-56(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:241

		/* breakpoint*/
        __asm("ebreak");
60000658:	00100073          	ebreak
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:246
#else
        _exit(1 + mcause);
#endif
    }
    return mepc;
6000065c:	fb842783          	lw	a5,-72(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:247
}
60000660:	00078513          	mv	a0,a5
60000664:	04c12083          	lw	ra,76(sp)
60000668:	04812403          	lw	s0,72(sp)
6000066c:	05010113          	addi	sp,sp,80
60000670:	00008067          	ret

60000674 <Invalid_IRQHandler>:
Invalid_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:35
	/*Default handler*/
}

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t Invalid_IRQHandler(void)
{
60000674:	ff010113          	addi	sp,sp,-16
60000678:	00812623          	sw	s0,12(sp)
6000067c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:36
    return(0U); /*Default handler*/
60000680:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:37
}
60000684:	00078513          	mv	a0,a5
60000688:	00c12403          	lw	s0,12(sp)
6000068c:	01010113          	addi	sp,sp,16
60000690:	00008067          	ret

60000694 <External_1_IRQHandler>:
External_1_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:41

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_1_IRQHandler(void)
{
60000694:	ff010113          	addi	sp,sp,-16
60000698:	00812623          	sw	s0,12(sp)
6000069c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:42
    return(0U); /*Default handler*/
600006a0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:43
}
600006a4:	00078513          	mv	a0,a5
600006a8:	00c12403          	lw	s0,12(sp)
600006ac:	01010113          	addi	sp,sp,16
600006b0:	00008067          	ret

600006b4 <External_2_IRQHandler>:
External_2_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:47

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_2_IRQHandler(void)
{
600006b4:	ff010113          	addi	sp,sp,-16
600006b8:	00812623          	sw	s0,12(sp)
600006bc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:48
    return(0U); /*Default handler*/
600006c0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:49
}
600006c4:	00078513          	mv	a0,a5
600006c8:	00c12403          	lw	s0,12(sp)
600006cc:	01010113          	addi	sp,sp,16
600006d0:	00008067          	ret

600006d4 <External_3_IRQHandler>:
External_3_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:53

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_3_IRQHandler(void)
{
600006d4:	ff010113          	addi	sp,sp,-16
600006d8:	00812623          	sw	s0,12(sp)
600006dc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:54
    return(0U); /*Default handler*/
600006e0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:55
}
600006e4:	00078513          	mv	a0,a5
600006e8:	00c12403          	lw	s0,12(sp)
600006ec:	01010113          	addi	sp,sp,16
600006f0:	00008067          	ret

600006f4 <External_4_IRQHandler>:
External_4_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:59

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_4_IRQHandler(void)
{
600006f4:	ff010113          	addi	sp,sp,-16
600006f8:	00812623          	sw	s0,12(sp)
600006fc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:60
	return(0U); /*Default handler*/
60000700:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:61
}
60000704:	00078513          	mv	a0,a5
60000708:	00c12403          	lw	s0,12(sp)
6000070c:	01010113          	addi	sp,sp,16
60000710:	00008067          	ret

60000714 <External_5_IRQHandler>:
External_5_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:65

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_5_IRQHandler(void)
{
60000714:	ff010113          	addi	sp,sp,-16
60000718:	00812623          	sw	s0,12(sp)
6000071c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:66
    return(0U); /*Default handler*/
60000720:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:67
}
60000724:	00078513          	mv	a0,a5
60000728:	00c12403          	lw	s0,12(sp)
6000072c:	01010113          	addi	sp,sp,16
60000730:	00008067          	ret

60000734 <External_6_IRQHandler>:
External_6_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:71

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_6_IRQHandler(void)
{
60000734:	ff010113          	addi	sp,sp,-16
60000738:	00812623          	sw	s0,12(sp)
6000073c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:72
    return(0U); /*Default handler*/
60000740:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:73
}
60000744:	00078513          	mv	a0,a5
60000748:	00c12403          	lw	s0,12(sp)
6000074c:	01010113          	addi	sp,sp,16
60000750:	00008067          	ret

60000754 <External_7_IRQHandler>:
External_7_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:77

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_7_IRQHandler(void)
{
60000754:	ff010113          	addi	sp,sp,-16
60000758:	00812623          	sw	s0,12(sp)
6000075c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0U); /*Default handler*/
60000760:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:79
}
60000764:	00078513          	mv	a0,a5
60000768:	00c12403          	lw	s0,12(sp)
6000076c:	01010113          	addi	sp,sp,16
60000770:	00008067          	ret

60000774 <External_8_IRQHandler>:
External_8_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:83

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_8_IRQHandler(void)
{
60000774:	ff010113          	addi	sp,sp,-16
60000778:	00812623          	sw	s0,12(sp)
6000077c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:84
    return(0U); /*Default handler*/
60000780:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:85
}
60000784:	00078513          	mv	a0,a5
60000788:	00c12403          	lw	s0,12(sp)
6000078c:	01010113          	addi	sp,sp,16
60000790:	00008067          	ret

60000794 <External_9_IRQHandler>:
External_9_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:89

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_9_IRQHandler(void)
{
60000794:	ff010113          	addi	sp,sp,-16
60000798:	00812623          	sw	s0,12(sp)
6000079c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:90
    return(0U); /*Default handler*/
600007a0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:91
}
600007a4:	00078513          	mv	a0,a5
600007a8:	00c12403          	lw	s0,12(sp)
600007ac:	01010113          	addi	sp,sp,16
600007b0:	00008067          	ret

600007b4 <External_10_IRQHandler>:
External_10_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:95

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_10_IRQHandler(void)
{
600007b4:	ff010113          	addi	sp,sp,-16
600007b8:	00812623          	sw	s0,12(sp)
600007bc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:96
    return(0U); /*Default handler*/
600007c0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:97
}
600007c4:	00078513          	mv	a0,a5
600007c8:	00c12403          	lw	s0,12(sp)
600007cc:	01010113          	addi	sp,sp,16
600007d0:	00008067          	ret

600007d4 <External_11_IRQHandler>:
External_11_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:101

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_11_IRQHandler(void)
{
600007d4:	ff010113          	addi	sp,sp,-16
600007d8:	00812623          	sw	s0,12(sp)
600007dc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:102
    return(0U); /*Default handler*/
600007e0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:103
}
600007e4:	00078513          	mv	a0,a5
600007e8:	00c12403          	lw	s0,12(sp)
600007ec:	01010113          	addi	sp,sp,16
600007f0:	00008067          	ret

600007f4 <External_12_IRQHandler>:
External_12_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:107

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_12_IRQHandler(void)
{
600007f4:	ff010113          	addi	sp,sp,-16
600007f8:	00812623          	sw	s0,12(sp)
600007fc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:108
	return(0U); /*Default handler*/
60000800:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:109
}
60000804:	00078513          	mv	a0,a5
60000808:	00c12403          	lw	s0,12(sp)
6000080c:	01010113          	addi	sp,sp,16
60000810:	00008067          	ret

60000814 <External_13_IRQHandler>:
External_13_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:113

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_13_IRQHandler(void)
{
60000814:	ff010113          	addi	sp,sp,-16
60000818:	00812623          	sw	s0,12(sp)
6000081c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:114
	return(0U); /*Default handler*/
60000820:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:115
}
60000824:	00078513          	mv	a0,a5
60000828:	00c12403          	lw	s0,12(sp)
6000082c:	01010113          	addi	sp,sp,16
60000830:	00008067          	ret

60000834 <External_14_IRQHandler>:
External_14_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:119

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_14_IRQHandler(void)
{
60000834:	ff010113          	addi	sp,sp,-16
60000838:	00812623          	sw	s0,12(sp)
6000083c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:120
	return(0U); /*Default handler*/
60000840:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:121
}
60000844:	00078513          	mv	a0,a5
60000848:	00c12403          	lw	s0,12(sp)
6000084c:	01010113          	addi	sp,sp,16
60000850:	00008067          	ret

60000854 <External_15_IRQHandler>:
External_15_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:125

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_15_IRQHandler(void)
{
60000854:	ff010113          	addi	sp,sp,-16
60000858:	00812623          	sw	s0,12(sp)
6000085c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:126
	return(0U); /*Default handler*/
60000860:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:127
}
60000864:	00078513          	mv	a0,a5
60000868:	00c12403          	lw	s0,12(sp)
6000086c:	01010113          	addi	sp,sp,16
60000870:	00008067          	ret

60000874 <External_16_IRQHandler>:
External_16_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:131

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_16_IRQHandler(void)
{
60000874:	ff010113          	addi	sp,sp,-16
60000878:	00812623          	sw	s0,12(sp)
6000087c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:132
	return(0U); /*Default handler*/
60000880:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:133
}
60000884:	00078513          	mv	a0,a5
60000888:	00c12403          	lw	s0,12(sp)
6000088c:	01010113          	addi	sp,sp,16
60000890:	00008067          	ret

60000894 <External_17_IRQHandler>:
External_17_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:137

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_17_IRQHandler(void)
{
60000894:	ff010113          	addi	sp,sp,-16
60000898:	00812623          	sw	s0,12(sp)
6000089c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:138
	return(0U); /*Default handler*/
600008a0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:139
}
600008a4:	00078513          	mv	a0,a5
600008a8:	00c12403          	lw	s0,12(sp)
600008ac:	01010113          	addi	sp,sp,16
600008b0:	00008067          	ret

600008b4 <External_18_IRQHandler>:
External_18_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:143

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_18_IRQHandler(void)
{
600008b4:	ff010113          	addi	sp,sp,-16
600008b8:	00812623          	sw	s0,12(sp)
600008bc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:144
	return(0U); /*Default handler*/
600008c0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:145
}
600008c4:	00078513          	mv	a0,a5
600008c8:	00c12403          	lw	s0,12(sp)
600008cc:	01010113          	addi	sp,sp,16
600008d0:	00008067          	ret

600008d4 <External_19_IRQHandler>:
External_19_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:149

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_19_IRQHandler(void)
{
600008d4:	ff010113          	addi	sp,sp,-16
600008d8:	00812623          	sw	s0,12(sp)
600008dc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:150
	return(0U); /*Default handler*/
600008e0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:151
}
600008e4:	00078513          	mv	a0,a5
600008e8:	00c12403          	lw	s0,12(sp)
600008ec:	01010113          	addi	sp,sp,16
600008f0:	00008067          	ret

600008f4 <External_20_IRQHandler>:
External_20_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:155

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_20_IRQHandler(void)
{
600008f4:	ff010113          	addi	sp,sp,-16
600008f8:	00812623          	sw	s0,12(sp)
600008fc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:156
	return(0U); /*Default handler*/
60000900:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:157
}
60000904:	00078513          	mv	a0,a5
60000908:	00c12403          	lw	s0,12(sp)
6000090c:	01010113          	addi	sp,sp,16
60000910:	00008067          	ret

60000914 <External_21_IRQHandler>:
External_21_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:161

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_21_IRQHandler(void)
{
60000914:	ff010113          	addi	sp,sp,-16
60000918:	00812623          	sw	s0,12(sp)
6000091c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:162
	return(0U); /*Default handler*/
60000920:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:163
}
60000924:	00078513          	mv	a0,a5
60000928:	00c12403          	lw	s0,12(sp)
6000092c:	01010113          	addi	sp,sp,16
60000930:	00008067          	ret

60000934 <External_22_IRQHandler>:
External_22_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:167

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_22_IRQHandler(void)
{
60000934:	ff010113          	addi	sp,sp,-16
60000938:	00812623          	sw	s0,12(sp)
6000093c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:168
	return(0U); /*Default handler*/
60000940:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:169
}
60000944:	00078513          	mv	a0,a5
60000948:	00c12403          	lw	s0,12(sp)
6000094c:	01010113          	addi	sp,sp,16
60000950:	00008067          	ret

60000954 <External_23_IRQHandler>:
External_23_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:173

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_23_IRQHandler(void)
{
60000954:	ff010113          	addi	sp,sp,-16
60000958:	00812623          	sw	s0,12(sp)
6000095c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:174
	return(0U); /*Default handler*/
60000960:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:175
}
60000964:	00078513          	mv	a0,a5
60000968:	00c12403          	lw	s0,12(sp)
6000096c:	01010113          	addi	sp,sp,16
60000970:	00008067          	ret

60000974 <External_24_IRQHandler>:
External_24_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:179

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_24_IRQHandler(void)
{
60000974:	ff010113          	addi	sp,sp,-16
60000978:	00812623          	sw	s0,12(sp)
6000097c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:180
	return(0U); /*Default handler*/
60000980:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:181
}
60000984:	00078513          	mv	a0,a5
60000988:	00c12403          	lw	s0,12(sp)
6000098c:	01010113          	addi	sp,sp,16
60000990:	00008067          	ret

60000994 <External_25_IRQHandler>:
External_25_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:185

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_25_IRQHandler(void)
{
60000994:	ff010113          	addi	sp,sp,-16
60000998:	00812623          	sw	s0,12(sp)
6000099c:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:186
	return(0U); /*Default handler*/
600009a0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:187
}
600009a4:	00078513          	mv	a0,a5
600009a8:	00c12403          	lw	s0,12(sp)
600009ac:	01010113          	addi	sp,sp,16
600009b0:	00008067          	ret

600009b4 <External_26_IRQHandler>:
External_26_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:191

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_26_IRQHandler(void)
{
600009b4:	ff010113          	addi	sp,sp,-16
600009b8:	00812623          	sw	s0,12(sp)
600009bc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:192
	return(0U); /*Default handler*/
600009c0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:193
}
600009c4:	00078513          	mv	a0,a5
600009c8:	00c12403          	lw	s0,12(sp)
600009cc:	01010113          	addi	sp,sp,16
600009d0:	00008067          	ret

600009d4 <External_27_IRQHandler>:
External_27_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:197

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_27_IRQHandler(void)
{
600009d4:	ff010113          	addi	sp,sp,-16
600009d8:	00812623          	sw	s0,12(sp)
600009dc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:198
	return(0U); /*Default handler*/
600009e0:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:199
}
600009e4:	00078513          	mv	a0,a5
600009e8:	00c12403          	lw	s0,12(sp)
600009ec:	01010113          	addi	sp,sp,16
600009f0:	00008067          	ret

600009f4 <External_28_IRQHandler>:
External_28_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:203

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_28_IRQHandler(void)
{
600009f4:	ff010113          	addi	sp,sp,-16
600009f8:	00812623          	sw	s0,12(sp)
600009fc:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:204
	return(0U); /*Default handler*/
60000a00:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:205
}
60000a04:	00078513          	mv	a0,a5
60000a08:	00c12403          	lw	s0,12(sp)
60000a0c:	01010113          	addi	sp,sp,16
60000a10:	00008067          	ret

60000a14 <HW_set_32bit_reg>:
HW_set_32bit_reg():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
60000a14:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f00000>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:37
    ret
60000a18:	00008067          	ret

60000a1c <HW_get_32bit_reg>:
HW_get_32bit_reg():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
60000a1c:	00052503          	lw	a0,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:48
    ret
60000a20:	00008067          	ret

60000a24 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
60000a24:	00068e13          	mv	t3,a3
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
60000a28:	00be1e33          	sll	t3,t3,a1
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
60000a2c:	00ce7e33          	and	t3,t3,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
60000a30:	00052303          	lw	t1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:64
    mv t2, a2
60000a34:	00060393          	mv	t2,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:65
    not t2, t2
60000a38:	fff3c393          	not	t2,t2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
60000a3c:	00737333          	and	t1,t1,t2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
60000a40:	01c36333          	or	t1,t1,t3
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
60000a44:	00652023          	sw	t1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:69
    ret
60000a48:	00008067          	ret

60000a4c <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
60000a4c:	00052503          	lw	a0,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
60000a50:	00c57533          	and	a0,a0,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
60000a54:	00b55533          	srl	a0,a0,a1
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:86
    ret
60000a58:	00008067          	ret

60000a5c <HW_set_16bit_reg>:
HW_set_16bit_reg():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
60000a5c:	00b51023          	sh	a1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:97
    ret
60000a60:	00008067          	ret

60000a64 <HW_get_16bit_reg>:
HW_get_16bit_reg():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
60000a64:	00051503          	lh	a0,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:108
    ret
60000a68:	00008067          	ret

60000a6c <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
60000a6c:	00068e13          	mv	t3,a3
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
60000a70:	00be1e33          	sll	t3,t3,a1
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
60000a74:	00ce7e33          	and	t3,t3,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
60000a78:	00051303          	lh	t1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:125
    mv t2, a2
60000a7c:	00060393          	mv	t2,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:126
    not t2, t2
60000a80:	fff3c393          	not	t2,t2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
60000a84:	00737333          	and	t1,t1,t2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
60000a88:	01c36333          	or	t1,t1,t3
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
60000a8c:	00651023          	sh	t1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:130
    ret
60000a90:	00008067          	ret

60000a94 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
60000a94:	00051503          	lh	a0,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
60000a98:	00c57533          	and	a0,a0,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
60000a9c:	00b55533          	srl	a0,a0,a1
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:147
    ret
60000aa0:	00008067          	ret

60000aa4 <HW_set_8bit_reg>:
HW_set_8bit_reg():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
60000aa4:	00b50023          	sb	a1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:158
    ret
60000aa8:	00008067          	ret

60000aac <HW_get_8bit_reg>:
HW_get_8bit_reg():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
60000aac:	00050503          	lb	a0,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:169
    ret
60000ab0:	00008067          	ret

60000ab4 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
60000ab4:	00068e13          	mv	t3,a3
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
60000ab8:	00be1e33          	sll	t3,t3,a1
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
60000abc:	00ce7e33          	and	t3,t3,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
60000ac0:	00050303          	lb	t1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:185
    mv t2, a2
60000ac4:	00060393          	mv	t2,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:186
    not t2, t2
60000ac8:	fff3c393          	not	t2,t2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
60000acc:	00737333          	and	t1,t1,t2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
60000ad0:	01c36333          	or	t1,t1,t3
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
60000ad4:	00650023          	sb	t1,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:190
    ret
60000ad8:	00008067          	ret

60000adc <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
60000adc:	00050503          	lb	a0,0(a0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
60000ae0:	00c57533          	and	a0,a0,a2
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
60000ae4:	00b55533          	srl	a0,a0,a1
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:207
    ret
60000ae8:	00008067          	ret

60000aec <UART_init>:
UART_init():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:226
            this_uart->status |= new_status;
            rx_full = new_status & STATUS_RXFULL_MASK;
        }
    }
    return rx_idx;
}
60000aec:	fd010113          	addi	sp,sp,-48
60000af0:	02112623          	sw	ra,44(sp)
60000af4:	02812423          	sw	s0,40(sp)
60000af8:	03010413          	addi	s0,sp,48
60000afc:	fca42e23          	sw	a0,-36(s0)
60000b00:	fcb42c23          	sw	a1,-40(s0)
60000b04:	00060793          	mv	a5,a2
60000b08:	00068713          	mv	a4,a3
60000b0c:	fcf41b23          	sh	a5,-42(s0)
60000b10:	00070793          	mv	a5,a4
60000b14:	fcf40aa3          	sb	a5,-43(s0)
60000b18:	fdc42783          	lw	a5,-36(s0)
60000b1c:	0c078a63          	beqz	a5,60000bf0 <UART_init+0x104>
60000b20:	fd544703          	lbu	a4,-43(s0)
60000b24:	00700793          	li	a5,7
60000b28:	0ce7e463          	bltu	a5,a4,60000bf0 <UART_init+0x104>
60000b2c:	fd645703          	lhu	a4,-42(s0)
60000b30:	000027b7          	lui	a5,0x2
60000b34:	0af77e63          	bleu	a5,a4,60000bf0 <UART_init+0x104>
60000b38:	fd842783          	lw	a5,-40(s0)
60000b3c:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE+0x1008>
60000b40:	fd645783          	lhu	a5,-42(s0)
60000b44:	0ff7f793          	andi	a5,a5,255
60000b48:	00078593          	mv	a1,a5
60000b4c:	00070513          	mv	a0,a4
60000b50:	f55ff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000b54:	fd842783          	lw	a5,-40(s0)
60000b58:	00c78693          	addi	a3,a5,12
60000b5c:	fd544703          	lbu	a4,-43(s0)
60000b60:	fd645783          	lhu	a5,-42(s0)
60000b64:	4057d793          	srai	a5,a5,0x5
60000b68:	7f87f793          	andi	a5,a5,2040
60000b6c:	00f767b3          	or	a5,a4,a5
60000b70:	00078593          	mv	a1,a5
60000b74:	00068513          	mv	a0,a3
60000b78:	f2dff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000b7c:	fdc42783          	lw	a5,-36(s0)
60000b80:	fd842703          	lw	a4,-40(s0)
60000b84:	00e7a023          	sw	a4,0(a5)
60000b88:	fdc42783          	lw	a5,-36(s0)
60000b8c:	0007a783          	lw	a5,0(a5)
60000b90:	01078793          	addi	a5,a5,16
60000b94:	00078513          	mv	a0,a5
60000b98:	f15ff0ef          	jal	ra,60000aac <HW_get_8bit_reg>
60000b9c:	00050793          	mv	a5,a0
60000ba0:	0027f793          	andi	a5,a5,2
60000ba4:	fef407a3          	sb	a5,-17(s0)
60000ba8:	0380006f          	j	60000be0 <UART_init+0xf4>
60000bac:	fdc42783          	lw	a5,-36(s0)
60000bb0:	0007a783          	lw	a5,0(a5)
60000bb4:	00478793          	addi	a5,a5,4
60000bb8:	00078513          	mv	a0,a5
60000bbc:	ef1ff0ef          	jal	ra,60000aac <HW_get_8bit_reg>
60000bc0:	fdc42783          	lw	a5,-36(s0)
60000bc4:	0007a783          	lw	a5,0(a5)
60000bc8:	01078793          	addi	a5,a5,16
60000bcc:	00078513          	mv	a0,a5
60000bd0:	eddff0ef          	jal	ra,60000aac <HW_get_8bit_reg>
60000bd4:	00050793          	mv	a5,a0
60000bd8:	0027f793          	andi	a5,a5,2
60000bdc:	fef407a3          	sb	a5,-17(s0)
60000be0:	fef44783          	lbu	a5,-17(s0)
60000be4:	fc0794e3          	bnez	a5,60000bac <UART_init+0xc0>
60000be8:	fdc42783          	lw	a5,-36(s0)
60000bec:	00078223          	sb	zero,4(a5)
60000bf0:	00000013          	nop
60000bf4:	02c12083          	lw	ra,44(sp)
60000bf8:	02812403          	lw	s0,40(sp)
60000bfc:	03010113          	addi	sp,sp,48
60000c00:	00008067          	ret

60000c04 <UART_send>:
UART_send():
60000c04:	fd010113          	addi	sp,sp,-48
60000c08:	02112623          	sw	ra,44(sp)
60000c0c:	02812423          	sw	s0,40(sp)
60000c10:	03010413          	addi	s0,sp,48
60000c14:	fca42e23          	sw	a0,-36(s0)
60000c18:	fcb42c23          	sw	a1,-40(s0)
60000c1c:	fcc42a23          	sw	a2,-44(s0)
60000c20:	fdc42783          	lw	a5,-36(s0)
60000c24:	08078063          	beqz	a5,60000ca4 <UART_send+0xa0>
60000c28:	fd842783          	lw	a5,-40(s0)
60000c2c:	06078c63          	beqz	a5,60000ca4 <UART_send+0xa0>
60000c30:	fd442783          	lw	a5,-44(s0)
60000c34:	06078863          	beqz	a5,60000ca4 <UART_send+0xa0>
60000c38:	fe042623          	sw	zero,-20(s0)
60000c3c:	05c0006f          	j	60000c98 <UART_send+0x94>
60000c40:	fdc42783          	lw	a5,-36(s0)
60000c44:	0007a783          	lw	a5,0(a5)
60000c48:	01078793          	addi	a5,a5,16
60000c4c:	00078513          	mv	a0,a5
60000c50:	e5dff0ef          	jal	ra,60000aac <HW_get_8bit_reg>
60000c54:	00050793          	mv	a5,a0
60000c58:	0017f793          	andi	a5,a5,1
60000c5c:	fef405a3          	sb	a5,-21(s0)
60000c60:	feb44783          	lbu	a5,-21(s0)
60000c64:	fc078ee3          	beqz	a5,60000c40 <UART_send+0x3c>
60000c68:	fdc42783          	lw	a5,-36(s0)
60000c6c:	0007a683          	lw	a3,0(a5)
60000c70:	fd842703          	lw	a4,-40(s0)
60000c74:	fec42783          	lw	a5,-20(s0)
60000c78:	00f707b3          	add	a5,a4,a5
60000c7c:	0007c783          	lbu	a5,0(a5)
60000c80:	00078593          	mv	a1,a5
60000c84:	00068513          	mv	a0,a3
60000c88:	e1dff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000c8c:	fec42783          	lw	a5,-20(s0)
60000c90:	00178793          	addi	a5,a5,1
60000c94:	fef42623          	sw	a5,-20(s0)
60000c98:	fec42703          	lw	a4,-20(s0)
60000c9c:	fd442783          	lw	a5,-44(s0)
60000ca0:	faf760e3          	bltu	a4,a5,60000c40 <UART_send+0x3c>
60000ca4:	00000013          	nop
60000ca8:	02c12083          	lw	ra,44(sp)
60000cac:	02812403          	lw	s0,40(sp)
60000cb0:	03010113          	addi	sp,sp,48
60000cb4:	00008067          	ret

60000cb8 <UART_polled_tx_string>:
UART_polled_tx_string():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:238
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
60000cb8:	fd010113          	addi	sp,sp,-48
60000cbc:	02112623          	sw	ra,44(sp)
60000cc0:	02812423          	sw	s0,40(sp)
60000cc4:	03010413          	addi	s0,sp,48
60000cc8:	fca42e23          	sw	a0,-36(s0)
60000ccc:	fcb42c23          	sw	a1,-40(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
60000cd0:	fdc42783          	lw	a5,-36(s0)
60000cd4:	08078063          	beqz	a5,60000d54 <UART_polled_tx_string+0x9c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245 (discriminator 1)
60000cd8:	fd842783          	lw	a5,-40(s0)
60000cdc:	06078c63          	beqz	a5,60000d54 <UART_polled_tx_string+0x9c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:247
    {
        char_idx = 0U;
60000ce0:	fe042623          	sw	zero,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000ce4:	05c0006f          	j	60000d40 <UART_polled_tx_string+0x88>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:252 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000ce8:	fdc42783          	lw	a5,-36(s0)
60000cec:	0007a783          	lw	a5,0(a5)
60000cf0:	01078793          	addi	a5,a5,16
60000cf4:	00078513          	mv	a0,a5
60000cf8:	db5ff0ef          	jal	ra,60000aac <HW_get_8bit_reg>
60000cfc:	00050793          	mv	a5,a0
60000d00:	0017f793          	andi	a5,a5,1
60000d04:	fef405a3          	sb	a5,-21(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:254 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
60000d08:	feb44783          	lbu	a5,-21(s0)
60000d0c:	fc078ee3          	beqz	a5,60000ce8 <UART_polled_tx_string+0x30>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:256
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
60000d10:	fdc42783          	lw	a5,-36(s0)
60000d14:	0007a683          	lw	a3,0(a5)
60000d18:	fd842703          	lw	a4,-40(s0)
60000d1c:	fec42783          	lw	a5,-20(s0)
60000d20:	00f707b3          	add	a5,a4,a5
60000d24:	0007c783          	lbu	a5,0(a5)
60000d28:	00078593          	mv	a1,a5
60000d2c:	00068513          	mv	a0,a3
60000d30:	d75ff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:258
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
60000d34:	fec42783          	lw	a5,-20(s0)
60000d38:	00178793          	addi	a5,a5,1
60000d3c:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000d40:	fd842703          	lw	a4,-40(s0)
60000d44:	fec42783          	lw	a5,-20(s0)
60000d48:	00f707b3          	add	a5,a4,a5
60000d4c:	0007c783          	lbu	a5,0(a5)
60000d50:	f8079ce3          	bnez	a5,60000ce8 <UART_polled_tx_string+0x30>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:261
        }
    }
}
60000d54:	00000013          	nop
60000d58:	02c12083          	lw	ra,44(sp)
60000d5c:	02812403          	lw	s0,40(sp)
60000d60:	03010113          	addi	sp,sp,48
60000d64:	00008067          	ret

60000d68 <GPIO_init>:
GPIO_init():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:376
            
        default:
            HAL_ASSERT(0);
            break;
    }
}
60000d68:	fd010113          	addi	sp,sp,-48
60000d6c:	02112623          	sw	ra,44(sp)
60000d70:	02812423          	sw	s0,40(sp)
60000d74:	03010413          	addi	s0,sp,48
60000d78:	fca42e23          	sw	a0,-36(s0)
60000d7c:	fcb42c23          	sw	a1,-40(s0)
60000d80:	fcc42a23          	sw	a2,-44(s0)
60000d84:	fe0407a3          	sb	zero,-17(s0)
60000d88:	fd842783          	lw	a5,-40(s0)
60000d8c:	fef42423          	sw	a5,-24(s0)
60000d90:	fdc42783          	lw	a5,-36(s0)
60000d94:	fd842703          	lw	a4,-40(s0)
60000d98:	00e7a023          	sw	a4,0(a5)
60000d9c:	fdc42783          	lw	a5,-36(s0)
60000da0:	fd442703          	lw	a4,-44(s0)
60000da4:	00e7a223          	sw	a4,4(a5)
60000da8:	fe0407a3          	sb	zero,-17(s0)
60000dac:	fd842783          	lw	a5,-40(s0)
60000db0:	fef42423          	sw	a5,-24(s0)
60000db4:	0280006f          	j	60000ddc <GPIO_init+0x74>
60000db8:	00000593          	li	a1,0
60000dbc:	fe842503          	lw	a0,-24(s0)
60000dc0:	ce5ff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000dc4:	fe842783          	lw	a5,-24(s0)
60000dc8:	00478793          	addi	a5,a5,4
60000dcc:	fef42423          	sw	a5,-24(s0)
60000dd0:	fef44783          	lbu	a5,-17(s0)
60000dd4:	00178793          	addi	a5,a5,1
60000dd8:	fef407a3          	sb	a5,-17(s0)
60000ddc:	fef44703          	lbu	a4,-17(s0)
60000de0:	01f00793          	li	a5,31
60000de4:	fce7fae3          	bleu	a4,a5,60000db8 <GPIO_init+0x50>
60000de8:	fdc42783          	lw	a5,-36(s0)
60000dec:	0047a783          	lw	a5,4(a5)
60000df0:	00100713          	li	a4,1
60000df4:	02e78a63          	beq	a5,a4,60000e28 <GPIO_init+0xc0>
60000df8:	00100713          	li	a4,1
60000dfc:	06e7e463          	bltu	a5,a4,60000e64 <GPIO_init+0xfc>
60000e00:	00200713          	li	a4,2
60000e04:	00e78463          	beq	a5,a4,60000e0c <GPIO_init+0xa4>
60000e08:	0c00006f          	j	60000ec8 <GPIO_init+0x160>
60000e0c:	fdc42783          	lw	a5,-36(s0)
60000e10:	0007a783          	lw	a5,0(a5)
60000e14:	08078793          	addi	a5,a5,128
60000e18:	fff00593          	li	a1,-1
60000e1c:	00078513          	mv	a0,a5
60000e20:	bf5ff0ef          	jal	ra,60000a14 <HW_set_32bit_reg>
60000e24:	0a40006f          	j	60000ec8 <GPIO_init+0x160>
60000e28:	fdc42783          	lw	a5,-36(s0)
60000e2c:	0007a783          	lw	a5,0(a5)
60000e30:	08078713          	addi	a4,a5,128
60000e34:	000107b7          	lui	a5,0x10
60000e38:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60000e3c:	00070513          	mv	a0,a4
60000e40:	c1dff0ef          	jal	ra,60000a5c <HW_set_16bit_reg>
60000e44:	fdc42783          	lw	a5,-36(s0)
60000e48:	0007a783          	lw	a5,0(a5)
60000e4c:	08478713          	addi	a4,a5,132
60000e50:	000107b7          	lui	a5,0x10
60000e54:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60000e58:	00070513          	mv	a0,a4
60000e5c:	c01ff0ef          	jal	ra,60000a5c <HW_set_16bit_reg>
60000e60:	0680006f          	j	60000ec8 <GPIO_init+0x160>
60000e64:	fdc42783          	lw	a5,-36(s0)
60000e68:	0007a783          	lw	a5,0(a5)
60000e6c:	08078793          	addi	a5,a5,128
60000e70:	0ff00593          	li	a1,255
60000e74:	00078513          	mv	a0,a5
60000e78:	c2dff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000e7c:	fdc42783          	lw	a5,-36(s0)
60000e80:	0007a783          	lw	a5,0(a5)
60000e84:	08478793          	addi	a5,a5,132
60000e88:	0ff00593          	li	a1,255
60000e8c:	00078513          	mv	a0,a5
60000e90:	c15ff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000e94:	fdc42783          	lw	a5,-36(s0)
60000e98:	0007a783          	lw	a5,0(a5)
60000e9c:	08878793          	addi	a5,a5,136
60000ea0:	0ff00593          	li	a1,255
60000ea4:	00078513          	mv	a0,a5
60000ea8:	bfdff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000eac:	fdc42783          	lw	a5,-36(s0)
60000eb0:	0007a783          	lw	a5,0(a5)
60000eb4:	08c78793          	addi	a5,a5,140
60000eb8:	0ff00593          	li	a1,255
60000ebc:	00078513          	mv	a0,a5
60000ec0:	be5ff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60000ec4:	00000013          	nop
60000ec8:	00000013          	nop
60000ecc:	02c12083          	lw	ra,44(sp)
60000ed0:	02812403          	lw	s0,40(sp)
60000ed4:	03010113          	addi	sp,sp,48
60000ed8:	00008067          	ret

60000edc <GPIO_set_output>:
GPIO_set_output():
60000edc:	fd010113          	addi	sp,sp,-48
60000ee0:	02112623          	sw	ra,44(sp)
60000ee4:	02812423          	sw	s0,40(sp)
60000ee8:	03010413          	addi	s0,sp,48
60000eec:	fca42e23          	sw	a0,-36(s0)
60000ef0:	fcb42c23          	sw	a1,-40(s0)
60000ef4:	00060793          	mv	a5,a2
60000ef8:	fcf40ba3          	sb	a5,-41(s0)
60000efc:	fdc42783          	lw	a5,-36(s0)
60000f00:	0047a783          	lw	a5,4(a5)
60000f04:	00100713          	li	a4,1
60000f08:	08e78a63          	beq	a5,a4,60000f9c <GPIO_set_output+0xc0>
60000f0c:	00100713          	li	a4,1
60000f10:	14e7e063          	bltu	a5,a4,60001050 <GPIO_set_output+0x174>
60000f14:	00200713          	li	a4,2
60000f18:	00e78463          	beq	a5,a4,60000f20 <GPIO_set_output+0x44>
60000f1c:	1e80006f          	j	60001104 <GPIO_set_output+0x228>
60000f20:	fdc42783          	lw	a5,-36(s0)
60000f24:	0007a783          	lw	a5,0(a5)
60000f28:	0a078793          	addi	a5,a5,160
60000f2c:	00078513          	mv	a0,a5
60000f30:	aedff0ef          	jal	ra,60000a1c <HW_get_32bit_reg>
60000f34:	fea42623          	sw	a0,-20(s0)
60000f38:	fd744783          	lbu	a5,-41(s0)
60000f3c:	02079463          	bnez	a5,60000f64 <GPIO_set_output+0x88>
60000f40:	00100713          	li	a4,1
60000f44:	fd842783          	lw	a5,-40(s0)
60000f48:	00f717b3          	sll	a5,a4,a5
60000f4c:	fff7c793          	not	a5,a5
60000f50:	00078713          	mv	a4,a5
60000f54:	fec42783          	lw	a5,-20(s0)
60000f58:	00e7f7b3          	and	a5,a5,a4
60000f5c:	fef42623          	sw	a5,-20(s0)
60000f60:	0200006f          	j	60000f80 <GPIO_set_output+0xa4>
60000f64:	00100713          	li	a4,1
60000f68:	fd842783          	lw	a5,-40(s0)
60000f6c:	00f717b3          	sll	a5,a4,a5
60000f70:	00078713          	mv	a4,a5
60000f74:	fec42783          	lw	a5,-20(s0)
60000f78:	00e7e7b3          	or	a5,a5,a4
60000f7c:	fef42623          	sw	a5,-20(s0)
60000f80:	fdc42783          	lw	a5,-36(s0)
60000f84:	0007a783          	lw	a5,0(a5)
60000f88:	0a078793          	addi	a5,a5,160
60000f8c:	fec42583          	lw	a1,-20(s0)
60000f90:	00078513          	mv	a0,a5
60000f94:	a81ff0ef          	jal	ra,60000a14 <HW_set_32bit_reg>
60000f98:	16c0006f          	j	60001104 <GPIO_set_output+0x228>
60000f9c:	fdc42783          	lw	a5,-36(s0)
60000fa0:	0007a703          	lw	a4,0(a5)
60000fa4:	fd842783          	lw	a5,-40(s0)
60000fa8:	0047d793          	srli	a5,a5,0x4
60000fac:	00279793          	slli	a5,a5,0x2
60000fb0:	00f707b3          	add	a5,a4,a5
60000fb4:	0a078793          	addi	a5,a5,160
60000fb8:	fef42223          	sw	a5,-28(s0)
60000fbc:	fe442503          	lw	a0,-28(s0)
60000fc0:	aa5ff0ef          	jal	ra,60000a64 <HW_get_16bit_reg>
60000fc4:	00050793          	mv	a5,a0
60000fc8:	fef41523          	sh	a5,-22(s0)
60000fcc:	fd744783          	lbu	a5,-41(s0)
60000fd0:	04079063          	bnez	a5,60001010 <GPIO_set_output+0x134>
60000fd4:	fd842783          	lw	a5,-40(s0)
60000fd8:	00f7f793          	andi	a5,a5,15
60000fdc:	00100713          	li	a4,1
60000fe0:	00f717b3          	sll	a5,a4,a5
60000fe4:	01079793          	slli	a5,a5,0x10
60000fe8:	4107d793          	srai	a5,a5,0x10
60000fec:	fff7c793          	not	a5,a5
60000ff0:	01079713          	slli	a4,a5,0x10
60000ff4:	41075713          	srai	a4,a4,0x10
60000ff8:	fea41783          	lh	a5,-22(s0)
60000ffc:	00f777b3          	and	a5,a4,a5
60001000:	01079793          	slli	a5,a5,0x10
60001004:	4107d793          	srai	a5,a5,0x10
60001008:	fef41523          	sh	a5,-22(s0)
6000100c:	0300006f          	j	6000103c <GPIO_set_output+0x160>
60001010:	fd842783          	lw	a5,-40(s0)
60001014:	00f7f793          	andi	a5,a5,15
60001018:	00100713          	li	a4,1
6000101c:	00f717b3          	sll	a5,a4,a5
60001020:	01079713          	slli	a4,a5,0x10
60001024:	41075713          	srai	a4,a4,0x10
60001028:	fea41783          	lh	a5,-22(s0)
6000102c:	00f767b3          	or	a5,a4,a5
60001030:	01079793          	slli	a5,a5,0x10
60001034:	4107d793          	srai	a5,a5,0x10
60001038:	fef41523          	sh	a5,-22(s0)
6000103c:	fea45783          	lhu	a5,-22(s0)
60001040:	00078593          	mv	a1,a5
60001044:	fe442503          	lw	a0,-28(s0)
60001048:	a15ff0ef          	jal	ra,60000a5c <HW_set_16bit_reg>
6000104c:	0b80006f          	j	60001104 <GPIO_set_output+0x228>
60001050:	fdc42783          	lw	a5,-36(s0)
60001054:	0007a703          	lw	a4,0(a5)
60001058:	fd842783          	lw	a5,-40(s0)
6000105c:	0037d793          	srli	a5,a5,0x3
60001060:	00279793          	slli	a5,a5,0x2
60001064:	00f707b3          	add	a5,a4,a5
60001068:	0a078793          	addi	a5,a5,160
6000106c:	fef42023          	sw	a5,-32(s0)
60001070:	fe042503          	lw	a0,-32(s0)
60001074:	a39ff0ef          	jal	ra,60000aac <HW_get_8bit_reg>
60001078:	00050793          	mv	a5,a0
6000107c:	fef404a3          	sb	a5,-23(s0)
60001080:	fd744783          	lbu	a5,-41(s0)
60001084:	04079063          	bnez	a5,600010c4 <GPIO_set_output+0x1e8>
60001088:	fd842783          	lw	a5,-40(s0)
6000108c:	0077f793          	andi	a5,a5,7
60001090:	00100713          	li	a4,1
60001094:	00f717b3          	sll	a5,a4,a5
60001098:	01879793          	slli	a5,a5,0x18
6000109c:	4187d793          	srai	a5,a5,0x18
600010a0:	fff7c793          	not	a5,a5
600010a4:	01879713          	slli	a4,a5,0x18
600010a8:	41875713          	srai	a4,a4,0x18
600010ac:	fe940783          	lb	a5,-23(s0)
600010b0:	00f777b3          	and	a5,a4,a5
600010b4:	01879793          	slli	a5,a5,0x18
600010b8:	4187d793          	srai	a5,a5,0x18
600010bc:	fef404a3          	sb	a5,-23(s0)
600010c0:	0300006f          	j	600010f0 <GPIO_set_output+0x214>
600010c4:	fd842783          	lw	a5,-40(s0)
600010c8:	0077f793          	andi	a5,a5,7
600010cc:	00100713          	li	a4,1
600010d0:	00f717b3          	sll	a5,a4,a5
600010d4:	01879713          	slli	a4,a5,0x18
600010d8:	41875713          	srai	a4,a4,0x18
600010dc:	fe940783          	lb	a5,-23(s0)
600010e0:	00f767b3          	or	a5,a4,a5
600010e4:	01879793          	slli	a5,a5,0x18
600010e8:	4187d793          	srai	a5,a5,0x18
600010ec:	fef404a3          	sb	a5,-23(s0)
600010f0:	fe944783          	lbu	a5,-23(s0)
600010f4:	00078593          	mv	a1,a5
600010f8:	fe042503          	lw	a0,-32(s0)
600010fc:	9a9ff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
60001100:	00000013          	nop
60001104:	00000013          	nop
60001108:	02c12083          	lw	ra,44(sp)
6000110c:	02812403          	lw	s0,40(sp)
60001110:	03010113          	addi	sp,sp,48
60001114:	00008067          	ret

60001118 <GPIO_enable_irq>:
GPIO_enable_irq():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:387
void GPIO_enable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
60001118:	fd010113          	addi	sp,sp,-48
6000111c:	02112623          	sw	ra,44(sp)
60001120:	02812423          	sw	s0,40(sp)
60001124:	03010413          	addi	s0,sp,48
60001128:	fca42e23          	sw	a0,-36(s0)
6000112c:	fcb42c23          	sw	a1,-40(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:389
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
60001130:	fdc42783          	lw	a5,-36(s0)
60001134:	0007a783          	lw	a5,0(a5)
60001138:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:393
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
6000113c:	fd842703          	lw	a4,-40(s0)
60001140:	01f00793          	li	a5,31
60001144:	04e7e063          	bltu	a5,a4,60001184 <GPIO_enable_irq+0x6c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:395
    {
        cfg_reg_addr += (port_id * 4);
60001148:	fd842783          	lw	a5,-40(s0)
6000114c:	00279793          	slli	a5,a5,0x2
60001150:	fec42703          	lw	a4,-20(s0)
60001154:	00f707b3          	add	a5,a4,a5
60001158:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:396
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
6000115c:	fec42503          	lw	a0,-20(s0)
60001160:	94dff0ef          	jal	ra,60000aac <HW_get_8bit_reg>
60001164:	00050793          	mv	a5,a0
60001168:	fef42423          	sw	a5,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:397
        cfg_value |= GPIO_INT_ENABLE_MASK;
6000116c:	fe842783          	lw	a5,-24(s0)
60001170:	0087e793          	ori	a5,a5,8
60001174:	fef42423          	sw	a5,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:398
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
60001178:	fe842583          	lw	a1,-24(s0)
6000117c:	fec42503          	lw	a0,-20(s0)
60001180:	925ff0ef          	jal	ra,60000aa4 <HW_set_8bit_reg>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:400
    }
}
60001184:	00000013          	nop
60001188:	02c12083          	lw	ra,44(sp)
6000118c:	02812403          	lw	s0,40(sp)
60001190:	03010113          	addi	sp,sp,48
60001194:	00008067          	ret

60001198 <pvPortMalloc>:
pvPortMalloc():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:278
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
60001198:	fc010113          	addi	sp,sp,-64
6000119c:	02112e23          	sw	ra,60(sp)
600011a0:	02812c23          	sw	s0,56(sp)
600011a4:	04010413          	addi	s0,sp,64
600011a8:	fca42623          	sw	a0,-52(s0)
600011ac:	fe042223          	sw	zero,-28(s0)
600011b0:	6d9000ef          	jal	ra,60002088 <vTaskSuspendAll>
600011b4:	8b81a783          	lw	a5,-1864(gp) # 800000b8 <xHeapHasBeenInitialised.2592>
600011b8:	00079863          	bnez	a5,600011c8 <pvPortMalloc+0x30>
600011bc:	284000ef          	jal	ra,60001440 <prvHeapInit>
600011c0:	00100713          	li	a4,1
600011c4:	8ae1ac23          	sw	a4,-1864(gp) # 800000b8 <xHeapHasBeenInitialised.2592>
600011c8:	fcc42783          	lw	a5,-52(s0)
600011cc:	02078a63          	beqz	a5,60001200 <pvPortMalloc+0x68>
600011d0:	00800793          	li	a5,8
600011d4:	00078713          	mv	a4,a5
600011d8:	fcc42783          	lw	a5,-52(s0)
600011dc:	00e787b3          	add	a5,a5,a4
600011e0:	fcf42623          	sw	a5,-52(s0)
600011e4:	fcc42783          	lw	a5,-52(s0)
600011e8:	0037f793          	andi	a5,a5,3
600011ec:	00078a63          	beqz	a5,60001200 <pvPortMalloc+0x68>
600011f0:	fcc42783          	lw	a5,-52(s0)
600011f4:	ffc7f793          	andi	a5,a5,-4
600011f8:	00478793          	addi	a5,a5,4
600011fc:	fcf42623          	sw	a5,-52(s0)
60001200:	fcc42783          	lw	a5,-52(s0)
60001204:	14078463          	beqz	a5,6000134c <pvPortMalloc+0x1b4>
60001208:	fcc42703          	lw	a4,-52(s0)
6000120c:	000197b7          	lui	a5,0x19
60001210:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x17ffb>
60001214:	12e7ec63          	bltu	a5,a4,6000134c <pvPortMalloc+0x1b4>
60001218:	8a818793          	addi	a5,gp,-1880 # 800000a8 <xStart>
6000121c:	fef42423          	sw	a5,-24(s0)
60001220:	8a81a783          	lw	a5,-1880(gp) # 800000a8 <xStart>
60001224:	fef42623          	sw	a5,-20(s0)
60001228:	0180006f          	j	60001240 <pvPortMalloc+0xa8>
6000122c:	fec42783          	lw	a5,-20(s0)
60001230:	fef42423          	sw	a5,-24(s0)
60001234:	fec42783          	lw	a5,-20(s0)
60001238:	0007a783          	lw	a5,0(a5)
6000123c:	fef42623          	sw	a5,-20(s0)
60001240:	fec42783          	lw	a5,-20(s0)
60001244:	0047a783          	lw	a5,4(a5)
60001248:	fcc42703          	lw	a4,-52(s0)
6000124c:	00e7f863          	bleu	a4,a5,6000125c <pvPortMalloc+0xc4>
60001250:	fec42783          	lw	a5,-20(s0)
60001254:	0007a783          	lw	a5,0(a5)
60001258:	fc079ae3          	bnez	a5,6000122c <pvPortMalloc+0x94>
6000125c:	fec42703          	lw	a4,-20(s0)
60001260:	8b018793          	addi	a5,gp,-1872 # 800000b0 <xEnd>
60001264:	0ef70463          	beq	a4,a5,6000134c <pvPortMalloc+0x1b4>
60001268:	fe842783          	lw	a5,-24(s0)
6000126c:	0007a783          	lw	a5,0(a5)
60001270:	00800713          	li	a4,8
60001274:	00e787b3          	add	a5,a5,a4
60001278:	fef42223          	sw	a5,-28(s0)
6000127c:	fec42783          	lw	a5,-20(s0)
60001280:	0007a703          	lw	a4,0(a5)
60001284:	fe842783          	lw	a5,-24(s0)
60001288:	00e7a023          	sw	a4,0(a5)
6000128c:	fec42783          	lw	a5,-20(s0)
60001290:	0047a703          	lw	a4,4(a5)
60001294:	fcc42783          	lw	a5,-52(s0)
60001298:	40f707b3          	sub	a5,a4,a5
6000129c:	00800713          	li	a4,8
600012a0:	00171713          	slli	a4,a4,0x1
600012a4:	08f77663          	bleu	a5,a4,60001330 <pvPortMalloc+0x198>
600012a8:	fec42703          	lw	a4,-20(s0)
600012ac:	fcc42783          	lw	a5,-52(s0)
600012b0:	00f707b3          	add	a5,a4,a5
600012b4:	fcf42e23          	sw	a5,-36(s0)
600012b8:	fec42783          	lw	a5,-20(s0)
600012bc:	0047a703          	lw	a4,4(a5)
600012c0:	fcc42783          	lw	a5,-52(s0)
600012c4:	40f70733          	sub	a4,a4,a5
600012c8:	fdc42783          	lw	a5,-36(s0)
600012cc:	00e7a223          	sw	a4,4(a5)
600012d0:	fec42783          	lw	a5,-20(s0)
600012d4:	fcc42703          	lw	a4,-52(s0)
600012d8:	00e7a223          	sw	a4,4(a5)
600012dc:	fdc42783          	lw	a5,-36(s0)
600012e0:	0047a783          	lw	a5,4(a5)
600012e4:	fcf42c23          	sw	a5,-40(s0)
600012e8:	8a818793          	addi	a5,gp,-1880 # 800000a8 <xStart>
600012ec:	fef42023          	sw	a5,-32(s0)
600012f0:	0100006f          	j	60001300 <pvPortMalloc+0x168>
600012f4:	fe042783          	lw	a5,-32(s0)
600012f8:	0007a783          	lw	a5,0(a5)
600012fc:	fef42023          	sw	a5,-32(s0)
60001300:	fe042783          	lw	a5,-32(s0)
60001304:	0007a783          	lw	a5,0(a5)
60001308:	0047a783          	lw	a5,4(a5)
6000130c:	fd842703          	lw	a4,-40(s0)
60001310:	fee7e2e3          	bltu	a5,a4,600012f4 <pvPortMalloc+0x15c>
60001314:	fe042783          	lw	a5,-32(s0)
60001318:	0007a703          	lw	a4,0(a5)
6000131c:	fdc42783          	lw	a5,-36(s0)
60001320:	00e7a023          	sw	a4,0(a5)
60001324:	fe042783          	lw	a5,-32(s0)
60001328:	fdc42703          	lw	a4,-36(s0)
6000132c:	00e7a023          	sw	a4,0(a5)
60001330:	800007b7          	lui	a5,0x80000
60001334:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4e20>
60001338:	fec42783          	lw	a5,-20(s0)
6000133c:	0047a783          	lw	a5,4(a5)
60001340:	40f70733          	sub	a4,a4,a5
60001344:	800007b7          	lui	a5,0x80000
60001348:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack_top+0xfffe4e20>
6000134c:	565000ef          	jal	ra,600020b0 <xTaskResumeAll>
60001350:	fe442783          	lw	a5,-28(s0)
60001354:	00079463          	bnez	a5,6000135c <pvPortMalloc+0x1c4>
60001358:	2a1010ef          	jal	ra,60002df8 <vApplicationMallocFailedHook>
6000135c:	fe442783          	lw	a5,-28(s0)
60001360:	00078513          	mv	a0,a5
60001364:	03c12083          	lw	ra,60(sp)
60001368:	03812403          	lw	s0,56(sp)
6000136c:	04010113          	addi	sp,sp,64
60001370:	00008067          	ret

60001374 <vPortFree>:
vPortFree():
60001374:	fd010113          	addi	sp,sp,-48
60001378:	02112623          	sw	ra,44(sp)
6000137c:	02812423          	sw	s0,40(sp)
60001380:	03010413          	addi	s0,sp,48
60001384:	fca42e23          	sw	a0,-36(s0)
60001388:	fdc42783          	lw	a5,-36(s0)
6000138c:	fef42423          	sw	a5,-24(s0)
60001390:	fdc42783          	lw	a5,-36(s0)
60001394:	08078c63          	beqz	a5,6000142c <vPortFree+0xb8>
60001398:	00800793          	li	a5,8
6000139c:	40f007b3          	neg	a5,a5
600013a0:	fe842703          	lw	a4,-24(s0)
600013a4:	00f707b3          	add	a5,a4,a5
600013a8:	fef42423          	sw	a5,-24(s0)
600013ac:	fe842783          	lw	a5,-24(s0)
600013b0:	fef42223          	sw	a5,-28(s0)
600013b4:	4d5000ef          	jal	ra,60002088 <vTaskSuspendAll>
600013b8:	fe442783          	lw	a5,-28(s0)
600013bc:	0047a783          	lw	a5,4(a5)
600013c0:	fef42023          	sw	a5,-32(s0)
600013c4:	8a818793          	addi	a5,gp,-1880 # 800000a8 <xStart>
600013c8:	fef42623          	sw	a5,-20(s0)
600013cc:	0100006f          	j	600013dc <vPortFree+0x68>
600013d0:	fec42783          	lw	a5,-20(s0)
600013d4:	0007a783          	lw	a5,0(a5)
600013d8:	fef42623          	sw	a5,-20(s0)
600013dc:	fec42783          	lw	a5,-20(s0)
600013e0:	0007a783          	lw	a5,0(a5)
600013e4:	0047a783          	lw	a5,4(a5)
600013e8:	fe042703          	lw	a4,-32(s0)
600013ec:	fee7e2e3          	bltu	a5,a4,600013d0 <vPortFree+0x5c>
600013f0:	fec42783          	lw	a5,-20(s0)
600013f4:	0007a703          	lw	a4,0(a5)
600013f8:	fe442783          	lw	a5,-28(s0)
600013fc:	00e7a023          	sw	a4,0(a5)
60001400:	fec42783          	lw	a5,-20(s0)
60001404:	fe442703          	lw	a4,-28(s0)
60001408:	00e7a023          	sw	a4,0(a5)
6000140c:	fe442783          	lw	a5,-28(s0)
60001410:	0047a703          	lw	a4,4(a5)
60001414:	800007b7          	lui	a5,0x80000
60001418:	0007a783          	lw	a5,0(a5) # 80000000 <__stack_top+0xfffe4e20>
6000141c:	00f70733          	add	a4,a4,a5
60001420:	800007b7          	lui	a5,0x80000
60001424:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack_top+0xfffe4e20>
60001428:	489000ef          	jal	ra,600020b0 <xTaskResumeAll>
6000142c:	00000013          	nop
60001430:	02c12083          	lw	ra,44(sp)
60001434:	02812403          	lw	s0,40(sp)
60001438:	03010113          	addi	sp,sp,48
6000143c:	00008067          	ret

60001440 <prvHeapInit>:
prvHeapInit():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
60001440:	fe010113          	addi	sp,sp,-32
60001444:	00812e23          	sw	s0,28(sp)
60001448:	02010413          	addi	s0,sp,32
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
6000144c:	800007b7          	lui	a5,0x80000
60001450:	11478793          	addi	a5,a5,276 # 80000114 <__stack_top+0xfffe4f34>
60001454:	ffc7f793          	andi	a5,a5,-4
60001458:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
6000145c:	fec42703          	lw	a4,-20(s0)
60001460:	8ae1a423          	sw	a4,-1880(gp) # 800000a8 <xStart>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
60001464:	8a818793          	addi	a5,gp,-1880 # 800000a8 <xStart>
60001468:	0007a223          	sw	zero,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
6000146c:	8b018793          	addi	a5,gp,-1872 # 800000b0 <xEnd>
60001470:	00019737          	lui	a4,0x19
60001474:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
60001478:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
6000147c:	8a01a823          	sw	zero,-1872(gp) # 800000b0 <xEnd>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
60001480:	fec42783          	lw	a5,-20(s0)
60001484:	fef42423          	sw	a5,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
60001488:	fe842783          	lw	a5,-24(s0)
6000148c:	00019737          	lui	a4,0x19
60001490:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
60001494:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
60001498:	fe842783          	lw	a5,-24(s0)
6000149c:	8b018713          	addi	a4,gp,-1872 # 800000b0 <xEnd>
600014a0:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
600014a4:	00000013          	nop
600014a8:	01c12403          	lw	s0,28(sp)
600014ac:	02010113          	addi	sp,sp,32
600014b0:	00008067          	ret

600014b4 <raise_soft_interrupt>:
raise_soft_interrupt():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:214
{
	int ret;
	__asm volatile("csrr %0,mie":"=r"(ret));
	__asm volatile("csrc mie,%0"::"i"(7));
	return ret;
}
600014b4:	fe010113          	addi	sp,sp,-32
600014b8:	00812e23          	sw	s0,28(sp)
600014bc:	02010413          	addi	s0,sp,32
600014c0:	f14027f3          	csrr	a5,mhartid
600014c4:	fef42623          	sw	a5,-20(s0)
600014c8:	fec42783          	lw	a5,-20(s0)
600014cc:	fef42423          	sw	a5,-24(s0)
600014d0:	304467f3          	csrrsi	a5,mie,8
600014d4:	fef42223          	sw	a5,-28(s0)
600014d8:	44000737          	lui	a4,0x44000
600014dc:	fe842783          	lw	a5,-24(s0)
600014e0:	00279793          	slli	a5,a5,0x2
600014e4:	00f707b3          	add	a5,a4,a5
600014e8:	00100713          	li	a4,1
600014ec:	00e7a023          	sw	a4,0(a5)
600014f0:	00000013          	nop
600014f4:	01c12403          	lw	s0,28(sp)
600014f8:	02010113          	addi	sp,sp,32
600014fc:	00008067          	ret

60001500 <vPortEnterCritical>:
vPortEnterCritical():
60001500:	ff010113          	addi	sp,sp,-16
60001504:	00812623          	sw	s0,12(sp)
60001508:	01010413          	addi	s0,sp,16
6000150c:	30047073          	csrci	mstatus,8
60001510:	800007b7          	lui	a5,0x80000
60001514:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4e24>
60001518:	00178713          	addi	a4,a5,1
6000151c:	800007b7          	lui	a5,0x80000
60001520:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4e24>
60001524:	00000013          	nop
60001528:	00c12403          	lw	s0,12(sp)
6000152c:	01010113          	addi	sp,sp,16
60001530:	00008067          	ret

60001534 <vPortExitCritical>:
vPortExitCritical():
60001534:	ff010113          	addi	sp,sp,-16
60001538:	00812623          	sw	s0,12(sp)
6000153c:	01010413          	addi	s0,sp,16
60001540:	800007b7          	lui	a5,0x80000
60001544:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4e24>
60001548:	fff78713          	addi	a4,a5,-1
6000154c:	800007b7          	lui	a5,0x80000
60001550:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4e24>
60001554:	800007b7          	lui	a5,0x80000
60001558:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4e24>
6000155c:	00079463          	bnez	a5,60001564 <vPortExitCritical+0x30>
60001560:	30046073          	csrsi	mstatus,8
60001564:	00000013          	nop
60001568:	00c12403          	lw	s0,12(sp)
6000156c:	01010113          	addi	sp,sp,16
60001570:	00008067          	ret

60001574 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
60001574:	fe010113          	addi	sp,sp,-32
60001578:	00812e23          	sw	s0,28(sp)
6000157c:	02010413          	addi	s0,sp,32
60001580:	80000637          	lui	a2,0x80000
60001584:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4e28>
60001588:	00062603          	lw	a2,0(a2)
6000158c:	fec42423          	sw	a2,-24(s0)
60001590:	fe042623          	sw	zero,-20(s0)
60001594:	80000637          	lui	a2,0x80000
60001598:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4e28>
6000159c:	00462603          	lw	a2,4(a2)
600015a0:	00060693          	mv	a3,a2
600015a4:	00000713          	li	a4,0
600015a8:	00069813          	slli	a6,a3,0x0
600015ac:	00000793          	li	a5,0
600015b0:	fe842703          	lw	a4,-24(s0)
600015b4:	00f76733          	or	a4,a4,a5
600015b8:	fee42423          	sw	a4,-24(s0)
600015bc:	fec42703          	lw	a4,-20(s0)
600015c0:	010767b3          	or	a5,a4,a6
600015c4:	fef42623          	sw	a5,-20(s0)
600015c8:	fe842683          	lw	a3,-24(s0)
600015cc:	fec42703          	lw	a4,-20(s0)
600015d0:	0000c5b7          	lui	a1,0xc
600015d4:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
600015d8:	00000613          	li	a2,0
600015dc:	00b687b3          	add	a5,a3,a1
600015e0:	00078513          	mv	a0,a5
600015e4:	00d53533          	sltu	a0,a0,a3
600015e8:	00c70833          	add	a6,a4,a2
600015ec:	01050733          	add	a4,a0,a6
600015f0:	00070813          	mv	a6,a4
600015f4:	fef42423          	sw	a5,-24(s0)
600015f8:	ff042623          	sw	a6,-20(s0)
600015fc:	800007b7          	lui	a5,0x80000
60001600:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4e2c>
60001604:	fe842703          	lw	a4,-24(s0)
60001608:	00e7a023          	sw	a4,0(a5)
6000160c:	fec42783          	lw	a5,-20(s0)
60001610:	0007d313          	srli	t1,a5,0x0
60001614:	00000393          	li	t2,0
60001618:	800007b7          	lui	a5,0x80000
6000161c:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4e2c>
60001620:	00030713          	mv	a4,t1
60001624:	00e7a223          	sw	a4,4(a5)
60001628:	08000793          	li	a5,128
6000162c:	3047a073          	csrs	mie,a5
60001630:	00000013          	nop
60001634:	01c12403          	lw	s0,28(sp)
60001638:	02010113          	addi	sp,sp,32
6000163c:	00008067          	ret

60001640 <vPortSetupTimer>:
vPortSetupTimer():
60001640:	fe010113          	addi	sp,sp,-32
60001644:	00812e23          	sw	s0,28(sp)
60001648:	02010413          	addi	s0,sp,32
6000164c:	80000637          	lui	a2,0x80000
60001650:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4e28>
60001654:	00062603          	lw	a2,0(a2)
60001658:	fec42423          	sw	a2,-24(s0)
6000165c:	fe042623          	sw	zero,-20(s0)
60001660:	80000637          	lui	a2,0x80000
60001664:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4e28>
60001668:	00462603          	lw	a2,4(a2)
6000166c:	00060693          	mv	a3,a2
60001670:	00000713          	li	a4,0
60001674:	00069813          	slli	a6,a3,0x0
60001678:	00000793          	li	a5,0
6000167c:	fe842703          	lw	a4,-24(s0)
60001680:	00f76733          	or	a4,a4,a5
60001684:	fee42423          	sw	a4,-24(s0)
60001688:	fec42703          	lw	a4,-20(s0)
6000168c:	010767b3          	or	a5,a4,a6
60001690:	fef42623          	sw	a5,-20(s0)
60001694:	fe842683          	lw	a3,-24(s0)
60001698:	fec42703          	lw	a4,-20(s0)
6000169c:	0000c5b7          	lui	a1,0xc
600016a0:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
600016a4:	00000613          	li	a2,0
600016a8:	00b687b3          	add	a5,a3,a1
600016ac:	00078513          	mv	a0,a5
600016b0:	00d53533          	sltu	a0,a0,a3
600016b4:	00c70833          	add	a6,a4,a2
600016b8:	01050733          	add	a4,a0,a6
600016bc:	00070813          	mv	a6,a4
600016c0:	fef42423          	sw	a5,-24(s0)
600016c4:	ff042623          	sw	a6,-20(s0)
600016c8:	800007b7          	lui	a5,0x80000
600016cc:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4e2c>
600016d0:	fe842703          	lw	a4,-24(s0)
600016d4:	00e7a023          	sw	a4,0(a5)
600016d8:	fec42783          	lw	a5,-20(s0)
600016dc:	0007d313          	srli	t1,a5,0x0
600016e0:	00000393          	li	t2,0
600016e4:	800007b7          	lui	a5,0x80000
600016e8:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4e2c>
600016ec:	00030713          	mv	a4,t1
600016f0:	00e7a223          	sw	a4,4(a5)
600016f4:	08000793          	li	a5,128
600016f8:	3047a073          	csrs	mie,a5
600016fc:	00000013          	nop
60001700:	01c12403          	lw	s0,28(sp)
60001704:	02010113          	addi	sp,sp,32
60001708:	00008067          	ret

6000170c <prvTaskExitError>:
prvTaskExitError():
6000170c:	ff010113          	addi	sp,sp,-16
60001710:	00812623          	sw	s0,12(sp)
60001714:	01010413          	addi	s0,sp,16
60001718:	800007b7          	lui	a5,0x80000
6000171c:	0047a703          	lw	a4,4(a5) # 80000004 <__stack_top+0xfffe4e24>
60001720:	fff00793          	li	a5,-1
60001724:	00f70663          	beq	a4,a5,60001730 <prvTaskExitError+0x24>
60001728:	30047073          	csrci	mstatus,8
6000172c:	0000006f          	j	6000172c <prvTaskExitError+0x20>
60001730:	30047073          	csrci	mstatus,8
60001734:	0000006f          	j	60001734 <prvTaskExitError+0x28>

60001738 <pxPortInitialiseStack>:
pxPortInitialiseStack():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
60001738:	fe010113          	addi	sp,sp,-32
6000173c:	00812e23          	sw	s0,28(sp)
60001740:	02010413          	addi	s0,sp,32
60001744:	fea42623          	sw	a0,-20(s0)
60001748:	feb42423          	sw	a1,-24(s0)
6000174c:	fec42223          	sw	a2,-28(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
60001750:	fec42783          	lw	a5,-20(s0)
60001754:	ffc78793          	addi	a5,a5,-4
60001758:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
6000175c:	fe842703          	lw	a4,-24(s0)
60001760:	fec42783          	lw	a5,-20(s0)
60001764:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
60001768:	fec42783          	lw	a5,-20(s0)
6000176c:	fa878793          	addi	a5,a5,-88
60001770:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
60001774:	fe442703          	lw	a4,-28(s0)
60001778:	fec42783          	lw	a5,-20(s0)
6000177c:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
60001780:	fec42783          	lw	a5,-20(s0)
60001784:	fe878793          	addi	a5,a5,-24
60001788:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
6000178c:	00018793          	mv	a5,gp
60001790:	00078713          	mv	a4,a5
60001794:	fec42783          	lw	a5,-20(s0)
60001798:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
6000179c:	fec42783          	lw	a5,-20(s0)
600017a0:	ff478793          	addi	a5,a5,-12
600017a4:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
600017a8:	600017b7          	lui	a5,0x60001
600017ac:	70c78713          	addi	a4,a5,1804 # 6000170c <prvTaskExitError>
600017b0:	fec42783          	lw	a5,-20(s0)
600017b4:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233
	
	return pxTopOfStack;
600017b8:	fec42783          	lw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
600017bc:	00078513          	mv	a0,a5
600017c0:	01c12403          	lw	s0,28(sp)
600017c4:	02010113          	addi	sp,sp,32
600017c8:	00008067          	ret

600017cc <SysTick_Handler>:
SysTick_Handler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
600017cc:	ff010113          	addi	sp,sp,-16
600017d0:	00112623          	sw	ra,12(sp)
600017d4:	00812423          	sw	s0,8(sp)
600017d8:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
600017dc:	8c01a283          	lw	t0,-1856(gp) # 800000c0 <pxCurrentTCB>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
600017e0:	00c2a023          	sw	a2,0(t0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
600017e4:	d91ff0ef          	jal	ra,60001574 <prvSetNextTimerInterrupt>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
600017e8:	229000ef          	jal	ra,60002210 <xTaskIncrementTick>
600017ec:	00050793          	mv	a5,a0
600017f0:	00078463          	beqz	a5,600017f8 <SysTick_Handler+0x2c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
600017f4:	409000ef          	jal	ra,600023fc <vTaskSwitchContext>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
600017f8:	8c01a103          	lw	sp,-1856(gp) # 800000c0 <pxCurrentTCB>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
600017fc:	00012103          	lw	sp,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
60001800:	07c12283          	lw	t0,124(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
60001804:	34129073          	csrw	mepc,t0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
60001808:	00012083          	lw	ra,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
6000180c:	00c12203          	lw	tp,12(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
60001810:	01012283          	lw	t0,16(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
60001814:	01412303          	lw	t1,20(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
60001818:	01812383          	lw	t2,24(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
6000181c:	01c12403          	lw	s0,28(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
60001820:	02012483          	lw	s1,32(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
60001824:	02412503          	lw	a0,36(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
60001828:	02812583          	lw	a1,40(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
6000182c:	02c12603          	lw	a2,44(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
60001830:	03012683          	lw	a3,48(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
60001834:	03412703          	lw	a4,52(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
60001838:	03812783          	lw	a5,56(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
6000183c:	03c12803          	lw	a6,60(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
60001840:	04012883          	lw	a7,64(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
60001844:	04412903          	lw	s2,68(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
60001848:	04812983          	lw	s3,72(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
6000184c:	04c12a03          	lw	s4,76(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
60001850:	05012a83          	lw	s5,80(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
60001854:	05412b03          	lw	s6,84(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
60001858:	05812b83          	lw	s7,88(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
6000185c:	05c12c03          	lw	s8,92(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
60001860:	06012c83          	lw	s9,96(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
60001864:	06412d03          	lw	s10,100(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
60001868:	06812d83          	lw	s11,104(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
6000186c:	06c12e03          	lw	t3,108(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
60001870:	07012e83          	lw	t4,112(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
60001874:	07412f03          	lw	t5,116(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
60001878:	07812f83          	lw	t6,120(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
6000187c:	08010113          	addi	sp,sp,128
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
60001880:	30200073          	mret
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
60001884:	00000013          	nop
60001888:	00c12083          	lw	ra,12(sp)
6000188c:	00812403          	lw	s0,8(sp)
60001890:	01010113          	addi	sp,sp,16
60001894:	00008067          	ret

60001898 <xPortStartScheduler>:
xPortStartScheduler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
60001898:	ff010113          	addi	sp,sp,-16
6000189c:	00112623          	sw	ra,12(sp)
600018a0:	00812423          	sw	s0,8(sp)
600018a4:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
600018a8:	d99ff0ef          	jal	ra,60001640 <vPortSetupTimer>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
600018ac:	800007b7          	lui	a5,0x80000
600018b0:	0007a223          	sw	zero,4(a5) # 80000004 <__stack_top+0xfffe4e24>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
600018b4:	00100713          	li	a4,1
600018b8:	8ae1ae23          	sw	a4,-1860(gp) # 800000bc <g_startscheduler>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
600018bc:	b51fe0ef          	jal	ra,6000040c <__enable_irq>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
600018c0:	bf5ff0ef          	jal	ra,600014b4 <raise_soft_interrupt>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
600018c4:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
600018c8:	00078513          	mv	a0,a5
600018cc:	00c12083          	lw	ra,12(sp)
600018d0:	00812403          	lw	s0,8(sp)
600018d4:	01010113          	addi	sp,sp,16
600018d8:	00008067          	ret

600018dc <Software_IRQHandler>:
Software_IRQHandler():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
600018dc:	ff010113          	addi	sp,sp,-16
600018e0:	00112623          	sw	ra,12(sp)
600018e4:	00812423          	sw	s0,8(sp)
600018e8:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
600018ec:	8bc1a703          	lw	a4,-1860(gp) # 800000bc <g_startscheduler>
600018f0:	00100793          	li	a5,1
600018f4:	00f71863          	bne	a4,a5,60001904 <Software_IRQHandler+0x28>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
600018f8:	00200713          	li	a4,2
600018fc:	8ae1ae23          	sw	a4,-1860(gp) # 800000bc <g_startscheduler>
60001900:	0100006f          	j	60001910 <Software_IRQHandler+0x34>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
60001904:	8c01a283          	lw	t0,-1856(gp) # 800000c0 <pxCurrentTCB>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
60001908:	00c2a023          	sw	a2,0(t0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
6000190c:	2f1000ef          	jal	ra,600023fc <vTaskSwitchContext>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
60001910:	8c01a103          	lw	sp,-1856(gp) # 800000c0 <pxCurrentTCB>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
		__asm volatile("lw	sp, 0x0(sp)");
60001914:	00012103          	lw	sp,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

		__asm volatile("lw	t0, 31 * 4(sp)");
60001918:	07c12283          	lw	t0,124(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("csrw	mepc, t0");
6000191c:	34129073          	csrw	mepc,t0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	x1, 0x0(sp)");
60001920:	00012083          	lw	ra,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("lw   x4, 3 * 4(sp)");
60001924:	00c12203          	lw	tp,12(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
		__asm volatile("lw   x5, 4 * 4(sp)");
60001928:	01012283          	lw	t0,16(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339
		__asm volatile("lw   x6, 5 * 4(sp)");
6000192c:	01412303          	lw	t1,20(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x7, 6 * 4(sp)");
60001930:	01812383          	lw	t2,24(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x8, 7 * 4(sp)");
60001934:	01c12403          	lw	s0,28(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x9, 8 * 4(sp)");
60001938:	02012483          	lw	s1,32(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x10, 9 * 4(sp)");
6000193c:	02412503          	lw	a0,36(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x11, 10 * 4(sp)");
60001940:	02812583          	lw	a1,40(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x12, 11 * 4(sp)");
60001944:	02c12603          	lw	a2,44(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x13, 12 * 4(sp)");
60001948:	03012683          	lw	a3,48(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x14, 13 * 4(sp)");
6000194c:	03412703          	lw	a4,52(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x15, 14 * 4(sp)");
60001950:	03812783          	lw	a5,56(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x16, 15 * 4(sp)");
60001954:	03c12803          	lw	a6,60(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x17, 16 * 4(sp)");
60001958:	04012883          	lw	a7,64(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x18, 17 * 4(sp)");
6000195c:	04412903          	lw	s2,68(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x19, 18 * 4(sp)");
60001960:	04812983          	lw	s3,72(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x20, 19 * 4(sp)");
60001964:	04c12a03          	lw	s4,76(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x21, 20 * 4(sp)");
60001968:	05012a83          	lw	s5,80(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x22, 21 * 4(sp)");
6000196c:	05412b03          	lw	s6,84(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x23, 22 * 4(sp)");
60001970:	05812b83          	lw	s7,88(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x24, 23 * 4(sp)");
60001974:	05c12c03          	lw	s8,92(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x25, 24 * 4(sp)");
60001978:	06012c83          	lw	s9,96(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x26, 25 * 4(sp)");
6000197c:	06412d03          	lw	s10,100(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x27, 26 * 4(sp)");
60001980:	06812d83          	lw	s11,104(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x28, 27 * 4(sp)");
60001984:	06c12e03          	lw	t3,108(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x29, 28 * 4(sp)");
60001988:	07012e83          	lw	t4,112(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x30, 29 * 4(sp)");
6000198c:	07412f03          	lw	t5,116(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x31, 30 * 4(sp)");
60001990:	07812f83          	lw	t6,120(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366

		__asm volatile("addi	sp, sp, 4 * 32");
60001994:	08010113          	addi	sp,sp,128
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370

		//PRCI->MSIP[0] = 0x00;

		__asm volatile("addi sp, sp, -1*4");
60001998:	ffc10113          	addi	sp,sp,-4
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("sw t0, 0(sp)");
6000199c:	00512023          	sw	t0,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("li t0, 0x44000000");	// address of PRCI->MSIP[0]
600019a0:	440002b7          	lui	t0,0x44000
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("sw zero,0(t0)");
600019a4:	0002a023          	sw	zero,0(t0) # 44000000 <RAM_SIZE+0x43f00000>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw t0, 0(sp)");
600019a8:	00012283          	lw	t0,0(sp)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("addi sp, sp, 1*4");
600019ac:	00410113          	addi	sp,sp,4
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377

		__asm volatile("mret");
600019b0:	30200073          	mret
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
	}
}
600019b4:	00000013          	nop
600019b8:	00c12083          	lw	ra,12(sp)
600019bc:	00812403          	lw	s0,8(sp)
600019c0:	01010113          	addi	sp,sp,16
600019c4:	00008067          	ret

600019c8 <vPortYield>:
vPortYield():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382

void vPortYield( void )
{
600019c8:	ff010113          	addi	sp,sp,-16
600019cc:	00112623          	sw	ra,12(sp)
600019d0:	00812423          	sw	s0,8(sp)
600019d4:	01010413          	addi	s0,sp,16
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
	raise_soft_interrupt();
600019d8:	addff0ef          	jal	ra,600014b4 <raise_soft_interrupt>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
}
600019dc:	00000013          	nop
600019e0:	00c12083          	lw	ra,12(sp)
600019e4:	00812403          	lw	s0,8(sp)
600019e8:	01010113          	addi	sp,sp,16
600019ec:	00008067          	ret

600019f0 <vListInitialise>:
vListInitialise():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
600019f0:	fe010113          	addi	sp,sp,-32
600019f4:	00812e23          	sw	s0,28(sp)
600019f8:	02010413          	addi	s0,sp,32
600019fc:	fea42623          	sw	a0,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001a00:	fec42783          	lw	a5,-20(s0)
60001a04:	00878713          	addi	a4,a5,8
60001a08:	fec42783          	lw	a5,-20(s0)
60001a0c:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
60001a10:	fec42783          	lw	a5,-20(s0)
60001a14:	fff00713          	li	a4,-1
60001a18:	00e7a423          	sw	a4,8(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001a1c:	fec42783          	lw	a5,-20(s0)
60001a20:	00878713          	addi	a4,a5,8
60001a24:	fec42783          	lw	a5,-20(s0)
60001a28:	00e7a623          	sw	a4,12(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001a2c:	fec42783          	lw	a5,-20(s0)
60001a30:	00878713          	addi	a4,a5,8
60001a34:	fec42783          	lw	a5,-20(s0)
60001a38:	00e7a823          	sw	a4,16(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
60001a3c:	fec42783          	lw	a5,-20(s0)
60001a40:	0007a023          	sw	zero,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
60001a44:	00000013          	nop
60001a48:	01c12403          	lw	s0,28(sp)
60001a4c:	02010113          	addi	sp,sp,32
60001a50:	00008067          	ret

60001a54 <vListInitialiseItem>:
vListInitialiseItem():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
60001a54:	fe010113          	addi	sp,sp,-32
60001a58:	00812e23          	sw	s0,28(sp)
60001a5c:	02010413          	addi	s0,sp,32
60001a60:	fea42623          	sw	a0,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
60001a64:	fec42783          	lw	a5,-20(s0)
60001a68:	0007a823          	sw	zero,16(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
60001a6c:	00000013          	nop
60001a70:	01c12403          	lw	s0,28(sp)
60001a74:	02010113          	addi	sp,sp,32
60001a78:	00008067          	ret

60001a7c <vListInsertEnd>:
vListInsertEnd():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
60001a7c:	fd010113          	addi	sp,sp,-48
60001a80:	02812623          	sw	s0,44(sp)
60001a84:	03010413          	addi	s0,sp,48
60001a88:	fca42e23          	sw	a0,-36(s0)
60001a8c:	fcb42c23          	sw	a1,-40(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
60001a90:	fdc42783          	lw	a5,-36(s0)
60001a94:	0047a783          	lw	a5,4(a5)
60001a98:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
60001a9c:	fd842783          	lw	a5,-40(s0)
60001aa0:	fec42703          	lw	a4,-20(s0)
60001aa4:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
60001aa8:	fec42783          	lw	a5,-20(s0)
60001aac:	0087a703          	lw	a4,8(a5)
60001ab0:	fd842783          	lw	a5,-40(s0)
60001ab4:	00e7a423          	sw	a4,8(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
60001ab8:	fec42783          	lw	a5,-20(s0)
60001abc:	0087a783          	lw	a5,8(a5)
60001ac0:	fd842703          	lw	a4,-40(s0)
60001ac4:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
60001ac8:	fec42783          	lw	a5,-20(s0)
60001acc:	fd842703          	lw	a4,-40(s0)
60001ad0:	00e7a423          	sw	a4,8(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
60001ad4:	fd842783          	lw	a5,-40(s0)
60001ad8:	fdc42703          	lw	a4,-36(s0)
60001adc:	00e7a823          	sw	a4,16(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
60001ae0:	fdc42783          	lw	a5,-36(s0)
60001ae4:	0007a783          	lw	a5,0(a5)
60001ae8:	00178713          	addi	a4,a5,1
60001aec:	fdc42783          	lw	a5,-36(s0)
60001af0:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:142
}
60001af4:	00000013          	nop
60001af8:	02c12403          	lw	s0,44(sp)
60001afc:	03010113          	addi	sp,sp,48
60001b00:	00008067          	ret

60001b04 <vListInsert>:
vListInsert():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
60001b04:	fd010113          	addi	sp,sp,-48
60001b08:	02812623          	sw	s0,44(sp)
60001b0c:	03010413          	addi	s0,sp,48
60001b10:	fca42e23          	sw	a0,-36(s0)
60001b14:	fcb42c23          	sw	a1,-40(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
60001b18:	fd842783          	lw	a5,-40(s0)
60001b1c:	0007a783          	lw	a5,0(a5)
60001b20:	fef42423          	sw	a5,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
60001b24:	fe842703          	lw	a4,-24(s0)
60001b28:	fff00793          	li	a5,-1
60001b2c:	00f71a63          	bne	a4,a5,60001b40 <vListInsert+0x3c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
60001b30:	fdc42783          	lw	a5,-36(s0)
60001b34:	0107a783          	lw	a5,16(a5)
60001b38:	fef42623          	sw	a5,-20(s0)
60001b3c:	0340006f          	j	60001b70 <vListInsert+0x6c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001b40:	fdc42783          	lw	a5,-36(s0)
60001b44:	00878793          	addi	a5,a5,8
60001b48:	fef42623          	sw	a5,-20(s0)
60001b4c:	0100006f          	j	60001b5c <vListInsert+0x58>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:192 (discriminator 3)
60001b50:	fec42783          	lw	a5,-20(s0)
60001b54:	0047a783          	lw	a5,4(a5)
60001b58:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:192 (discriminator 1)
60001b5c:	fec42783          	lw	a5,-20(s0)
60001b60:	0047a783          	lw	a5,4(a5)
60001b64:	0007a783          	lw	a5,0(a5)
60001b68:	fe842703          	lw	a4,-24(s0)
60001b6c:	fef772e3          	bleu	a5,a4,60001b50 <vListInsert+0x4c>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
60001b70:	fec42783          	lw	a5,-20(s0)
60001b74:	0047a703          	lw	a4,4(a5)
60001b78:	fd842783          	lw	a5,-40(s0)
60001b7c:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
60001b80:	fd842783          	lw	a5,-40(s0)
60001b84:	0047a783          	lw	a5,4(a5)
60001b88:	fd842703          	lw	a4,-40(s0)
60001b8c:	00e7a423          	sw	a4,8(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
60001b90:	fd842783          	lw	a5,-40(s0)
60001b94:	fec42703          	lw	a4,-20(s0)
60001b98:	00e7a423          	sw	a4,8(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
60001b9c:	fec42783          	lw	a5,-20(s0)
60001ba0:	fd842703          	lw	a4,-40(s0)
60001ba4:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
60001ba8:	fd842783          	lw	a5,-40(s0)
60001bac:	fdc42703          	lw	a4,-36(s0)
60001bb0:	00e7a823          	sw	a4,16(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
60001bb4:	fdc42783          	lw	a5,-36(s0)
60001bb8:	0007a783          	lw	a5,0(a5)
60001bbc:	00178713          	addi	a4,a5,1
60001bc0:	fdc42783          	lw	a5,-36(s0)
60001bc4:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:209
}
60001bc8:	00000013          	nop
60001bcc:	02c12403          	lw	s0,44(sp)
60001bd0:	03010113          	addi	sp,sp,48
60001bd4:	00008067          	ret

60001bd8 <uxListRemove>:
uxListRemove():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
60001bd8:	fd010113          	addi	sp,sp,-48
60001bdc:	02812623          	sw	s0,44(sp)
60001be0:	03010413          	addi	s0,sp,48
60001be4:	fca42e23          	sw	a0,-36(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
60001be8:	fdc42783          	lw	a5,-36(s0)
60001bec:	0107a783          	lw	a5,16(a5)
60001bf0:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
60001bf4:	fdc42783          	lw	a5,-36(s0)
60001bf8:	0047a783          	lw	a5,4(a5)
60001bfc:	fdc42703          	lw	a4,-36(s0)
60001c00:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f00008>
60001c04:	00e7a423          	sw	a4,8(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
60001c08:	fdc42783          	lw	a5,-36(s0)
60001c0c:	0087a783          	lw	a5,8(a5)
60001c10:	fdc42703          	lw	a4,-36(s0)
60001c14:	00472703          	lw	a4,4(a4)
60001c18:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
60001c1c:	fec42783          	lw	a5,-20(s0)
60001c20:	0047a783          	lw	a5,4(a5)
60001c24:	fdc42703          	lw	a4,-36(s0)
60001c28:	00f71a63          	bne	a4,a5,60001c3c <uxListRemove+0x64>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
60001c2c:	fdc42783          	lw	a5,-36(s0)
60001c30:	0087a703          	lw	a4,8(a5)
60001c34:	fec42783          	lw	a5,-20(s0)
60001c38:	00e7a223          	sw	a4,4(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
60001c3c:	fdc42783          	lw	a5,-36(s0)
60001c40:	0007a823          	sw	zero,16(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
60001c44:	fec42783          	lw	a5,-20(s0)
60001c48:	0007a783          	lw	a5,0(a5)
60001c4c:	fff78713          	addi	a4,a5,-1
60001c50:	fec42783          	lw	a5,-20(s0)
60001c54:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
60001c58:	fec42783          	lw	a5,-20(s0)
60001c5c:	0007a783          	lw	a5,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:238
}
60001c60:	00078513          	mv	a0,a5
60001c64:	02c12403          	lw	s0,44(sp)
60001c68:	03010113          	addi	sp,sp,48
60001c6c:	00008067          	ret

60001c70 <memset>:
memset():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
60001c70:	fd010113          	addi	sp,sp,-48
60001c74:	02812623          	sw	s0,44(sp)
60001c78:	03010413          	addi	s0,sp,48
60001c7c:	fca42e23          	sw	a0,-36(s0)
60001c80:	fcb42c23          	sw	a1,-40(s0)
60001c84:	fcc42a23          	sw	a2,-44(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
60001c88:	fdc42703          	lw	a4,-36(s0)
60001c8c:	fd442783          	lw	a5,-44(s0)
60001c90:	00f767b3          	or	a5,a4,a5
60001c94:	0037f793          	andi	a5,a5,3
60001c98:	06079863          	bnez	a5,60001d08 <memset+0x98>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
60001c9c:	fd842783          	lw	a5,-40(s0)
60001ca0:	0ff7f793          	andi	a5,a5,255
60001ca4:	fef42223          	sw	a5,-28(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:28
    word |= word << 8;
60001ca8:	fe442783          	lw	a5,-28(s0)
60001cac:	00879793          	slli	a5,a5,0x8
60001cb0:	fe442703          	lw	a4,-28(s0)
60001cb4:	00f767b3          	or	a5,a4,a5
60001cb8:	fef42223          	sw	a5,-28(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:29
    word |= word << 16;
60001cbc:	fe442783          	lw	a5,-28(s0)
60001cc0:	01079793          	slli	a5,a5,0x10
60001cc4:	fe442703          	lw	a4,-28(s0)
60001cc8:	00f767b3          	or	a5,a4,a5
60001ccc:	fef42223          	sw	a5,-28(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
60001cd0:	fdc42783          	lw	a5,-36(s0)
60001cd4:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60001cd8:	0180006f          	j	60001cf0 <memset+0x80>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:34
      *d++ = word;
60001cdc:	fec42783          	lw	a5,-20(s0)
60001ce0:	00478713          	addi	a4,a5,4
60001ce4:	fee42623          	sw	a4,-20(s0)
60001ce8:	fe442703          	lw	a4,-28(s0)
60001cec:	00e7a023          	sw	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60001cf0:	fdc42703          	lw	a4,-36(s0)
60001cf4:	fd442783          	lw	a5,-44(s0)
60001cf8:	00f707b3          	add	a5,a4,a5
60001cfc:	fec42703          	lw	a4,-20(s0)
60001d00:	fcf76ee3          	bltu	a4,a5,60001cdc <memset+0x6c>
60001d04:	0400006f          	j	60001d44 <memset+0xd4>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
60001d08:	fdc42783          	lw	a5,-36(s0)
60001d0c:	fef42423          	sw	a5,-24(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60001d10:	0200006f          	j	60001d30 <memset+0xc0>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:38
      *d++ = byte;
60001d14:	fe842783          	lw	a5,-24(s0)
60001d18:	00178713          	addi	a4,a5,1
60001d1c:	fee42423          	sw	a4,-24(s0)
60001d20:	fd842703          	lw	a4,-40(s0)
60001d24:	01871713          	slli	a4,a4,0x18
60001d28:	41875713          	srai	a4,a4,0x18
60001d2c:	00e78023          	sb	a4,0(a5)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60001d30:	fdc42703          	lw	a4,-36(s0)
60001d34:	fd442783          	lw	a5,-44(s0)
60001d38:	00f707b3          	add	a5,a4,a5
60001d3c:	fe842703          	lw	a4,-24(s0)
60001d40:	fcf76ae3          	bltu	a4,a5,60001d14 <memset+0xa4>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:40
  }
  return dest;
60001d44:	fdc42783          	lw	a5,-36(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:41
}
60001d48:	00078513          	mv	a0,a5
60001d4c:	02c12403          	lw	s0,44(sp)
60001d50:	03010113          	addi	sp,sp,48
60001d54:	00008067          	ret

60001d58 <xTaskGenericCreate>:
xTaskGenericCreate():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3274
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( uint16_t ) ulCount;
	}
60001d58:	fc010113          	addi	sp,sp,-64
60001d5c:	02112e23          	sw	ra,60(sp)
60001d60:	02812c23          	sw	s0,56(sp)
60001d64:	04010413          	addi	s0,sp,64
60001d68:	fca42e23          	sw	a0,-36(s0)
60001d6c:	fcb42c23          	sw	a1,-40(s0)
60001d70:	fcd42823          	sw	a3,-48(s0)
60001d74:	fce42623          	sw	a4,-52(s0)
60001d78:	fcf42423          	sw	a5,-56(s0)
60001d7c:	fd042223          	sw	a6,-60(s0)
60001d80:	fd142023          	sw	a7,-64(s0)
60001d84:	00060793          	mv	a5,a2
60001d88:	fcf41b23          	sh	a5,-42(s0)
60001d8c:	fdc42783          	lw	a5,-36(s0)
60001d90:	00079663          	bnez	a5,60001d9c <xTaskGenericCreate+0x44>
60001d94:	30047073          	csrci	mstatus,8
60001d98:	0000006f          	j	60001d98 <xTaskGenericCreate+0x40>
60001d9c:	fcc42703          	lw	a4,-52(s0)
60001da0:	00400793          	li	a5,4
60001da4:	00e7f663          	bleu	a4,a5,60001db0 <xTaskGenericCreate+0x58>
60001da8:	30047073          	csrci	mstatus,8
60001dac:	0000006f          	j	60001dac <xTaskGenericCreate+0x54>
60001db0:	fd645783          	lhu	a5,-42(s0)
60001db4:	fc442583          	lw	a1,-60(s0)
60001db8:	00078513          	mv	a0,a5
60001dbc:	281000ef          	jal	ra,6000283c <prvAllocateTCBAndStack>
60001dc0:	fea42423          	sw	a0,-24(s0)
60001dc4:	fe842783          	lw	a5,-24(s0)
60001dc8:	16078263          	beqz	a5,60001f2c <xTaskGenericCreate+0x1d4>
60001dcc:	fe842783          	lw	a5,-24(s0)
60001dd0:	0307a703          	lw	a4,48(a5)
60001dd4:	fd645683          	lhu	a3,-42(s0)
60001dd8:	400007b7          	lui	a5,0x40000
60001ddc:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3fefffff>
60001de0:	00f687b3          	add	a5,a3,a5
60001de4:	00279793          	slli	a5,a5,0x2
60001de8:	00f707b3          	add	a5,a4,a5
60001dec:	fef42223          	sw	a5,-28(s0)
60001df0:	fe442783          	lw	a5,-28(s0)
60001df4:	ffc7f793          	andi	a5,a5,-4
60001df8:	fef42223          	sw	a5,-28(s0)
60001dfc:	fe442783          	lw	a5,-28(s0)
60001e00:	0037f793          	andi	a5,a5,3
60001e04:	00078663          	beqz	a5,60001e10 <xTaskGenericCreate+0xb8>
60001e08:	30047073          	csrci	mstatus,8
60001e0c:	0000006f          	j	60001e0c <xTaskGenericCreate+0xb4>
60001e10:	fd645783          	lhu	a5,-42(s0)
60001e14:	00078713          	mv	a4,a5
60001e18:	fc042683          	lw	a3,-64(s0)
60001e1c:	fcc42603          	lw	a2,-52(s0)
60001e20:	fd842583          	lw	a1,-40(s0)
60001e24:	fe842503          	lw	a0,-24(s0)
60001e28:	6f4000ef          	jal	ra,6000251c <prvInitialiseTCBVariables>
60001e2c:	fd042603          	lw	a2,-48(s0)
60001e30:	fdc42583          	lw	a1,-36(s0)
60001e34:	fe442503          	lw	a0,-28(s0)
60001e38:	901ff0ef          	jal	ra,60001738 <pxPortInitialiseStack>
60001e3c:	00050713          	mv	a4,a0
60001e40:	fe842783          	lw	a5,-24(s0)
60001e44:	00e7a023          	sw	a4,0(a5)
60001e48:	fc842783          	lw	a5,-56(s0)
60001e4c:	00078863          	beqz	a5,60001e5c <xTaskGenericCreate+0x104>
60001e50:	fc842783          	lw	a5,-56(s0)
60001e54:	fe842703          	lw	a4,-24(s0)
60001e58:	00e7a023          	sw	a4,0(a5)
60001e5c:	ea4ff0ef          	jal	ra,60001500 <vPortEnterCritical>
60001e60:	8d01a783          	lw	a5,-1840(gp) # 800000d0 <uxCurrentNumberOfTasks>
60001e64:	00178713          	addi	a4,a5,1
60001e68:	8ce1a823          	sw	a4,-1840(gp) # 800000d0 <uxCurrentNumberOfTasks>
60001e6c:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
60001e70:	02079063          	bnez	a5,60001e90 <xTaskGenericCreate+0x138>
60001e74:	fe842703          	lw	a4,-24(s0)
60001e78:	8ce1a023          	sw	a4,-1856(gp) # 800000c0 <pxCurrentTCB>
60001e7c:	8d01a703          	lw	a4,-1840(gp) # 800000d0 <uxCurrentNumberOfTasks>
60001e80:	00100793          	li	a5,1
60001e84:	02f71663          	bne	a4,a5,60001eb0 <xTaskGenericCreate+0x158>
60001e88:	7cc000ef          	jal	ra,60002654 <prvInitialiseTaskLists>
60001e8c:	0240006f          	j	60001eb0 <xTaskGenericCreate+0x158>
60001e90:	8dc1a783          	lw	a5,-1828(gp) # 800000dc <xSchedulerRunning>
60001e94:	00079e63          	bnez	a5,60001eb0 <xTaskGenericCreate+0x158>
60001e98:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
60001e9c:	02c7a783          	lw	a5,44(a5)
60001ea0:	fcc42703          	lw	a4,-52(s0)
60001ea4:	00f76663          	bltu	a4,a5,60001eb0 <xTaskGenericCreate+0x158>
60001ea8:	fe842703          	lw	a4,-24(s0)
60001eac:	8ce1a023          	sw	a4,-1856(gp) # 800000c0 <pxCurrentTCB>
60001eb0:	8ec1a783          	lw	a5,-1812(gp) # 800000ec <uxTaskNumber>
60001eb4:	00178713          	addi	a4,a5,1
60001eb8:	8ee1a623          	sw	a4,-1812(gp) # 800000ec <uxTaskNumber>
60001ebc:	8ec1a703          	lw	a4,-1812(gp) # 800000ec <uxTaskNumber>
60001ec0:	fe842783          	lw	a5,-24(s0)
60001ec4:	04e7a423          	sw	a4,72(a5)
60001ec8:	fe842783          	lw	a5,-24(s0)
60001ecc:	02c7a703          	lw	a4,44(a5)
60001ed0:	8d81a783          	lw	a5,-1832(gp) # 800000d8 <uxTopReadyPriority>
60001ed4:	00e7f863          	bleu	a4,a5,60001ee4 <xTaskGenericCreate+0x18c>
60001ed8:	fe842783          	lw	a5,-24(s0)
60001edc:	02c7a703          	lw	a4,44(a5)
60001ee0:	8ce1ac23          	sw	a4,-1832(gp) # 800000d8 <uxTopReadyPriority>
60001ee4:	fe842783          	lw	a5,-24(s0)
60001ee8:	02c7a703          	lw	a4,44(a5)
60001eec:	00070793          	mv	a5,a4
60001ef0:	00279793          	slli	a5,a5,0x2
60001ef4:	00e787b3          	add	a5,a5,a4
60001ef8:	00279793          	slli	a5,a5,0x2
60001efc:	80019737          	lui	a4,0x80019
60001f00:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdf30>
60001f04:	00e78733          	add	a4,a5,a4
60001f08:	fe842783          	lw	a5,-24(s0)
60001f0c:	00478793          	addi	a5,a5,4
60001f10:	00078593          	mv	a1,a5
60001f14:	00070513          	mv	a0,a4
60001f18:	b65ff0ef          	jal	ra,60001a7c <vListInsertEnd>
60001f1c:	00100793          	li	a5,1
60001f20:	fef42623          	sw	a5,-20(s0)
60001f24:	e10ff0ef          	jal	ra,60001534 <vPortExitCritical>
60001f28:	00c0006f          	j	60001f34 <xTaskGenericCreate+0x1dc>
60001f2c:	fff00793          	li	a5,-1
60001f30:	fef42623          	sw	a5,-20(s0)
60001f34:	fec42703          	lw	a4,-20(s0)
60001f38:	00100793          	li	a5,1
60001f3c:	02f71063          	bne	a4,a5,60001f5c <xTaskGenericCreate+0x204>
60001f40:	8dc1a783          	lw	a5,-1828(gp) # 800000dc <xSchedulerRunning>
60001f44:	00078c63          	beqz	a5,60001f5c <xTaskGenericCreate+0x204>
60001f48:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
60001f4c:	02c7a783          	lw	a5,44(a5)
60001f50:	fcc42703          	lw	a4,-52(s0)
60001f54:	00e7f463          	bleu	a4,a5,60001f5c <xTaskGenericCreate+0x204>
60001f58:	a71ff0ef          	jal	ra,600019c8 <vPortYield>
60001f5c:	fec42783          	lw	a5,-20(s0)
60001f60:	00078513          	mv	a0,a5
60001f64:	03c12083          	lw	ra,60(sp)
60001f68:	03812403          	lw	s0,56(sp)
60001f6c:	04010113          	addi	sp,sp,64
60001f70:	00008067          	ret

60001f74 <vTaskDelay>:
vTaskDelay():
60001f74:	fd010113          	addi	sp,sp,-48
60001f78:	02112623          	sw	ra,44(sp)
60001f7c:	02812423          	sw	s0,40(sp)
60001f80:	03010413          	addi	s0,sp,48
60001f84:	fca42e23          	sw	a0,-36(s0)
60001f88:	fe042623          	sw	zero,-20(s0)
60001f8c:	fdc42783          	lw	a5,-36(s0)
60001f90:	04078463          	beqz	a5,60001fd8 <vTaskDelay+0x64>
60001f94:	8f41a783          	lw	a5,-1804(gp) # 800000f4 <uxSchedulerSuspended>
60001f98:	00078663          	beqz	a5,60001fa4 <vTaskDelay+0x30>
60001f9c:	30047073          	csrci	mstatus,8
60001fa0:	0000006f          	j	60001fa0 <vTaskDelay+0x2c>
60001fa4:	0e4000ef          	jal	ra,60002088 <vTaskSuspendAll>
60001fa8:	8d41a783          	lw	a5,-1836(gp) # 800000d4 <xTickCount>
60001fac:	fdc42703          	lw	a4,-36(s0)
60001fb0:	00f707b3          	add	a5,a4,a5
60001fb4:	fef42423          	sw	a5,-24(s0)
60001fb8:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
60001fbc:	00478793          	addi	a5,a5,4
60001fc0:	00078513          	mv	a0,a5
60001fc4:	c15ff0ef          	jal	ra,60001bd8 <uxListRemove>
60001fc8:	fe842503          	lw	a0,-24(s0)
60001fcc:	7e8000ef          	jal	ra,600027b4 <prvAddCurrentTaskToDelayedList>
60001fd0:	0e0000ef          	jal	ra,600020b0 <xTaskResumeAll>
60001fd4:	fea42623          	sw	a0,-20(s0)
60001fd8:	fec42783          	lw	a5,-20(s0)
60001fdc:	00079463          	bnez	a5,60001fe4 <vTaskDelay+0x70>
60001fe0:	9e9ff0ef          	jal	ra,600019c8 <vPortYield>
60001fe4:	00000013          	nop
60001fe8:	02c12083          	lw	ra,44(sp)
60001fec:	02812403          	lw	s0,40(sp)
60001ff0:	03010113          	addi	sp,sp,48
60001ff4:	00008067          	ret

60001ff8 <vTaskStartScheduler>:
vTaskStartScheduler():
60001ff8:	fe010113          	addi	sp,sp,-32
60001ffc:	00112e23          	sw	ra,28(sp)
60002000:	00812c23          	sw	s0,24(sp)
60002004:	02010413          	addi	s0,sp,32
60002008:	00000893          	li	a7,0
6000200c:	00000813          	li	a6,0
60002010:	00000793          	li	a5,0
60002014:	00000713          	li	a4,0
60002018:	00000693          	li	a3,0
6000201c:	40000613          	li	a2,1024
60002020:	600035b7          	lui	a1,0x60003
60002024:	ec858593          	addi	a1,a1,-312 # 60002ec8 <vLEDTestTask3+0x40>
60002028:	60002537          	lui	a0,0x60002
6000202c:	4e850513          	addi	a0,a0,1256 # 600024e8 <prvIdleTask>
60002030:	d29ff0ef          	jal	ra,60001d58 <xTaskGenericCreate>
60002034:	fea42623          	sw	a0,-20(s0)
60002038:	fec42703          	lw	a4,-20(s0)
6000203c:	00100793          	li	a5,1
60002040:	02f71263          	bne	a4,a5,60002064 <vTaskStartScheduler+0x6c>
60002044:	30047073          	csrci	mstatus,8
60002048:	fff00713          	li	a4,-1
6000204c:	8ee1a823          	sw	a4,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
60002050:	00100713          	li	a4,1
60002054:	8ce1ae23          	sw	a4,-1828(gp) # 800000dc <xSchedulerRunning>
60002058:	8c01aa23          	sw	zero,-1836(gp) # 800000d4 <xTickCount>
6000205c:	83dff0ef          	jal	ra,60001898 <xPortStartScheduler>
60002060:	0140006f          	j	60002074 <vTaskStartScheduler+0x7c>
60002064:	fec42783          	lw	a5,-20(s0)
60002068:	00079663          	bnez	a5,60002074 <vTaskStartScheduler+0x7c>
6000206c:	30047073          	csrci	mstatus,8
60002070:	0000006f          	j	60002070 <vTaskStartScheduler+0x78>
60002074:	00000013          	nop
60002078:	01c12083          	lw	ra,28(sp)
6000207c:	01812403          	lw	s0,24(sp)
60002080:	02010113          	addi	sp,sp,32
60002084:	00008067          	ret

60002088 <vTaskSuspendAll>:
vTaskSuspendAll():
60002088:	ff010113          	addi	sp,sp,-16
6000208c:	00812623          	sw	s0,12(sp)
60002090:	01010413          	addi	s0,sp,16
60002094:	8f41a783          	lw	a5,-1804(gp) # 800000f4 <uxSchedulerSuspended>
60002098:	00178713          	addi	a4,a5,1
6000209c:	8ee1aa23          	sw	a4,-1804(gp) # 800000f4 <uxSchedulerSuspended>
600020a0:	00000013          	nop
600020a4:	00c12403          	lw	s0,12(sp)
600020a8:	01010113          	addi	sp,sp,16
600020ac:	00008067          	ret

600020b0 <xTaskResumeAll>:
xTaskResumeAll():
600020b0:	fe010113          	addi	sp,sp,-32
600020b4:	00112e23          	sw	ra,28(sp)
600020b8:	00812c23          	sw	s0,24(sp)
600020bc:	02010413          	addi	s0,sp,32
600020c0:	fe042623          	sw	zero,-20(s0)
600020c4:	8f41a783          	lw	a5,-1804(gp) # 800000f4 <uxSchedulerSuspended>
600020c8:	00079663          	bnez	a5,600020d4 <xTaskResumeAll+0x24>
600020cc:	30047073          	csrci	mstatus,8
600020d0:	0000006f          	j	600020d0 <xTaskResumeAll+0x20>
600020d4:	c2cff0ef          	jal	ra,60001500 <vPortEnterCritical>
600020d8:	8f41a783          	lw	a5,-1804(gp) # 800000f4 <uxSchedulerSuspended>
600020dc:	fff78713          	addi	a4,a5,-1
600020e0:	8ee1aa23          	sw	a4,-1804(gp) # 800000f4 <uxSchedulerSuspended>
600020e4:	8f41a783          	lw	a5,-1804(gp) # 800000f4 <uxSchedulerSuspended>
600020e8:	10079663          	bnez	a5,600021f4 <xTaskResumeAll+0x144>
600020ec:	8d01a783          	lw	a5,-1840(gp) # 800000d0 <uxCurrentNumberOfTasks>
600020f0:	10078263          	beqz	a5,600021f4 <xTaskResumeAll+0x144>
600020f4:	0a80006f          	j	6000219c <xTaskResumeAll+0xec>
600020f8:	800197b7          	lui	a5,0x80019
600020fc:	19c78793          	addi	a5,a5,412 # 8001919c <__stack_top+0xffffdfbc>
60002100:	00c7a783          	lw	a5,12(a5)
60002104:	00c7a783          	lw	a5,12(a5)
60002108:	fef42423          	sw	a5,-24(s0)
6000210c:	fe842783          	lw	a5,-24(s0)
60002110:	01878793          	addi	a5,a5,24
60002114:	00078513          	mv	a0,a5
60002118:	ac1ff0ef          	jal	ra,60001bd8 <uxListRemove>
6000211c:	fe842783          	lw	a5,-24(s0)
60002120:	00478793          	addi	a5,a5,4
60002124:	00078513          	mv	a0,a5
60002128:	ab1ff0ef          	jal	ra,60001bd8 <uxListRemove>
6000212c:	fe842783          	lw	a5,-24(s0)
60002130:	02c7a703          	lw	a4,44(a5)
60002134:	8d81a783          	lw	a5,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002138:	00e7f863          	bleu	a4,a5,60002148 <xTaskResumeAll+0x98>
6000213c:	fe842783          	lw	a5,-24(s0)
60002140:	02c7a703          	lw	a4,44(a5)
60002144:	8ce1ac23          	sw	a4,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002148:	fe842783          	lw	a5,-24(s0)
6000214c:	02c7a703          	lw	a4,44(a5)
60002150:	00070793          	mv	a5,a4
60002154:	00279793          	slli	a5,a5,0x2
60002158:	00e787b3          	add	a5,a5,a4
6000215c:	00279793          	slli	a5,a5,0x2
60002160:	80019737          	lui	a4,0x80019
60002164:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdf30>
60002168:	00e78733          	add	a4,a5,a4
6000216c:	fe842783          	lw	a5,-24(s0)
60002170:	00478793          	addi	a5,a5,4
60002174:	00078593          	mv	a1,a5
60002178:	00070513          	mv	a0,a4
6000217c:	901ff0ef          	jal	ra,60001a7c <vListInsertEnd>
60002180:	fe842783          	lw	a5,-24(s0)
60002184:	02c7a703          	lw	a4,44(a5)
60002188:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
6000218c:	02c7a783          	lw	a5,44(a5)
60002190:	00f76663          	bltu	a4,a5,6000219c <xTaskResumeAll+0xec>
60002194:	00100713          	li	a4,1
60002198:	8ee1a223          	sw	a4,-1820(gp) # 800000e4 <xYieldPending>
6000219c:	800197b7          	lui	a5,0x80019
600021a0:	19c7a783          	lw	a5,412(a5) # 8001919c <__stack_top+0xffffdfbc>
600021a4:	f4079ae3          	bnez	a5,600020f8 <xTaskResumeAll+0x48>
600021a8:	8e01a783          	lw	a5,-1824(gp) # 800000e0 <uxPendedTicks>
600021ac:	02078863          	beqz	a5,600021dc <xTaskResumeAll+0x12c>
600021b0:	0240006f          	j	600021d4 <xTaskResumeAll+0x124>
600021b4:	05c000ef          	jal	ra,60002210 <xTaskIncrementTick>
600021b8:	00050793          	mv	a5,a0
600021bc:	00078663          	beqz	a5,600021c8 <xTaskResumeAll+0x118>
600021c0:	00100713          	li	a4,1
600021c4:	8ee1a223          	sw	a4,-1820(gp) # 800000e4 <xYieldPending>
600021c8:	8e01a783          	lw	a5,-1824(gp) # 800000e0 <uxPendedTicks>
600021cc:	fff78713          	addi	a4,a5,-1
600021d0:	8ee1a023          	sw	a4,-1824(gp) # 800000e0 <uxPendedTicks>
600021d4:	8e01a783          	lw	a5,-1824(gp) # 800000e0 <uxPendedTicks>
600021d8:	fc079ee3          	bnez	a5,600021b4 <xTaskResumeAll+0x104>
600021dc:	8e41a703          	lw	a4,-1820(gp) # 800000e4 <xYieldPending>
600021e0:	00100793          	li	a5,1
600021e4:	00f71863          	bne	a4,a5,600021f4 <xTaskResumeAll+0x144>
600021e8:	00100793          	li	a5,1
600021ec:	fef42623          	sw	a5,-20(s0)
600021f0:	fd8ff0ef          	jal	ra,600019c8 <vPortYield>
600021f4:	b40ff0ef          	jal	ra,60001534 <vPortExitCritical>
600021f8:	fec42783          	lw	a5,-20(s0)
600021fc:	00078513          	mv	a0,a5
60002200:	01c12083          	lw	ra,28(sp)
60002204:	01812403          	lw	s0,24(sp)
60002208:	02010113          	addi	sp,sp,32
6000220c:	00008067          	ret

60002210 <xTaskIncrementTick>:
xTaskIncrementTick():
60002210:	fd010113          	addi	sp,sp,-48
60002214:	02112623          	sw	ra,44(sp)
60002218:	02812423          	sw	s0,40(sp)
6000221c:	03010413          	addi	s0,sp,48
60002220:	fe042623          	sw	zero,-20(s0)
60002224:	8f41a783          	lw	a5,-1804(gp) # 800000f4 <uxSchedulerSuspended>
60002228:	1a079063          	bnez	a5,600023c8 <xTaskIncrementTick+0x1b8>
6000222c:	8d41a783          	lw	a5,-1836(gp) # 800000d4 <xTickCount>
60002230:	00178713          	addi	a4,a5,1
60002234:	8ce1aa23          	sw	a4,-1836(gp) # 800000d4 <xTickCount>
60002238:	8d41a783          	lw	a5,-1836(gp) # 800000d4 <xTickCount>
6000223c:	fef42423          	sw	a5,-24(s0)
60002240:	fe842783          	lw	a5,-24(s0)
60002244:	04079063          	bnez	a5,60002284 <xTaskIncrementTick+0x74>
60002248:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <pxDelayedTaskList>
6000224c:	0007a783          	lw	a5,0(a5)
60002250:	00078663          	beqz	a5,6000225c <xTaskIncrementTick+0x4c>
60002254:	30047073          	csrci	mstatus,8
60002258:	0000006f          	j	60002258 <xTaskIncrementTick+0x48>
6000225c:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <pxDelayedTaskList>
60002260:	fef42223          	sw	a5,-28(s0)
60002264:	8c81a703          	lw	a4,-1848(gp) # 800000c8 <pxOverflowDelayedTaskList>
60002268:	8ce1a223          	sw	a4,-1852(gp) # 800000c4 <pxDelayedTaskList>
6000226c:	fe442703          	lw	a4,-28(s0)
60002270:	8ce1a423          	sw	a4,-1848(gp) # 800000c8 <pxOverflowDelayedTaskList>
60002274:	8e81a783          	lw	a5,-1816(gp) # 800000e8 <xNumOfOverflows>
60002278:	00178713          	addi	a4,a5,1
6000227c:	8ee1a423          	sw	a4,-1816(gp) # 800000e8 <xNumOfOverflows>
60002280:	6bc000ef          	jal	ra,6000293c <prvResetNextTaskUnblockTime>
60002284:	8f01a783          	lw	a5,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
60002288:	fe842703          	lw	a4,-24(s0)
6000228c:	10f76063          	bltu	a4,a5,6000238c <xTaskIncrementTick+0x17c>
60002290:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <pxDelayedTaskList>
60002294:	0007a783          	lw	a5,0(a5)
60002298:	00079663          	bnez	a5,600022a4 <xTaskIncrementTick+0x94>
6000229c:	00100793          	li	a5,1
600022a0:	0080006f          	j	600022a8 <xTaskIncrementTick+0x98>
600022a4:	00000793          	li	a5,0
600022a8:	00078863          	beqz	a5,600022b8 <xTaskIncrementTick+0xa8>
600022ac:	fff00713          	li	a4,-1
600022b0:	8ee1a823          	sw	a4,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
600022b4:	0d80006f          	j	6000238c <xTaskIncrementTick+0x17c>
600022b8:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <pxDelayedTaskList>
600022bc:	00c7a783          	lw	a5,12(a5)
600022c0:	00c7a783          	lw	a5,12(a5)
600022c4:	fef42023          	sw	a5,-32(s0)
600022c8:	fe042783          	lw	a5,-32(s0)
600022cc:	0047a783          	lw	a5,4(a5)
600022d0:	fcf42e23          	sw	a5,-36(s0)
600022d4:	fe842703          	lw	a4,-24(s0)
600022d8:	fdc42783          	lw	a5,-36(s0)
600022dc:	00f77863          	bleu	a5,a4,600022ec <xTaskIncrementTick+0xdc>
600022e0:	fdc42703          	lw	a4,-36(s0)
600022e4:	8ee1a823          	sw	a4,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
600022e8:	0a40006f          	j	6000238c <xTaskIncrementTick+0x17c>
600022ec:	fe042783          	lw	a5,-32(s0)
600022f0:	00478793          	addi	a5,a5,4
600022f4:	00078513          	mv	a0,a5
600022f8:	8e1ff0ef          	jal	ra,60001bd8 <uxListRemove>
600022fc:	fe042783          	lw	a5,-32(s0)
60002300:	0287a783          	lw	a5,40(a5)
60002304:	00078a63          	beqz	a5,60002318 <xTaskIncrementTick+0x108>
60002308:	fe042783          	lw	a5,-32(s0)
6000230c:	01878793          	addi	a5,a5,24
60002310:	00078513          	mv	a0,a5
60002314:	8c5ff0ef          	jal	ra,60001bd8 <uxListRemove>
60002318:	fe042783          	lw	a5,-32(s0)
6000231c:	02c7a703          	lw	a4,44(a5)
60002320:	8d81a783          	lw	a5,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002324:	00e7f863          	bleu	a4,a5,60002334 <xTaskIncrementTick+0x124>
60002328:	fe042783          	lw	a5,-32(s0)
6000232c:	02c7a703          	lw	a4,44(a5)
60002330:	8ce1ac23          	sw	a4,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002334:	fe042783          	lw	a5,-32(s0)
60002338:	02c7a703          	lw	a4,44(a5)
6000233c:	00070793          	mv	a5,a4
60002340:	00279793          	slli	a5,a5,0x2
60002344:	00e787b3          	add	a5,a5,a4
60002348:	00279793          	slli	a5,a5,0x2
6000234c:	80019737          	lui	a4,0x80019
60002350:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdf30>
60002354:	00e78733          	add	a4,a5,a4
60002358:	fe042783          	lw	a5,-32(s0)
6000235c:	00478793          	addi	a5,a5,4
60002360:	00078593          	mv	a1,a5
60002364:	00070513          	mv	a0,a4
60002368:	f14ff0ef          	jal	ra,60001a7c <vListInsertEnd>
6000236c:	fe042783          	lw	a5,-32(s0)
60002370:	02c7a703          	lw	a4,44(a5)
60002374:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
60002378:	02c7a783          	lw	a5,44(a5)
6000237c:	f0f76ae3          	bltu	a4,a5,60002290 <xTaskIncrementTick+0x80>
60002380:	00100793          	li	a5,1
60002384:	fef42623          	sw	a5,-20(s0)
60002388:	f09ff06f          	j	60002290 <xTaskIncrementTick+0x80>
6000238c:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
60002390:	02c7a703          	lw	a4,44(a5)
60002394:	800196b7          	lui	a3,0x80019
60002398:	00070793          	mv	a5,a4
6000239c:	00279793          	slli	a5,a5,0x2
600023a0:	00e787b3          	add	a5,a5,a4
600023a4:	00279793          	slli	a5,a5,0x2
600023a8:	11068713          	addi	a4,a3,272 # 80019110 <__stack_top+0xffffdf30>
600023ac:	00e787b3          	add	a5,a5,a4
600023b0:	0007a703          	lw	a4,0(a5)
600023b4:	00100793          	li	a5,1
600023b8:	00e7fe63          	bleu	a4,a5,600023d4 <xTaskIncrementTick+0x1c4>
600023bc:	00100793          	li	a5,1
600023c0:	fef42623          	sw	a5,-20(s0)
600023c4:	0100006f          	j	600023d4 <xTaskIncrementTick+0x1c4>
600023c8:	8e01a783          	lw	a5,-1824(gp) # 800000e0 <uxPendedTicks>
600023cc:	00178713          	addi	a4,a5,1
600023d0:	8ee1a023          	sw	a4,-1824(gp) # 800000e0 <uxPendedTicks>
600023d4:	8e41a783          	lw	a5,-1820(gp) # 800000e4 <xYieldPending>
600023d8:	00078663          	beqz	a5,600023e4 <xTaskIncrementTick+0x1d4>
600023dc:	00100793          	li	a5,1
600023e0:	fef42623          	sw	a5,-20(s0)
600023e4:	fec42783          	lw	a5,-20(s0)
600023e8:	00078513          	mv	a0,a5
600023ec:	02c12083          	lw	ra,44(sp)
600023f0:	02812403          	lw	s0,40(sp)
600023f4:	03010113          	addi	sp,sp,48
600023f8:	00008067          	ret

600023fc <vTaskSwitchContext>:
vTaskSwitchContext():
600023fc:	fe010113          	addi	sp,sp,-32
60002400:	00812e23          	sw	s0,28(sp)
60002404:	02010413          	addi	s0,sp,32
60002408:	8f41a783          	lw	a5,-1804(gp) # 800000f4 <uxSchedulerSuspended>
6000240c:	00078863          	beqz	a5,6000241c <vTaskSwitchContext+0x20>
60002410:	00100713          	li	a4,1
60002414:	8ee1a223          	sw	a4,-1820(gp) # 800000e4 <xYieldPending>
60002418:	0c00006f          	j	600024d8 <vTaskSwitchContext+0xdc>
6000241c:	8e01a223          	sw	zero,-1820(gp) # 800000e4 <xYieldPending>
60002420:	0200006f          	j	60002440 <vTaskSwitchContext+0x44>
60002424:	8d81a783          	lw	a5,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002428:	00079663          	bnez	a5,60002434 <vTaskSwitchContext+0x38>
6000242c:	30047073          	csrci	mstatus,8
60002430:	0000006f          	j	60002430 <vTaskSwitchContext+0x34>
60002434:	8d81a783          	lw	a5,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002438:	fff78713          	addi	a4,a5,-1
6000243c:	8ce1ac23          	sw	a4,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002440:	8d81a703          	lw	a4,-1832(gp) # 800000d8 <uxTopReadyPriority>
60002444:	800196b7          	lui	a3,0x80019
60002448:	00070793          	mv	a5,a4
6000244c:	00279793          	slli	a5,a5,0x2
60002450:	00e787b3          	add	a5,a5,a4
60002454:	00279793          	slli	a5,a5,0x2
60002458:	11068713          	addi	a4,a3,272 # 80019110 <__stack_top+0xffffdf30>
6000245c:	00e787b3          	add	a5,a5,a4
60002460:	0007a783          	lw	a5,0(a5)
60002464:	fc0780e3          	beqz	a5,60002424 <vTaskSwitchContext+0x28>
60002468:	8d81a703          	lw	a4,-1832(gp) # 800000d8 <uxTopReadyPriority>
6000246c:	00070793          	mv	a5,a4
60002470:	00279793          	slli	a5,a5,0x2
60002474:	00e787b3          	add	a5,a5,a4
60002478:	00279793          	slli	a5,a5,0x2
6000247c:	80019737          	lui	a4,0x80019
60002480:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdf30>
60002484:	00e787b3          	add	a5,a5,a4
60002488:	fef42623          	sw	a5,-20(s0)
6000248c:	fec42783          	lw	a5,-20(s0)
60002490:	0047a783          	lw	a5,4(a5)
60002494:	0047a703          	lw	a4,4(a5)
60002498:	fec42783          	lw	a5,-20(s0)
6000249c:	00e7a223          	sw	a4,4(a5)
600024a0:	fec42783          	lw	a5,-20(s0)
600024a4:	0047a703          	lw	a4,4(a5)
600024a8:	fec42783          	lw	a5,-20(s0)
600024ac:	00878793          	addi	a5,a5,8
600024b0:	00f71c63          	bne	a4,a5,600024c8 <vTaskSwitchContext+0xcc>
600024b4:	fec42783          	lw	a5,-20(s0)
600024b8:	0047a783          	lw	a5,4(a5)
600024bc:	0047a703          	lw	a4,4(a5)
600024c0:	fec42783          	lw	a5,-20(s0)
600024c4:	00e7a223          	sw	a4,4(a5)
600024c8:	fec42783          	lw	a5,-20(s0)
600024cc:	0047a783          	lw	a5,4(a5)
600024d0:	00c7a703          	lw	a4,12(a5)
600024d4:	8ce1a023          	sw	a4,-1856(gp) # 800000c0 <pxCurrentTCB>
600024d8:	00000013          	nop
600024dc:	01c12403          	lw	s0,28(sp)
600024e0:	02010113          	addi	sp,sp,32
600024e4:	00008067          	ret

600024e8 <prvIdleTask>:
prvIdleTask():
600024e8:	fe010113          	addi	sp,sp,-32
600024ec:	00112e23          	sw	ra,28(sp)
600024f0:	00812c23          	sw	s0,24(sp)
600024f4:	02010413          	addi	s0,sp,32
600024f8:	fea42623          	sw	a0,-20(s0)
600024fc:	218000ef          	jal	ra,60002714 <prvCheckTasksWaitingTermination>
60002500:	800197b7          	lui	a5,0x80019
60002504:	1107a703          	lw	a4,272(a5) # 80019110 <__stack_top+0xffffdf30>
60002508:	00100793          	li	a5,1
6000250c:	00e7f463          	bleu	a4,a5,60002514 <prvIdleTask+0x2c>
60002510:	cb8ff0ef          	jal	ra,600019c8 <vPortYield>
60002514:	0f9000ef          	jal	ra,60002e0c <vApplicationIdleHook>
60002518:	fe5ff06f          	j	600024fc <prvIdleTask+0x14>

6000251c <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
6000251c:	fc010113          	addi	sp,sp,-64
60002520:	02112e23          	sw	ra,60(sp)
60002524:	02812c23          	sw	s0,56(sp)
60002528:	04010413          	addi	s0,sp,64
6000252c:	fca42e23          	sw	a0,-36(s0)
60002530:	fcb42c23          	sw	a1,-40(s0)
60002534:	fcc42a23          	sw	a2,-44(s0)
60002538:	fcd42823          	sw	a3,-48(s0)
6000253c:	00070793          	mv	a5,a4
60002540:	fcf41723          	sh	a5,-50(s0)
60002544:	fe042623          	sw	zero,-20(s0)
60002548:	0440006f          	j	6000258c <prvInitialiseTCBVariables+0x70>
6000254c:	fd842703          	lw	a4,-40(s0)
60002550:	fec42783          	lw	a5,-20(s0)
60002554:	00f707b3          	add	a5,a4,a5
60002558:	00078703          	lb	a4,0(a5)
6000255c:	fdc42683          	lw	a3,-36(s0)
60002560:	fec42783          	lw	a5,-20(s0)
60002564:	00f687b3          	add	a5,a3,a5
60002568:	02e78a23          	sb	a4,52(a5)
6000256c:	fd842703          	lw	a4,-40(s0)
60002570:	fec42783          	lw	a5,-20(s0)
60002574:	00f707b3          	add	a5,a4,a5
60002578:	00078783          	lb	a5,0(a5)
6000257c:	02078063          	beqz	a5,6000259c <prvInitialiseTCBVariables+0x80>
60002580:	fec42783          	lw	a5,-20(s0)
60002584:	00178793          	addi	a5,a5,1
60002588:	fef42623          	sw	a5,-20(s0)
6000258c:	fec42703          	lw	a4,-20(s0)
60002590:	00f00793          	li	a5,15
60002594:	fae7fce3          	bleu	a4,a5,6000254c <prvInitialiseTCBVariables+0x30>
60002598:	0080006f          	j	600025a0 <prvInitialiseTCBVariables+0x84>
6000259c:	00000013          	nop
600025a0:	fdc42783          	lw	a5,-36(s0)
600025a4:	040781a3          	sb	zero,67(a5)
600025a8:	fd442703          	lw	a4,-44(s0)
600025ac:	00400793          	li	a5,4
600025b0:	00e7f663          	bleu	a4,a5,600025bc <prvInitialiseTCBVariables+0xa0>
600025b4:	00400793          	li	a5,4
600025b8:	fcf42a23          	sw	a5,-44(s0)
600025bc:	fdc42783          	lw	a5,-36(s0)
600025c0:	fd442703          	lw	a4,-44(s0)
600025c4:	02e7a623          	sw	a4,44(a5)
600025c8:	fdc42783          	lw	a5,-36(s0)
600025cc:	fd442703          	lw	a4,-44(s0)
600025d0:	04e7a823          	sw	a4,80(a5)
600025d4:	fdc42783          	lw	a5,-36(s0)
600025d8:	0407aa23          	sw	zero,84(a5)
600025dc:	fdc42783          	lw	a5,-36(s0)
600025e0:	00478793          	addi	a5,a5,4
600025e4:	00078513          	mv	a0,a5
600025e8:	c6cff0ef          	jal	ra,60001a54 <vListInitialiseItem>
600025ec:	fdc42783          	lw	a5,-36(s0)
600025f0:	01878793          	addi	a5,a5,24
600025f4:	00078513          	mv	a0,a5
600025f8:	c5cff0ef          	jal	ra,60001a54 <vListInitialiseItem>
600025fc:	fdc42783          	lw	a5,-36(s0)
60002600:	fdc42703          	lw	a4,-36(s0)
60002604:	00e7a823          	sw	a4,16(a5)
60002608:	00500713          	li	a4,5
6000260c:	fd442783          	lw	a5,-44(s0)
60002610:	40f70733          	sub	a4,a4,a5
60002614:	fdc42783          	lw	a5,-36(s0)
60002618:	00e7ac23          	sw	a4,24(a5)
6000261c:	fdc42783          	lw	a5,-36(s0)
60002620:	fdc42703          	lw	a4,-36(s0)
60002624:	02e7a223          	sw	a4,36(a5)
60002628:	fdc42783          	lw	a5,-36(s0)
6000262c:	0407a223          	sw	zero,68(a5)
60002630:	fdc42783          	lw	a5,-36(s0)
60002634:	0407ac23          	sw	zero,88(a5)
60002638:	fdc42783          	lw	a5,-36(s0)
6000263c:	0407ae23          	sw	zero,92(a5)
60002640:	00000013          	nop
60002644:	03c12083          	lw	ra,60(sp)
60002648:	03812403          	lw	s0,56(sp)
6000264c:	04010113          	addi	sp,sp,64
60002650:	00008067          	ret

60002654 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
60002654:	fe010113          	addi	sp,sp,-32
60002658:	00112e23          	sw	ra,28(sp)
6000265c:	00812c23          	sw	s0,24(sp)
60002660:	02010413          	addi	s0,sp,32
60002664:	fe042623          	sw	zero,-20(s0)
60002668:	0380006f          	j	600026a0 <prvInitialiseTaskLists+0x4c>
6000266c:	fec42703          	lw	a4,-20(s0)
60002670:	00070793          	mv	a5,a4
60002674:	00279793          	slli	a5,a5,0x2
60002678:	00e787b3          	add	a5,a5,a4
6000267c:	00279793          	slli	a5,a5,0x2
60002680:	80019737          	lui	a4,0x80019
60002684:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdf30>
60002688:	00e787b3          	add	a5,a5,a4
6000268c:	00078513          	mv	a0,a5
60002690:	b60ff0ef          	jal	ra,600019f0 <vListInitialise>
60002694:	fec42783          	lw	a5,-20(s0)
60002698:	00178793          	addi	a5,a5,1
6000269c:	fef42623          	sw	a5,-20(s0)
600026a0:	fec42703          	lw	a4,-20(s0)
600026a4:	00400793          	li	a5,4
600026a8:	fce7f2e3          	bleu	a4,a5,6000266c <prvInitialiseTaskLists+0x18>
600026ac:	800197b7          	lui	a5,0x80019
600026b0:	17478513          	addi	a0,a5,372 # 80019174 <__stack_top+0xffffdf94>
600026b4:	b3cff0ef          	jal	ra,600019f0 <vListInitialise>
600026b8:	800197b7          	lui	a5,0x80019
600026bc:	18878513          	addi	a0,a5,392 # 80019188 <__stack_top+0xffffdfa8>
600026c0:	b30ff0ef          	jal	ra,600019f0 <vListInitialise>
600026c4:	800197b7          	lui	a5,0x80019
600026c8:	19c78513          	addi	a0,a5,412 # 8001919c <__stack_top+0xffffdfbc>
600026cc:	b24ff0ef          	jal	ra,600019f0 <vListInitialise>
600026d0:	800197b7          	lui	a5,0x80019
600026d4:	1b078513          	addi	a0,a5,432 # 800191b0 <__stack_top+0xffffdfd0>
600026d8:	b18ff0ef          	jal	ra,600019f0 <vListInitialise>
600026dc:	800197b7          	lui	a5,0x80019
600026e0:	1c478513          	addi	a0,a5,452 # 800191c4 <__stack_top+0xffffdfe4>
600026e4:	b0cff0ef          	jal	ra,600019f0 <vListInitialise>
600026e8:	80019737          	lui	a4,0x80019
600026ec:	17470713          	addi	a4,a4,372 # 80019174 <__stack_top+0xffffdf94>
600026f0:	8ce1a223          	sw	a4,-1852(gp) # 800000c4 <pxDelayedTaskList>
600026f4:	80019737          	lui	a4,0x80019
600026f8:	18870713          	addi	a4,a4,392 # 80019188 <__stack_top+0xffffdfa8>
600026fc:	8ce1a423          	sw	a4,-1848(gp) # 800000c8 <pxOverflowDelayedTaskList>
60002700:	00000013          	nop
60002704:	01c12083          	lw	ra,28(sp)
60002708:	01812403          	lw	s0,24(sp)
6000270c:	02010113          	addi	sp,sp,32
60002710:	00008067          	ret

60002714 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
60002714:	fe010113          	addi	sp,sp,-32
60002718:	00112e23          	sw	ra,28(sp)
6000271c:	00812c23          	sw	s0,24(sp)
60002720:	02010413          	addi	s0,sp,32
60002724:	0740006f          	j	60002798 <prvCheckTasksWaitingTermination+0x84>
60002728:	961ff0ef          	jal	ra,60002088 <vTaskSuspendAll>
6000272c:	800197b7          	lui	a5,0x80019
60002730:	1b07a783          	lw	a5,432(a5) # 800191b0 <__stack_top+0xffffdfd0>
60002734:	0017b793          	seqz	a5,a5
60002738:	0ff7f793          	andi	a5,a5,255
6000273c:	fef42623          	sw	a5,-20(s0)
60002740:	971ff0ef          	jal	ra,600020b0 <xTaskResumeAll>
60002744:	fec42783          	lw	a5,-20(s0)
60002748:	04079863          	bnez	a5,60002798 <prvCheckTasksWaitingTermination+0x84>
6000274c:	db5fe0ef          	jal	ra,60001500 <vPortEnterCritical>
60002750:	800197b7          	lui	a5,0x80019
60002754:	1b078793          	addi	a5,a5,432 # 800191b0 <__stack_top+0xffffdfd0>
60002758:	00c7a783          	lw	a5,12(a5)
6000275c:	00c7a783          	lw	a5,12(a5)
60002760:	fef42423          	sw	a5,-24(s0)
60002764:	fe842783          	lw	a5,-24(s0)
60002768:	00478793          	addi	a5,a5,4
6000276c:	00078513          	mv	a0,a5
60002770:	c68ff0ef          	jal	ra,60001bd8 <uxListRemove>
60002774:	8d01a783          	lw	a5,-1840(gp) # 800000d0 <uxCurrentNumberOfTasks>
60002778:	fff78713          	addi	a4,a5,-1
6000277c:	8ce1a823          	sw	a4,-1840(gp) # 800000d0 <uxCurrentNumberOfTasks>
60002780:	8cc1a783          	lw	a5,-1844(gp) # 800000cc <uxTasksDeleted>
60002784:	fff78713          	addi	a4,a5,-1
60002788:	8ce1a623          	sw	a4,-1844(gp) # 800000cc <uxTasksDeleted>
6000278c:	da9fe0ef          	jal	ra,60001534 <vPortExitCritical>
60002790:	fe842503          	lw	a0,-24(s0)
60002794:	168000ef          	jal	ra,600028fc <prvDeleteTCB>
60002798:	8cc1a783          	lw	a5,-1844(gp) # 800000cc <uxTasksDeleted>
6000279c:	f80796e3          	bnez	a5,60002728 <prvCheckTasksWaitingTermination+0x14>
600027a0:	00000013          	nop
600027a4:	01c12083          	lw	ra,28(sp)
600027a8:	01812403          	lw	s0,24(sp)
600027ac:	02010113          	addi	sp,sp,32
600027b0:	00008067          	ret

600027b4 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
600027b4:	fe010113          	addi	sp,sp,-32
600027b8:	00112e23          	sw	ra,28(sp)
600027bc:	00812c23          	sw	s0,24(sp)
600027c0:	02010413          	addi	s0,sp,32
600027c4:	fea42623          	sw	a0,-20(s0)
600027c8:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
600027cc:	fec42703          	lw	a4,-20(s0)
600027d0:	00e7a223          	sw	a4,4(a5)
600027d4:	8d41a783          	lw	a5,-1836(gp) # 800000d4 <xTickCount>
600027d8:	fec42703          	lw	a4,-20(s0)
600027dc:	02f77063          	bleu	a5,a4,600027fc <prvAddCurrentTaskToDelayedList+0x48>
600027e0:	8c81a703          	lw	a4,-1848(gp) # 800000c8 <pxOverflowDelayedTaskList>
600027e4:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
600027e8:	00478793          	addi	a5,a5,4
600027ec:	00078593          	mv	a1,a5
600027f0:	00070513          	mv	a0,a4
600027f4:	b10ff0ef          	jal	ra,60001b04 <vListInsert>
600027f8:	0300006f          	j	60002828 <prvAddCurrentTaskToDelayedList+0x74>
600027fc:	8c41a703          	lw	a4,-1852(gp) # 800000c4 <pxDelayedTaskList>
60002800:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <pxCurrentTCB>
60002804:	00478793          	addi	a5,a5,4
60002808:	00078593          	mv	a1,a5
6000280c:	00070513          	mv	a0,a4
60002810:	af4ff0ef          	jal	ra,60001b04 <vListInsert>
60002814:	8f01a783          	lw	a5,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
60002818:	fec42703          	lw	a4,-20(s0)
6000281c:	00f77663          	bleu	a5,a4,60002828 <prvAddCurrentTaskToDelayedList+0x74>
60002820:	fec42703          	lw	a4,-20(s0)
60002824:	8ee1a823          	sw	a4,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
60002828:	00000013          	nop
6000282c:	01c12083          	lw	ra,28(sp)
60002830:	01812403          	lw	s0,24(sp)
60002834:	02010113          	addi	sp,sp,32
60002838:	00008067          	ret

6000283c <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
6000283c:	fd010113          	addi	sp,sp,-48
60002840:	02112623          	sw	ra,44(sp)
60002844:	02812423          	sw	s0,40(sp)
60002848:	03010413          	addi	s0,sp,48
6000284c:	00050793          	mv	a5,a0
60002850:	fcb42c23          	sw	a1,-40(s0)
60002854:	fcf41f23          	sh	a5,-34(s0)
60002858:	fd842783          	lw	a5,-40(s0)
6000285c:	00079e63          	bnez	a5,60002878 <prvAllocateTCBAndStack+0x3c>
60002860:	fde45783          	lhu	a5,-34(s0)
60002864:	00279793          	slli	a5,a5,0x2
60002868:	00078513          	mv	a0,a5
6000286c:	92dfe0ef          	jal	ra,60001198 <pvPortMalloc>
60002870:	00050793          	mv	a5,a0
60002874:	0080006f          	j	6000287c <prvAllocateTCBAndStack+0x40>
60002878:	fd842783          	lw	a5,-40(s0)
6000287c:	fef42423          	sw	a5,-24(s0)
60002880:	fe842783          	lw	a5,-24(s0)
60002884:	02078a63          	beqz	a5,600028b8 <prvAllocateTCBAndStack+0x7c>
60002888:	06000513          	li	a0,96
6000288c:	90dfe0ef          	jal	ra,60001198 <pvPortMalloc>
60002890:	fea42623          	sw	a0,-20(s0)
60002894:	fec42783          	lw	a5,-20(s0)
60002898:	00078a63          	beqz	a5,600028ac <prvAllocateTCBAndStack+0x70>
6000289c:	fec42783          	lw	a5,-20(s0)
600028a0:	fe842703          	lw	a4,-24(s0)
600028a4:	02e7a823          	sw	a4,48(a5)
600028a8:	0140006f          	j	600028bc <prvAllocateTCBAndStack+0x80>
600028ac:	fe842503          	lw	a0,-24(s0)
600028b0:	ac5fe0ef          	jal	ra,60001374 <vPortFree>
600028b4:	0080006f          	j	600028bc <prvAllocateTCBAndStack+0x80>
600028b8:	fe042623          	sw	zero,-20(s0)
600028bc:	fec42783          	lw	a5,-20(s0)
600028c0:	02078263          	beqz	a5,600028e4 <prvAllocateTCBAndStack+0xa8>
600028c4:	fec42783          	lw	a5,-20(s0)
600028c8:	0307a703          	lw	a4,48(a5)
600028cc:	fde45783          	lhu	a5,-34(s0)
600028d0:	00279793          	slli	a5,a5,0x2
600028d4:	00078613          	mv	a2,a5
600028d8:	0a500593          	li	a1,165
600028dc:	00070513          	mv	a0,a4
600028e0:	b90ff0ef          	jal	ra,60001c70 <memset>
600028e4:	fec42783          	lw	a5,-20(s0)
600028e8:	00078513          	mv	a0,a5
600028ec:	02c12083          	lw	ra,44(sp)
600028f0:	02812403          	lw	s0,40(sp)
600028f4:	03010113          	addi	sp,sp,48
600028f8:	00008067          	ret

600028fc <prvDeleteTCB>:
prvDeleteTCB():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
600028fc:	fe010113          	addi	sp,sp,-32
60002900:	00112e23          	sw	ra,28(sp)
60002904:	00812c23          	sw	s0,24(sp)
60002908:	02010413          	addi	s0,sp,32
6000290c:	fea42623          	sw	a0,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
60002910:	fec42783          	lw	a5,-20(s0)
60002914:	0307a783          	lw	a5,48(a5)
60002918:	00078513          	mv	a0,a5
6000291c:	a59fe0ef          	jal	ra,60001374 <vPortFree>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
60002920:	fec42503          	lw	a0,-20(s0)
60002924:	a51fe0ef          	jal	ra,60001374 <vPortFree>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3340
	}
60002928:	00000013          	nop
6000292c:	01c12083          	lw	ra,28(sp)
60002930:	01812403          	lw	s0,24(sp)
60002934:	02010113          	addi	sp,sp,32
60002938:	00008067          	ret

6000293c <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
6000293c:	fe010113          	addi	sp,sp,-32
60002940:	00812e23          	sw	s0,28(sp)
60002944:	02010413          	addi	s0,sp,32
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60002948:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <pxDelayedTaskList>
6000294c:	0007a783          	lw	a5,0(a5)
60002950:	00079663          	bnez	a5,6000295c <prvResetNextTaskUnblockTime+0x20>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
60002954:	00100793          	li	a5,1
60002958:	0080006f          	j	60002960 <prvResetNextTaskUnblockTime+0x24>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
6000295c:	00000793          	li	a5,0
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
60002960:	00078863          	beqz	a5,60002970 <prvResetNextTaskUnblockTime+0x34>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
60002964:	fff00713          	li	a4,-1
60002968:	8ee1a823          	sw	a4,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
6000296c:	0200006f          	j	6000298c <prvResetNextTaskUnblockTime+0x50>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
60002970:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <pxDelayedTaskList>
60002974:	00c7a783          	lw	a5,12(a5)
60002978:	00c7a783          	lw	a5,12(a5)
6000297c:	fef42623          	sw	a5,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
60002980:	fec42783          	lw	a5,-20(s0)
60002984:	0047a703          	lw	a4,4(a5)
60002988:	8ee1a823          	sw	a4,-1808(gp) # 800000f0 <xNextTaskUnblockTime>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3366
}
6000298c:	00000013          	nop
60002990:	01c12403          	lw	s0,28(sp)
60002994:	02010113          	addi	sp,sp,32
60002998:	00008067          	ret

6000299c <BasicIO_Init>:
BasicIO_Init():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:175
	GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_ON);
}

void clearLED2_RED() {
	GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_OFF);
}
6000299c:	fe010113          	addi	sp,sp,-32
600029a0:	00112e23          	sw	ra,28(sp)
600029a4:	00812c23          	sw	s0,24(sp)
600029a8:	02010413          	addi	s0,sp,32
600029ac:	fea42623          	sw	a0,-20(s0)
600029b0:	fec42783          	lw	a5,-20(s0)
600029b4:	1007e793          	ori	a5,a5,256
600029b8:	00200613          	li	a2,2
600029bc:	00078593          	mv	a1,a5
600029c0:	8f818513          	addi	a0,gp,-1800 # 800000f8 <g_gpio_in_PBs>
600029c4:	ba4fe0ef          	jal	ra,60000d68 <GPIO_init>
600029c8:	fec42783          	lw	a5,-20(s0)
600029cc:	1007e793          	ori	a5,a5,256
600029d0:	00200613          	li	a2,2
600029d4:	00078593          	mv	a1,a5
600029d8:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
600029dc:	b8cfe0ef          	jal	ra,60000d68 <GPIO_init>
600029e0:	00000593          	li	a1,0
600029e4:	8f818513          	addi	a0,gp,-1800 # 800000f8 <g_gpio_in_PBs>
600029e8:	f30fe0ef          	jal	ra,60001118 <GPIO_enable_irq>
600029ec:	00100593          	li	a1,1
600029f0:	8f818513          	addi	a0,gp,-1800 # 800000f8 <g_gpio_in_PBs>
600029f4:	f24fe0ef          	jal	ra,60001118 <GPIO_enable_irq>
600029f8:	00000613          	li	a2,0
600029fc:	00200593          	li	a1,2
60002a00:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002a04:	cd8fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002a08:	00000613          	li	a2,0
60002a0c:	00300593          	li	a1,3
60002a10:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002a14:	cc8fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002a18:	00000613          	li	a2,0
60002a1c:	00400593          	li	a1,4
60002a20:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002a24:	cb8fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002a28:	00000613          	li	a2,0
60002a2c:	00500593          	li	a1,5
60002a30:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002a34:	ca8fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002a38:	00100693          	li	a3,1
60002a3c:	01a00613          	li	a2,26
60002a40:	fec42583          	lw	a1,-20(s0)
60002a44:	90818513          	addi	a0,gp,-1784 # 80000108 <g_uart_term>
60002a48:	8a4fe0ef          	jal	ra,60000aec <UART_init>
60002a4c:	00000013          	nop
60002a50:	01c12083          	lw	ra,28(sp)
60002a54:	01812403          	lw	s0,24(sp)
60002a58:	02010113          	addi	sp,sp,32
60002a5c:	00008067          	ret

60002a60 <setLED1_GREEN>:
setLED1_GREEN():
60002a60:	ff010113          	addi	sp,sp,-16
60002a64:	00112623          	sw	ra,12(sp)
60002a68:	00812423          	sw	s0,8(sp)
60002a6c:	01010413          	addi	s0,sp,16
60002a70:	00100613          	li	a2,1
60002a74:	00200593          	li	a1,2
60002a78:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002a7c:	c60fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002a80:	00000013          	nop
60002a84:	00c12083          	lw	ra,12(sp)
60002a88:	00812403          	lw	s0,8(sp)
60002a8c:	01010113          	addi	sp,sp,16
60002a90:	00008067          	ret

60002a94 <clearLED1_GREEN>:
clearLED1_GREEN():
60002a94:	ff010113          	addi	sp,sp,-16
60002a98:	00112623          	sw	ra,12(sp)
60002a9c:	00812423          	sw	s0,8(sp)
60002aa0:	01010413          	addi	s0,sp,16
60002aa4:	00000613          	li	a2,0
60002aa8:	00200593          	li	a1,2
60002aac:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002ab0:	c2cfe0ef          	jal	ra,60000edc <GPIO_set_output>
60002ab4:	00000013          	nop
60002ab8:	00c12083          	lw	ra,12(sp)
60002abc:	00812403          	lw	s0,8(sp)
60002ac0:	01010113          	addi	sp,sp,16
60002ac4:	00008067          	ret

60002ac8 <setLED1_RED>:
setLED1_RED():
60002ac8:	ff010113          	addi	sp,sp,-16
60002acc:	00112623          	sw	ra,12(sp)
60002ad0:	00812423          	sw	s0,8(sp)
60002ad4:	01010413          	addi	s0,sp,16
60002ad8:	00100613          	li	a2,1
60002adc:	00300593          	li	a1,3
60002ae0:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002ae4:	bf8fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002ae8:	00000013          	nop
60002aec:	00c12083          	lw	ra,12(sp)
60002af0:	00812403          	lw	s0,8(sp)
60002af4:	01010113          	addi	sp,sp,16
60002af8:	00008067          	ret

60002afc <clearLED1_RED>:
clearLED1_RED():
60002afc:	ff010113          	addi	sp,sp,-16
60002b00:	00112623          	sw	ra,12(sp)
60002b04:	00812423          	sw	s0,8(sp)
60002b08:	01010413          	addi	s0,sp,16
60002b0c:	00000613          	li	a2,0
60002b10:	00300593          	li	a1,3
60002b14:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002b18:	bc4fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002b1c:	00000013          	nop
60002b20:	00c12083          	lw	ra,12(sp)
60002b24:	00812403          	lw	s0,8(sp)
60002b28:	01010113          	addi	sp,sp,16
60002b2c:	00008067          	ret

60002b30 <setLED2_GREEN>:
setLED2_GREEN():
60002b30:	ff010113          	addi	sp,sp,-16
60002b34:	00112623          	sw	ra,12(sp)
60002b38:	00812423          	sw	s0,8(sp)
60002b3c:	01010413          	addi	s0,sp,16
60002b40:	00100613          	li	a2,1
60002b44:	00400593          	li	a1,4
60002b48:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002b4c:	b90fe0ef          	jal	ra,60000edc <GPIO_set_output>
60002b50:	00000013          	nop
60002b54:	00c12083          	lw	ra,12(sp)
60002b58:	00812403          	lw	s0,8(sp)
60002b5c:	01010113          	addi	sp,sp,16
60002b60:	00008067          	ret

60002b64 <clearLED2_GREEN>:
clearLED2_GREEN():
60002b64:	ff010113          	addi	sp,sp,-16
60002b68:	00112623          	sw	ra,12(sp)
60002b6c:	00812423          	sw	s0,8(sp)
60002b70:	01010413          	addi	s0,sp,16
60002b74:	00000613          	li	a2,0
60002b78:	00400593          	li	a1,4
60002b7c:	90018513          	addi	a0,gp,-1792 # 80000100 <g_gpio_out_LEDs>
60002b80:	b5cfe0ef          	jal	ra,60000edc <GPIO_set_output>
60002b84:	00000013          	nop
60002b88:	00c12083          	lw	ra,12(sp)
60002b8c:	00812403          	lw	s0,8(sp)
60002b90:	01010113          	addi	sp,sp,16
60002b94:	00008067          	ret

60002b98 <UART_Tx_Msg>:
UART_Tx_Msg():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:179

// --- Terminal Functions ------------------------------------------------------

void UART_Tx_Msg(char* msg, uint8_t type) {
60002b98:	fe010113          	addi	sp,sp,-32
60002b9c:	00112e23          	sw	ra,28(sp)
60002ba0:	00812c23          	sw	s0,24(sp)
60002ba4:	02010413          	addi	s0,sp,32
60002ba8:	fea42623          	sw	a0,-20(s0)
60002bac:	00058793          	mv	a5,a1
60002bb0:	fef405a3          	sb	a5,-21(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:180
	if (type == 1) {
60002bb4:	feb44703          	lbu	a4,-21(s0)
60002bb8:	00100793          	li	a5,1
60002bbc:	00f71a63          	bne	a4,a5,60002bd0 <UART_Tx_Msg+0x38>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:181
		UART_polled_tx_string(BASIC_UART, (const uint8_t *) msg);
60002bc0:	fec42583          	lw	a1,-20(s0)
60002bc4:	90818513          	addi	a0,gp,-1784 # 80000108 <g_uart_term>
60002bc8:	8f0fe0ef          	jal	ra,60000cb8 <UART_polled_tx_string>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:185
	} else {
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
	}
}
60002bcc:	0140006f          	j	60002be0 <UART_Tx_Msg+0x48>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:183
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
60002bd0:	00100613          	li	a2,1
60002bd4:	fec42583          	lw	a1,-20(s0)
60002bd8:	90818513          	addi	a0,gp,-1784 # 80000108 <g_uart_term>
60002bdc:	828fe0ef          	jal	ra,60000c04 <UART_send>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:185
}
60002be0:	00000013          	nop
60002be4:	01c12083          	lw	ra,28(sp)
60002be8:	01812403          	lw	s0,24(sp)
60002bec:	02010113          	addi	sp,sp,32
60002bf0:	00008067          	ret

60002bf4 <PLIC_init>:
PLIC_init():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:206 (discriminator 1)

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for(;;);
60002bf4:	fe010113          	addi	sp,sp,-32
60002bf8:	00812e23          	sw	s0,28(sp)
60002bfc:	02010413          	addi	s0,sp,32
60002c00:	f14027f3          	csrr	a5,mhartid
60002c04:	fef42423          	sw	a5,-24(s0)
60002c08:	fe842783          	lw	a5,-24(s0)
60002c0c:	fef42223          	sw	a5,-28(s0)
60002c10:	fe042623          	sw	zero,-20(s0)
60002c14:	03c0006f          	j	60002c50 <PLIC_init+0x5c>
60002c18:	40000737          	lui	a4,0x40000
60002c1c:	fe442783          	lw	a5,-28(s0)
60002c20:	00579693          	slli	a3,a5,0x5
60002c24:	fec42783          	lw	a5,-20(s0)
60002c28:	00f686b3          	add	a3,a3,a5
60002c2c:	000017b7          	lui	a5,0x1
60002c30:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60002c34:	00f687b3          	add	a5,a3,a5
60002c38:	00279793          	slli	a5,a5,0x2
60002c3c:	00f707b3          	add	a5,a4,a5
60002c40:	0007a023          	sw	zero,0(a5)
60002c44:	fec42783          	lw	a5,-20(s0)
60002c48:	00178793          	addi	a5,a5,1
60002c4c:	fef42623          	sw	a5,-20(s0)
60002c50:	fec42783          	lw	a5,-20(s0)
60002c54:	fc0782e3          	beqz	a5,60002c18 <PLIC_init+0x24>
60002c58:	fe042623          	sw	zero,-20(s0)
60002c5c:	0240006f          	j	60002c80 <PLIC_init+0x8c>
60002c60:	40000737          	lui	a4,0x40000
60002c64:	fec42783          	lw	a5,-20(s0)
60002c68:	00279793          	slli	a5,a5,0x2
60002c6c:	00f707b3          	add	a5,a4,a5
60002c70:	0007a023          	sw	zero,0(a5)
60002c74:	fec42783          	lw	a5,-20(s0)
60002c78:	00178793          	addi	a5,a5,1
60002c7c:	fef42623          	sw	a5,-20(s0)
60002c80:	fec42703          	lw	a4,-20(s0)
60002c84:	01e00793          	li	a5,30
60002c88:	fce7fce3          	bleu	a4,a5,60002c60 <PLIC_init+0x6c>
60002c8c:	40000737          	lui	a4,0x40000
60002c90:	fe442783          	lw	a5,-28(s0)
60002c94:	20078793          	addi	a5,a5,512
60002c98:	00c79793          	slli	a5,a5,0xc
60002c9c:	00f707b3          	add	a5,a4,a5
60002ca0:	0007a023          	sw	zero,0(a5)
60002ca4:	000017b7          	lui	a5,0x1
60002ca8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60002cac:	3047a7f3          	csrrs	a5,mie,a5
60002cb0:	fef42023          	sw	a5,-32(s0)
60002cb4:	00000013          	nop
60002cb8:	01c12403          	lw	s0,28(sp)
60002cbc:	02010113          	addi	sp,sp,32
60002cc0:	00008067          	ret

60002cc4 <External_31_IRQHandler>:
External_31_IRQHandler():
60002cc4:	ff010113          	addi	sp,sp,-16
60002cc8:	00812623          	sw	s0,12(sp)
60002ccc:	01010413          	addi	s0,sp,16
60002cd0:	00000013          	nop
60002cd4:	00c12403          	lw	s0,12(sp)
60002cd8:	01010113          	addi	sp,sp,16
60002cdc:	00008067          	ret

60002ce0 <External_30_IRQHandler>:
External_30_IRQHandler():
60002ce0:	ff010113          	addi	sp,sp,-16
60002ce4:	00812623          	sw	s0,12(sp)
60002ce8:	01010413          	addi	s0,sp,16
60002cec:	00000013          	nop
60002cf0:	00c12403          	lw	s0,12(sp)
60002cf4:	01010113          	addi	sp,sp,16
60002cf8:	00008067          	ret

60002cfc <External_29_IRQHandler>:
External_29_IRQHandler():
60002cfc:	ff010113          	addi	sp,sp,-16
60002d00:	00812623          	sw	s0,12(sp)
60002d04:	01010413          	addi	s0,sp,16
60002d08:	00000013          	nop
60002d0c:	00c12403          	lw	s0,12(sp)
60002d10:	01010113          	addi	sp,sp,16
60002d14:	00008067          	ret

60002d18 <main>:
main():
60002d18:	ff010113          	addi	sp,sp,-16
60002d1c:	00112623          	sw	ra,12(sp)
60002d20:	00812423          	sw	s0,8(sp)
60002d24:	01010413          	addi	s0,sp,16
60002d28:	ecdff0ef          	jal	ra,60002bf4 <PLIC_init>
60002d2c:	70000537          	lui	a0,0x70000
60002d30:	c6dff0ef          	jal	ra,6000299c <BasicIO_Init>
60002d34:	800007b7          	lui	a5,0x80000
60002d38:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4e30>
60002d3c:	00100593          	li	a1,1
60002d40:	00078513          	mv	a0,a5
60002d44:	e55ff0ef          	jal	ra,60002b98 <UART_Tx_Msg>
60002d48:	8141a783          	lw	a5,-2028(gp) # 80000014 <g_MSG_DEMO>
60002d4c:	00100593          	li	a1,1
60002d50:	00078513          	mv	a0,a5
60002d54:	e45ff0ef          	jal	ra,60002b98 <UART_Tx_Msg>
60002d58:	00000893          	li	a7,0
60002d5c:	00000813          	li	a6,0
60002d60:	00000793          	li	a5,0
60002d64:	00100713          	li	a4,1
60002d68:	00000693          	li	a3,0
60002d6c:	3e800613          	li	a2,1000
60002d70:	600035b7          	lui	a1,0x60003
60002d74:	fac58593          	addi	a1,a1,-84 # 60002fac <vLEDTestTask3+0x124>
60002d78:	60003537          	lui	a0,0x60003
60002d7c:	e2850513          	addi	a0,a0,-472 # 60002e28 <vLEDTestTask1>
60002d80:	fd9fe0ef          	jal	ra,60001d58 <xTaskGenericCreate>
60002d84:	00000893          	li	a7,0
60002d88:	00000813          	li	a6,0
60002d8c:	00000793          	li	a5,0
60002d90:	00300713          	li	a4,3
60002d94:	00000693          	li	a3,0
60002d98:	3e800613          	li	a2,1000
60002d9c:	600035b7          	lui	a1,0x60003
60002da0:	fb458593          	addi	a1,a1,-76 # 60002fb4 <vLEDTestTask3+0x12c>
60002da4:	60003537          	lui	a0,0x60003
60002da8:	e5850513          	addi	a0,a0,-424 # 60002e58 <vLEDTestTask2>
60002dac:	fadfe0ef          	jal	ra,60001d58 <xTaskGenericCreate>
60002db0:	00000893          	li	a7,0
60002db4:	00000813          	li	a6,0
60002db8:	00000793          	li	a5,0
60002dbc:	00200713          	li	a4,2
60002dc0:	00000693          	li	a3,0
60002dc4:	3e800613          	li	a2,1000
60002dc8:	600035b7          	lui	a1,0x60003
60002dcc:	fbc58593          	addi	a1,a1,-68 # 60002fbc <vLEDTestTask3+0x134>
60002dd0:	60003537          	lui	a0,0x60003
60002dd4:	e8850513          	addi	a0,a0,-376 # 60002e88 <vLEDTestTask3>
60002dd8:	f81fe0ef          	jal	ra,60001d58 <xTaskGenericCreate>
60002ddc:	a1cff0ef          	jal	ra,60001ff8 <vTaskStartScheduler>
60002de0:	00000793          	li	a5,0
60002de4:	00078513          	mv	a0,a5
60002de8:	00c12083          	lw	ra,12(sp)
60002dec:	00812403          	lw	s0,8(sp)
60002df0:	01010113          	addi	sp,sp,16
60002df4:	00008067          	ret

60002df8 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
60002df8:	ff010113          	addi	sp,sp,-16
60002dfc:	00812623          	sw	s0,12(sp)
60002e00:	01010413          	addi	s0,sp,16
60002e04:	30047073          	csrci	mstatus,8
60002e08:	0000006f          	j	60002e08 <vApplicationMallocFailedHook+0x10>

60002e0c <vApplicationIdleHook>:
vApplicationIdleHook():
60002e0c:	ff010113          	addi	sp,sp,-16
60002e10:	00812623          	sw	s0,12(sp)
60002e14:	01010413          	addi	s0,sp,16
60002e18:	00000013          	nop
60002e1c:	00c12403          	lw	s0,12(sp)
60002e20:	01010113          	addi	sp,sp,16
60002e24:	00008067          	ret

60002e28 <vLEDTestTask1>:
vLEDTestTask1():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:212
}


/*-----------------------------------------------------------*/

static void vLEDTestTask1(void *pvParameters) {
60002e28:	fe010113          	addi	sp,sp,-32
60002e2c:	00112e23          	sw	ra,28(sp)
60002e30:	00812c23          	sw	s0,24(sp)
60002e34:	02010413          	addi	s0,sp,32
60002e38:	fea42623          	sw	a0,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:217 (discriminator 1)

	(void) pvParameters;

	for(;;)	{
		setLED2_GREEN();
60002e3c:	cf5ff0ef          	jal	ra,60002b30 <setLED2_GREEN>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:218 (discriminator 1)
	  vTaskDelay(13);
60002e40:	00d00513          	li	a0,13
60002e44:	930ff0ef          	jal	ra,60001f74 <vTaskDelay>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:219 (discriminator 1)
	  clearLED2_GREEN();
60002e48:	d1dff0ef          	jal	ra,60002b64 <clearLED2_GREEN>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:220 (discriminator 1)
	  vTaskDelay(13);
60002e4c:	00d00513          	li	a0,13
60002e50:	924ff0ef          	jal	ra,60001f74 <vTaskDelay>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:217 (discriminator 1)
		setLED2_GREEN();
60002e54:	fe9ff06f          	j	60002e3c <vLEDTestTask1+0x14>

60002e58 <vLEDTestTask2>:
vLEDTestTask2():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:224
	}
}

static void vLEDTestTask2(void *pvParameters) {
60002e58:	fe010113          	addi	sp,sp,-32
60002e5c:	00112e23          	sw	ra,28(sp)
60002e60:	00812c23          	sw	s0,24(sp)
60002e64:	02010413          	addi	s0,sp,32
60002e68:	fea42623          	sw	a0,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:229 (discriminator 1)

	(void) pvParameters;

	for(;;)	{
		setLED1_RED();
60002e6c:	c5dff0ef          	jal	ra,60002ac8 <setLED1_RED>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:230 (discriminator 1)
	  vTaskDelay(4);
60002e70:	00400513          	li	a0,4
60002e74:	900ff0ef          	jal	ra,60001f74 <vTaskDelay>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:231 (discriminator 1)
	  clearLED1_RED();
60002e78:	c85ff0ef          	jal	ra,60002afc <clearLED1_RED>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:232 (discriminator 1)
	  vTaskDelay(4);
60002e7c:	00400513          	li	a0,4
60002e80:	8f4ff0ef          	jal	ra,60001f74 <vTaskDelay>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:229 (discriminator 1)
		setLED1_RED();
60002e84:	fe9ff06f          	j	60002e6c <vLEDTestTask2+0x14>

60002e88 <vLEDTestTask3>:
vLEDTestTask3():
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:237
	}
}


static void vLEDTestTask3(void *pvParameters) {
60002e88:	fe010113          	addi	sp,sp,-32
60002e8c:	00112e23          	sw	ra,28(sp)
60002e90:	00812c23          	sw	s0,24(sp)
60002e94:	02010413          	addi	s0,sp,32
60002e98:	fea42623          	sw	a0,-20(s0)
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:242 (discriminator 1)

	(void) pvParameters;

	for(;;)	{
		setLED1_GREEN();
60002e9c:	bc5ff0ef          	jal	ra,60002a60 <setLED1_GREEN>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:243 (discriminator 1)
	  vTaskDelay(10);
60002ea0:	00a00513          	li	a0,10
60002ea4:	8d0ff0ef          	jal	ra,60001f74 <vTaskDelay>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:244 (discriminator 1)
	  clearLED1_GREEN();
60002ea8:	bedff0ef          	jal	ra,60002a94 <clearLED1_GREEN>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:245 (discriminator 1)
	  vTaskDelay(10);
60002eac:	00a00513          	li	a0,10
60002eb0:	8c4ff0ef          	jal	ra,60001f74 <vTaskDelay>
D:\Work\SoftConsole6\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:242 (discriminator 1)
		setLED1_GREEN();
60002eb4:	fe9ff06f          	j	60002e9c <vLEDTestTask3+0x14>
	...
60002ec0:	6568                	flw	fa0,76(a0)
60002ec2:	6c6c                	flw	fa1,92(s0)
60002ec4:	0000006f          	j	60002ec4 <vLEDTestTask3+0x3c>
60002ec8:	4449                	li	s0,18
60002eca:	454c                	lw	a1,12(a0)
60002ecc:	0000                	unimp
60002ece:	0000                	unimp
60002ed0:	0d0a                	slli	s10,s10,0x2
60002ed2:	4328                	lw	a0,64(a4)
60002ed4:	2029                	jal	60002ede <vLEDTestTask3+0x56>
60002ed6:	79706f43          	fmadd.s	ft10,ft0,fs7,fa5,unknown
60002eda:	6972                	flw	fs2,28(sp)
60002edc:	20746867          	0x20746867
60002ee0:	3032                	fld	ft0,296(sp)
60002ee2:	3931                	jal	60002afe <clearLED1_RED+0x2>
60002ee4:	4620                	lw	s0,72(a2)
60002ee6:	7475                	lui	s0,0xffffd
60002ee8:	7275                	lui	tp,0xffffd
60002eea:	2065                	jal	60002f92 <vLEDTestTask3+0x10a>
60002eec:	6c45                	lui	s8,0x11
60002eee:	6365                	lui	t1,0x19
60002ef0:	7274                	flw	fa3,100(a2)
60002ef2:	63696e6f          	jal	t3,60099528 <__data_load+0x96538>
60002ef6:	202d2073          	csrs	hedeleg,s10
60002efa:	61657243          	fmadd.s	ft4,fa0,fs6,fa2
60002efe:	6974                	flw	fa3,84(a0)
60002f00:	6576                	flw	fa0,92(sp)
60002f02:	4220                	lw	s0,64(a2)
60002f04:	6472616f          	jal	sp,60029d4a <__data_load+0x26d5a>
60002f08:	0d0a                	slli	s10,s10,0x2
60002f0a:	0000                	unimp
60002f0c:	0d0a                	slli	s10,s10,0x2
60002f0e:	7246                	flw	ft4,112(sp)
60002f10:	6565                	lui	a0,0x19
60002f12:	5452                	lw	s0,52(sp)
60002f14:	5320534f          	fnmadd.d	ft6,ft0,fs2,fa0,unknown
60002f18:	6d69                	lui	s10,0x1a
60002f1a:	6c70                	flw	fa2,92(s0)
60002f1c:	2065                	jal	60002fc4 <vLEDTestTask3+0x13c>
60002f1e:	6544                	flw	fs1,12(a0)
60002f20:	6f6d                	lui	t5,0x1b
60002f22:	0d0a                	slli	s10,s10,0x2
60002f24:	2020                	fld	fs0,64(s0)
60002f26:	6854                	flw	fa3,20(s0)
60002f28:	7369                	lui	t1,0xffffa
60002f2a:	6420                	flw	fs0,72(s0)
60002f2c:	6d65                	lui	s10,0x19
60002f2e:	7263206f          	j	60035654 <__data_load+0x32664>
60002f32:	6165                	addi	sp,sp,112
60002f34:	6574                	flw	fa3,76(a0)
60002f36:	20332073          	csrs	hideleg,t1
60002f3a:	6c62                	flw	fs8,24(sp)
60002f3c:	6e69                	lui	t3,0x1a
60002f3e:	676e696b          	0x676e696b
60002f42:	4c20                	lw	s0,88(s0)
60002f44:	4445                	li	s0,17
60002f46:	7420                	flw	fs0,104(s0)
60002f48:	7361                	lui	t1,0xffff8
60002f4a:	6120736b          	0x6120736b
60002f4e:	646e                	flw	fs0,216(sp)
60002f50:	6120                	flw	fs0,64(a0)
60002f52:	76697463          	bleu	t1,s2,600036ba <__data_load+0x6ca>
60002f56:	7461                	lui	s0,0xffff8
60002f58:	2065                	jal	60003000 <__data_load+0x10>
60002f5a:	6874                	flw	fa3,84(s0)
60002f5c:	2065                	jal	60003004 <__data_load+0x14>
60002f5e:	7246                	flw	ft4,112(sp)
60002f60:	6565                	lui	a0,0x19
60002f62:	5452                	lw	s0,52(sp)
60002f64:	0d0a534f          	0xd0a534f
60002f68:	2020                	fld	fs0,64(s0)
60002f6a:	65686373          	csrrsi	t1,0x656,16
60002f6e:	7564                	flw	fs1,108(a0)
60002f70:	656c                	flw	fa1,76(a0)
60002f72:	2e72                	fld	ft8,280(sp)
60002f74:	4c20                	lw	s0,88(s0)
60002f76:	4445                	li	s0,17
60002f78:	2031                	jal	60002f84 <vLEDTestTask3+0xfc>
60002f7a:	6552                	flw	fa0,20(sp)
60002f7c:	2c64                	fld	fs1,216(s0)
60002f7e:	4c20                	lw	s0,88(s0)
60002f80:	4445                	li	s0,17
60002f82:	2032                	fld	ft0,264(sp)
60002f84:	65657247          	0x65657247
60002f88:	206e                	fld	ft0,216(sp)
60002f8a:	6e61                	lui	t3,0x18
60002f8c:	2064                	fld	fs1,192(s0)
60002f8e:	6552                	flw	fa0,20(sp)
60002f90:	2064                	fld	fs1,192(s0)
60002f92:	756f6873          	csrrsi	a6,0x756,30
60002f96:	646c                	flw	fa1,76(s0)
60002f98:	7320                	flw	fs0,96(a4)
60002f9a:	6174                	flw	fa3,68(a0)
60002f9c:	7472                	flw	fs0,60(sp)
60002f9e:	6220                	flw	fs0,64(a2)
60002fa0:	696c                	flw	fa1,84(a0)
60002fa2:	6b6e                	flw	fs6,216(sp)
60002fa4:	6e69                	lui	t3,0x1a
60002fa6:	0d0a2e67          	0xd0a2e67
60002faa:	0000                	unimp
60002fac:	454c                	lw	a1,12(a0)
60002fae:	3144                	fld	fs1,160(a0)
60002fb0:	0000                	unimp
60002fb2:	0000                	unimp
60002fb4:	454c                	lw	a1,12(a0)
60002fb6:	3244                	fld	fs1,160(a2)
60002fb8:	0000                	unimp
60002fba:	0000                	unimp
60002fbc:	454c                	lw	a1,12(a0)
60002fbe:	3344                	fld	fs1,160(a4)
	...
