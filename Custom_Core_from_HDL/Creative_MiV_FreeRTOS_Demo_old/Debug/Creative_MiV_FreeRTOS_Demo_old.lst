
Creative_MiV_FreeRTOS_Demo_old.elf:     file format elf32-littleriscv
Creative_MiV_FreeRTOS_Demo_old.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x60000000

Program Header:
    LOAD off    0x00001000 vaddr 0x60000000 paddr 0x60000000 align 2**12
         filesz 0x000040f0 memsz 0x000040f0 flags r-x
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x600040f0 align 2**12
         filesz 0x00000100 memsz 0x00000180 flags rw-
    LOAD off    0x00006180 vaddr 0x80000180 paddr 0x600041f0 align 2**12
         filesz 0x00000000 memsz 0x000190d0 flags rw-
    LOAD off    0x00006250 vaddr 0x80019250 paddr 0x600041f0 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00006250 vaddr 0x8001a250 paddr 0x600041f0 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .text             000040f0  60000000  60000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata            00000020  80000000  600040f0  00006000  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data             000000e0  80000020  60004110  00006020  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss             00000080  80000100  600041f0  00006100  2**4  ALLOC
  4 .bss              000190d0  80000180  600041f0  00006180  2**4  ALLOC
  5 .heap             00001000  80019250  600041f0  00006250  2**4  ALLOC
  6 .stack            00001000  8001a250  600041f0  00006250  2**4  ALLOC
  7 .riscv.attributes 0000001f  00000000  00000000  00006100  2**0  CONTENTS, READONLY
  8 .comment          00000043  00000000  00000000  0000611f  2**0  CONTENTS, READONLY
  9 .debug_line       000093c4  00000000  00000000  00006162  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info       00009d39  00000000  00000000  0000f526  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev     00001ef9  00000000  00000000  0001925f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges    000007c0  00000000  00000000  0001b158  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00012ab9  00000000  00000000  0001b918  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges     000006a0  00000000  00000000  0002e3d1  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro      00004fc6  00000000  00000000  0002ea71  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame      00001ee8  00000000  00000000  00033a38  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
60000000 l    d  .text	00000000 .text
80000000 l    d  .sdata	00000000 .sdata
80000020 l    d  .data	00000000 .data
80000100 l    d  .sbss	00000000 .sbss
80000180 l    d  .bss	00000000 .bss
80019250 l    d  .heap	00000000 .heap
8001a250 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
6000000c l       .text	00000000 handle_reset
60000004 l       .text	00000000 nmi_vector
60000008 l       .text	00000000 trap_vector
60000034 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
60000160 l     F .text	00000060 copy_section
600001c0 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
600002c4 l     F .text	000000b8 PLIC_DisableIRQ
6000037c l     F .text	00000044 PLIC_ClaimIRQ
600003c0 l     F .text	0000004c PLIC_CompleteIRQ
80000100 l     O .sbss	00000008 g_systick_increment
60000430 l     F .text	000000a8 handle_m_timer_interrupt
600004d8 l     F .text	00000070 handle_m_ext_interrupt
60000548 l     F .text	00000030 handle_m_soft_interrupt
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80000000 l     O .sdata	00000004 curbrk.3729
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 core_gpio.c
00000000 l    df *ABS*	00000000 ADD2.c
00000000 l    df *ABS*	00000000 heap_2.c
80000180 l     O .bss	00019000 ucHeap
80000108 l     O .sbss	00000008 xStart
80000110 l     O .sbss	00000008 xEnd
80000004 l     O .sdata	00000004 xFreeBytesRemaining
80000118 l     O .sbss	00000004 xHeapHasBeenInitialised.2779
6000166c l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
600016e0 l     F .text	0000004c raise_soft_interrupt
80000008 l     O .sdata	00000004 uxCriticalNesting
8000000c l     O .sdata	00000004 mtime
80000010 l     O .sdata	00000004 mtimecmp
600017a0 l     F .text	000000cc prvSetNextTimerInterrupt
60001938 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80019180 l     O .bss	00000064 pxReadyTasksLists
800191e4 l     O .bss	00000014 xDelayedTaskList1
800191f8 l     O .bss	00000014 xDelayedTaskList2
80000124 l     O .sbss	00000004 pxDelayedTaskList
80000128 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001920c l     O .bss	00000014 xPendingReadyList
80019220 l     O .bss	00000014 xTasksWaitingTermination
8000012c l     O .sbss	00000004 uxTasksDeleted
80019234 l     O .bss	00000014 xSuspendedTaskList
80000130 l     O .sbss	00000004 uxCurrentNumberOfTasks
80000134 l     O .sbss	00000004 xTickCount
80000138 l     O .sbss	00000004 uxTopReadyPriority
8000013c l     O .sbss	00000004 xSchedulerRunning
80000140 l     O .sbss	00000004 uxPendedTicks
80000144 l     O .sbss	00000004 xYieldPending
80000148 l     O .sbss	00000004 xNumOfOverflows
8000014c l     O .sbss	00000004 uxTaskNumber
80000150 l     O .sbss	00000004 xNextTaskUnblockTime
80000154 l     O .sbss	00000004 uxSchedulerSuspended
60002b34 l     F .text	000000c0 prvAllocateTCBAndStack
60002814 l     F .text	00000138 prvInitialiseTCBVariables
6000294c l     F .text	000000c0 prvInitialiseTaskLists
60002c34 l     F .text	00000060 prvResetNextTaskUnblockTime
60002aac l     F .text	00000088 prvAddCurrentTaskToDelayedList
600027e0 l     F .text	00000034 prvIdleTask
60002a0c l     F .text	000000a0 prvCheckTasksWaitingTermination
60002bf4 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 BasicIO.c
80000158 l     O .sbss	00000008 g_gpio_in_PBs
80000160 l     O .sbss	00000008 g_gpio_out_LEDs
80000168 l     O .sbss	00000008 g_uart_term
00000000 l    df *ABS*	00000000 main.c
60002e1c l     F .text	000000d0 PLIC_init
80000170 l     O .sbss	00000004 add2_inst
60003098 l     F .text	00000030 vLEDTestTask1
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
800000a0 l     O .data	00000060 impure_data
60003f78 g     F .text	0000001c _malloc_usable_size_r
60001760 g     F .text	00000040 vPortExitCritical
00001000 g       *ABS*	00000000 STACK_SIZE
600007d4  w    F .text	00000020 External_11_IRQHandler
80000800 g       .sdata	00000000 __global_pointer$
60003f74 g     F .text	00000004 __malloc_unlock
60004110 g       *ABS*	00000000 __data_load
600019f8 g     F .text	000000cc SysTick_Handler
60000714  w    F .text	00000020 External_5_IRQHandler
60000b68 g       .text	00000000 HW_get_8bit_reg_field
60003be0 g     F .text	0000005c memmove
80000120 g     O .sbss	00000004 pxCurrentTCB
80000100 g       .sbss	00000000 __sbss_start
80019248 g     O .bss	00000004 errno
60000aa0 g       .text	00000000 HW_set_32bit_reg
60002c94 g     F .text	000000c4 BasicIO_Init
600008f4  w    F .text	00000020 External_20_IRQHandler
60001ac4 g     F .text	00000044 xPortStartScheduler
6000040c g     F .text	00000024 __enable_irq
60001e9c g     F .text	000000cc memcpy
60002050 g     F .text	0000021c xTaskGenericCreate
600032a4 g     F .text	0000039c _svfprintf_r
80000000 g       .sdata	00000000 __sdata_start
60001280 g     F .text	00000048 set_A
600015a0 g     F .text	000000cc vPortFree
60000b40 g       .text	00000000 HW_set_8bit_reg_field
600009b4  w    F .text	00000020 External_26_IRQHandler
60000578 g     F .text	000000fc handle_trap
60001ca8 g     F .text	00000088 vListInsertEnd
00100000 g       *ABS*	00000000 RAM_SIZE
600007b4  w    F .text	00000020 External_10_IRQHandler
60003f24 g     F .text	0000004c _sbrk_r
60001c80 g     F .text	00000028 vListInitialiseItem
60002f08 g     F .text	0000001c External_30_IRQHandler
60000894  w    F .text	00000020 External_17_IRQHandler
8001a250 g       .heap	00000000 _heap_end
60003e8c g     F .text	00000098 _realloc_r
80019250 g       .bss	00000000 __bss_end
60000a14 g     F .text	0000008c _sbrk
600013c4 g     F .text	000001dc pvPortMalloc
60000210 g     F .text	00000098 _init
600012c8 g     F .text	0000004c set_B
60001c1c g     F .text	00000064 vListInitialise
60000b30 g       .text	00000000 HW_set_8bit_reg
60000b38 g       .text	00000000 HW_get_8bit_reg
6000119c g     F .text	00000080 GPIO_enable_irq
80000180 g       .sbss	00000000 __sbss_end
60000ab0 g       .text	00000000 HW_set_32bit_reg_field
60003068 g     F .text	00000014 vApplicationMallocFailedHook
60000994  w    F .text	00000020 External_25_IRQHandler
8001b250 g       .stack	00000000 __stack_top
60002f24 g     F .text	0000001c External_29_IRQHandler
60000d44 g     F .text	000000b0 UART_polled_tx_string
6000313c g     F .text	00000168 __ssputs_r
60000814  w    F .text	00000020 External_13_IRQHandler
600006b4  w    F .text	00000020 External_2_IRQHandler
00001000 g       *ABS*	00000000 HEAP_SIZE
600007f4  w    F .text	00000020 External_12_IRQHandler
60003bbc g     F .text	00000024 memchr
60003c3c g     F .text	00000104 _free_r
60000c90 g     F .text	000000b4 UART_send
60000000 g       .text	00000000 _start
60002380 g     F .text	00000028 vTaskSuspendAll
60001e04 g     F .text	00000098 uxListRemove
600040f0 g       *ABS*	00000000 __sdata_load
80000100 g       .data	00000000 __data_end
60002d8c g     F .text	00000034 clearLED2_GREEN
6000121c g     F .text	00000064 ADD2_init
600026f4 g     F .text	000000ec vTaskSwitchContext
600008b4  w    F .text	00000020 External_18_IRQHandler
60000ad8 g       .text	00000000 HW_get_32bit_reg_field
60000df4 g     F .text	00000170 GPIO_init
60000934  w    F .text	00000020 External_22_IRQHandler
60000854  w    F .text	00000020 External_15_IRQHandler
60001bf4 g     F .text	00000028 vPortYield
60003f70 g     F .text	00000004 __malloc_lock
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80000180 g       .bss	00000000 __bss_start
60000874  w    F .text	00000020 External_16_IRQHandler
60001f68 g     F .text	000000e8 memset
60002f40 g     F .text	00000128 main
60001d30 g     F .text	000000d4 vListInsert
600009f4  w    F .text	00000020 External_28_IRQHandler
60003d40 g     F .text	0000014c _malloc_r
60000af0 g       .text	00000000 HW_get_16bit_reg
80000020 g       .sdata	00000000 __sdata_end
8001a250 g       .heap	00000000 __heap_end
60000834  w    F .text	00000020 External_14_IRQHandler
600002a8 g     F .text	0000001c _fini
60002dc0 g     F .text	0000005c UART_Tx_Msg
60002d58 g     F .text	00000034 setLED2_GREEN
600023a8 g     F .text	00000160 xTaskResumeAll
600030c8 g     F .text	00000074 sprintf
600022f0 g     F .text	00000090 vTaskStartScheduler
80000020 g     O .data	00000080 ext_irq_handler_table
60000af8 g       .text	00000000 HW_set_16bit_reg_field
60003640 g     F .text	000001b0 _printf_common
80000018 g     O .sdata	00000004 _impure_ptr
8001a250 g       .stack	00000000 __stack_bottom
60001b08 g     F .text	000000ec Software_IRQHandler
600009d4  w    F .text	00000020 External_27_IRQHandler
600032a4 g     F .text	0000039c _svfiprintf_r
60000774  w    F .text	00000020 External_8_IRQHandler
60000794  w    F .text	00000020 External_9_IRQHandler
80019250 g       .heap	00000000 __heap_start
60000674  w    F .text	00000020 Invalid_IRQHandler
600006d4  w    F .text	00000020 External_3_IRQHandler
60002508 g     F .text	000001ec xTaskIncrementTick
8000011c g     O .sbss	00000004 g_startscheduler
600008d4  w    F .text	00000020 External_19_IRQHandler
80019250 g       .bss	00000000 _end
6000186c g     F .text	000000cc vPortSetupTimer
60001314 g     F .text	000000b0 get_ABX
6000226c g     F .text	00000084 vTaskDelay
60000b78 g     F .text	00000118 UART_init
600030c8 g     F .text	00000074 siprintf
60000aa8 g       .text	00000000 HW_get_32bit_reg
80000014 g     O .sdata	00000004 Checking
60000ae8 g       .text	00000000 HW_set_16bit_reg
60001964 g     F .text	00000094 pxPortInitialiseStack
600037f0 g     F .text	000003cc _printf_i
60000694  w    F .text	00000020 External_1_IRQHandler
60000734  w    F .text	00000020 External_6_IRQHandler
80000178 g     O .sbss	00000004 __malloc_sbrk_start
60002eec g     F .text	0000001c External_31_IRQHandler
6000172c g     F .text	00000034 vPortEnterCritical
80000020 g       .data	00000000 __data_start
80000174 g     O .sbss	00000004 __malloc_free_list
60000914  w    F .text	00000020 External_21_IRQHandler
60000b20 g       .text	00000000 HW_get_16bit_reg_field
60000954  w    F .text	00000020 External_23_IRQHandler
60000974  w    F .text	00000020 External_24_IRQHandler
60000f64 g     F .text	00000238 GPIO_set_output
600006f4  w    F .text	00000020 External_4_IRQHandler
60000754  w    F .text	00000020 External_7_IRQHandler
6000307c g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

60000000 <_start>:
_start():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
60000000:	00c0006f          	j	6000000c <handle_reset>

60000004 <nmi_vector>:
nmi_vector():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
60000004:	0000006f          	j	60000004 <nmi_vector>

60000008 <trap_vector>:
trap_vector():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
60000008:	02c0006f          	j	60000034 <trap_entry>

6000000c <handle_reset>:
handle_reset():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
6000000c:	00000297          	auipc	t0,0x0
60000010:	02828293          	addi	t0,t0,40 # 60000034 <trap_entry>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
60000014:	30529073          	csrw	mtvec,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
60000018:	30005073          	csrwi	mstatus,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
6000001c:	30405073          	csrwi	mie,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:64

# Ensure the instruction is not optimized, since gp is not yet set

.option norelax
  # initialize global pointer
  la gp, __global_pointer$
60000020:	20000197          	auipc	gp,0x20000
60000024:	7e018193          	addi	gp,gp,2016 # 80000800 <__global_pointer$>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:69

.option pop

  # initialize stack pointer
  la sp, __stack_top
60000028:	2001b117          	auipc	sp,0x2001b
6000002c:	22810113          	addi	sp,sp,552 # 8001b250 <__stack_top>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:72

  # perform the rest of initialization in C
  j _init
60000030:	1e00006f          	j	60000210 <_init>

60000034 <trap_entry>:
trap_entry():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:76


trap_entry:
  addi sp, sp, -32*REGBYTES
60000034:	f8010113          	addi	sp,sp,-128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:78

  SREG x1, 0 * REGBYTES(sp)
60000038:	00112023          	sw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:79
  SREG x2, 1 * REGBYTES(sp)
6000003c:	00212223          	sw	sp,4(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:80
  SREG x3, 2 * REGBYTES(sp)
60000040:	00312423          	sw	gp,8(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:81
  SREG x4, 3 * REGBYTES(sp)
60000044:	00412623          	sw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:82
  SREG x5, 4 * REGBYTES(sp)
60000048:	00512823          	sw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:83
  SREG x6, 5 * REGBYTES(sp)
6000004c:	00612a23          	sw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:84
  SREG x7, 6 * REGBYTES(sp)
60000050:	00712c23          	sw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:85
  SREG x8, 7 * REGBYTES(sp)
60000054:	00812e23          	sw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:86
  SREG x9, 8 * REGBYTES(sp)
60000058:	02912023          	sw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:87
  SREG x10, 9 * REGBYTES(sp)
6000005c:	02a12223          	sw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:88
  SREG x11, 10 * REGBYTES(sp)
60000060:	02b12423          	sw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:89
  SREG x12, 11 * REGBYTES(sp)
60000064:	02c12623          	sw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:90
  SREG x13, 12 * REGBYTES(sp)
60000068:	02d12823          	sw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:91
  SREG x14, 13 * REGBYTES(sp)
6000006c:	02e12a23          	sw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:92
  SREG x15, 14 * REGBYTES(sp)
60000070:	02f12c23          	sw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:93
  SREG x16, 15 * REGBYTES(sp)
60000074:	03012e23          	sw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:94
  SREG x17, 16 * REGBYTES(sp)
60000078:	05112023          	sw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:95
  SREG x18, 17 * REGBYTES(sp)
6000007c:	05212223          	sw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:96
  SREG x19, 18 * REGBYTES(sp)
60000080:	05312423          	sw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:97
  SREG x20, 19 * REGBYTES(sp)
60000084:	05412623          	sw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:98
  SREG x21, 20 * REGBYTES(sp)
60000088:	05512823          	sw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:99
  SREG x22, 21 * REGBYTES(sp)
6000008c:	05612a23          	sw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:100
  SREG x23, 22 * REGBYTES(sp)
60000090:	05712c23          	sw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:101
  SREG x24, 23 * REGBYTES(sp)
60000094:	05812e23          	sw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:102
  SREG x25, 24 * REGBYTES(sp)
60000098:	07912023          	sw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:103
  SREG x26, 25 * REGBYTES(sp)
6000009c:	07a12223          	sw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:104
  SREG x27, 26 * REGBYTES(sp)
600000a0:	07b12423          	sw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:105
  SREG x28, 27 * REGBYTES(sp)
600000a4:	07c12623          	sw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:106
  SREG x29, 28 * REGBYTES(sp)
600000a8:	07d12823          	sw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:107
  SREG x30, 29 * REGBYTES(sp)
600000ac:	07e12a23          	sw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:108
  SREG x31, 30 * REGBYTES(sp)
600000b0:	07f12c23          	sw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:111


  csrr t0, mepc
600000b4:	341022f3          	csrr	t0,mepc
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:112
  SREG t0, 31 * REGBYTES(sp)
600000b8:	06512e23          	sw	t0,124(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:114

  csrr a0, mcause
600000bc:	34202573          	csrr	a0,mcause
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:115
  csrr a1, mepc
600000c0:	341025f3          	csrr	a1,mepc
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:116
  mv a2, sp
600000c4:	00010613          	mv	a2,sp
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:117
  jal handle_trap
600000c8:	4b0000ef          	jal	ra,60000578 <handle_trap>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:118
  csrw mepc, a0
600000cc:	34151073          	csrw	mepc,a0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:121

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
600000d0:	000022b7          	lui	t0,0x2
600000d4:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE+0x800>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:122
  csrs mstatus, t0
600000d8:	3002a073          	csrs	mstatus,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:124

  LREG x1, 0 * REGBYTES(sp)
600000dc:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:125
  LREG x2, 1 * REGBYTES(sp)
600000e0:	00412103          	lw	sp,4(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:126
  LREG x3, 2 * REGBYTES(sp)
600000e4:	00812183          	lw	gp,8(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:127
  LREG x4, 3 * REGBYTES(sp)
600000e8:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:128
  LREG x5, 4 * REGBYTES(sp)
600000ec:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:129
  LREG x6, 5 * REGBYTES(sp)
600000f0:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:130
  LREG x7, 6 * REGBYTES(sp)
600000f4:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:131
  LREG x8, 7 * REGBYTES(sp)
600000f8:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:132
  LREG x9, 8 * REGBYTES(sp)
600000fc:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:133
  LREG x10, 9 * REGBYTES(sp)
60000100:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:134
  LREG x11, 10 * REGBYTES(sp)
60000104:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:135
  LREG x12, 11 * REGBYTES(sp)
60000108:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:136
  LREG x13, 12 * REGBYTES(sp)
6000010c:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:137
  LREG x14, 13 * REGBYTES(sp)
60000110:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:138
  LREG x15, 14 * REGBYTES(sp)
60000114:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:139
  LREG x16, 15 * REGBYTES(sp)
60000118:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:140
  LREG x17, 16 * REGBYTES(sp)
6000011c:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:141
  LREG x18, 17 * REGBYTES(sp)
60000120:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:142
  LREG x19, 18 * REGBYTES(sp)
60000124:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:143
  LREG x20, 19 * REGBYTES(sp)
60000128:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:144
  LREG x21, 20 * REGBYTES(sp)
6000012c:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:145
  LREG x22, 21 * REGBYTES(sp)
60000130:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:146
  LREG x23, 22 * REGBYTES(sp)
60000134:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:147
  LREG x24, 23 * REGBYTES(sp)
60000138:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:148
  LREG x25, 24 * REGBYTES(sp)
6000013c:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:149
  LREG x26, 25 * REGBYTES(sp)
60000140:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:150
  LREG x27, 26 * REGBYTES(sp)
60000144:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:151
  LREG x28, 27 * REGBYTES(sp)
60000148:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:152
  LREG x29, 28 * REGBYTES(sp)
6000014c:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:153
  LREG x30, 29 * REGBYTES(sp)
60000150:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:154
  LREG x31, 30 * REGBYTES(sp)
60000154:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:156

  addi sp, sp, 32*REGBYTES
60000158:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/entry.S:157
  mret
6000015c:	30200073          	mret

60000160 <copy_section>:
copy_section():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:37
extern uint32_t     __bss_start;
extern uint32_t     __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
60000160:	fe010113          	addi	sp,sp,-32
60000164:	00812e23          	sw	s0,28(sp)
60000168:	02010413          	addi	s0,sp,32
6000016c:	fea42623          	sw	a0,-20(s0)
60000170:	feb42423          	sw	a1,-24(s0)
60000174:	fec42223          	sw	a2,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
60000178:	02c0006f          	j	600001a4 <copy_section+0x44>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:40
    {
        *p_vma = *p_load;
6000017c:	fec42783          	lw	a5,-20(s0)
60000180:	0007a703          	lw	a4,0(a5)
60000184:	fe842783          	lw	a5,-24(s0)
60000188:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:41
        ++p_load;
6000018c:	fec42783          	lw	a5,-20(s0)
60000190:	00478793          	addi	a5,a5,4
60000194:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:42
        ++p_vma;
60000198:	fe842783          	lw	a5,-24(s0)
6000019c:	00478793          	addi	a5,a5,4
600001a0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
600001a4:	fe842703          	lw	a4,-24(s0)
600001a8:	fe442783          	lw	a5,-28(s0)
600001ac:	fce7f8e3          	bgeu	a5,a4,6000017c <copy_section+0x1c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:44
    }
}
600001b0:	00000013          	nop
600001b4:	01c12403          	lw	s0,28(sp)
600001b8:	02010113          	addi	sp,sp,32
600001bc:	00008067          	ret

600001c0 <zero_section>:
zero_section():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:47

static void zero_section(uint32_t * start, uint32_t * end)
{
600001c0:	fd010113          	addi	sp,sp,-48
600001c4:	02812623          	sw	s0,44(sp)
600001c8:	03010413          	addi	s0,sp,48
600001cc:	fca42e23          	sw	a0,-36(s0)
600001d0:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
600001d4:	fdc42783          	lw	a5,-36(s0)
600001d8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
600001dc:	0180006f          	j	600001f4 <zero_section+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
600001e0:	fec42783          	lw	a5,-20(s0)
600001e4:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:53
        ++p_zero;
600001e8:	fec42783          	lw	a5,-20(s0)
600001ec:	00478793          	addi	a5,a5,4
600001f0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
600001f4:	fec42703          	lw	a4,-20(s0)
600001f8:	fd842783          	lw	a5,-40(s0)
600001fc:	fee7f2e3          	bgeu	a5,a4,600001e0 <zero_section+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:55
    }
}
60000200:	00000013          	nop
60000204:	02c12403          	lw	s0,44(sp)
60000208:	03010113          	addi	sp,sp,48
6000020c:	00008067          	ret

60000210 <_init>:
_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:58

void _init(void)
{
60000210:	fe010113          	addi	sp,sp,-32
60000214:	00112e23          	sw	ra,28(sp)
60000218:	00812c23          	sw	s0,24(sp)
6000021c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
60000220:	600047b7          	lui	a5,0x60004
60000224:	fa078793          	addi	a5,a5,-96 # 60003fa0 <_malloc_usable_size_r+0x28>
60000228:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
6000022c:	fec42783          	lw	a5,-20(s0)
60000230:	fef42023          	sw	a5,-32(s0)
60000234:	fe042223          	sw	zero,-28(s0)
60000238:	fe042423          	sw	zero,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:63

    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
6000023c:	82018613          	addi	a2,gp,-2016 # 80000020 <__sdata_end>
60000240:	800007b7          	lui	a5,0x80000
60000244:	00078593          	mv	a1,a5
60000248:	600047b7          	lui	a5,0x60004
6000024c:	0f078513          	addi	a0,a5,240 # 600040f0 <__sdata_load>
60000250:	f11ff0ef          	jal	ra,60000160 <copy_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:64
    copy_section(&__data_load, &__data_start, &__data_end);
60000254:	90018613          	addi	a2,gp,-1792 # 80000100 <__data_end>
60000258:	82018593          	addi	a1,gp,-2016 # 80000020 <__sdata_end>
6000025c:	600047b7          	lui	a5,0x60004
60000260:	11078513          	addi	a0,a5,272 # 60004110 <__data_load>
60000264:	efdff0ef          	jal	ra,60000160 <copy_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:65
    zero_section(&__sbss_start, &__sbss_end);
60000268:	98018593          	addi	a1,gp,-1664 # 80000180 <__sbss_end>
6000026c:	90018513          	addi	a0,gp,-1792 # 80000100 <__data_end>
60000270:	f51ff0ef          	jal	ra,600001c0 <zero_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:66
    zero_section(&__bss_start, &__bss_end);
60000274:	800197b7          	lui	a5,0x80019
60000278:	25078593          	addi	a1,a5,592 # 80019250 <__stack_top+0xffffe000>
6000027c:	98018513          	addi	a0,gp,-1664 # 80000180 <__sbss_end>
60000280:	f41ff0ef          	jal	ra,600001c0 <zero_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:68
    
    main(1, argv);
60000284:	fe040793          	addi	a5,s0,-32
60000288:	00078593          	mv	a1,a5
6000028c:	00100513          	li	a0,1
60000290:	4b1020ef          	jal	ra,60002f40 <main>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:69
}
60000294:	00000013          	nop
60000298:	01c12083          	lw	ra,28(sp)
6000029c:	01812403          	lw	s0,24(sp)
600002a0:	02010113          	addi	sp,sp,32
600002a4:	00008067          	ret

600002a8 <_fini>:
_fini():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:74

/* Function called after main() finishes */
void
_fini()
{
600002a8:	ff010113          	addi	sp,sp,-16
600002ac:	00812623          	sw	s0,12(sp)
600002b0:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/init.c:75
}
600002b4:	00000013          	nop
600002b8:	00c12403          	lw	s0,12(sp)
600002bc:	01010113          	addi	sp,sp,16
600002c0:	00008067          	ret

600002c4 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
600002c4:	fd010113          	addi	sp,sp,-48
600002c8:	02812623          	sw	s0,44(sp)
600002cc:	03010413          	addi	s0,sp,48
600002d0:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
600002d4:	f14027f3          	csrr	a5,mhartid
600002d8:	fef42623          	sw	a5,-20(s0)
600002dc:	fec42783          	lw	a5,-20(s0)
600002e0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
600002e4:	40000737          	lui	a4,0x40000
600002e8:	fdc42783          	lw	a5,-36(s0)
600002ec:	0057d793          	srli	a5,a5,0x5
600002f0:	fe842683          	lw	a3,-24(s0)
600002f4:	00569693          	slli	a3,a3,0x5
600002f8:	00f686b3          	add	a3,a3,a5
600002fc:	000017b7          	lui	a5,0x1
60000300:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000304:	00f687b3          	add	a5,a3,a5
60000308:	00279793          	slli	a5,a5,0x2
6000030c:	00f707b3          	add	a5,a4,a5
60000310:	0007a783          	lw	a5,0(a5)
60000314:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
60000318:	fdc42783          	lw	a5,-36(s0)
6000031c:	01f7f793          	andi	a5,a5,31
60000320:	00100713          	li	a4,1
60000324:	00f717b3          	sll	a5,a4,a5
60000328:	fff7c793          	not	a5,a5
6000032c:	fe442703          	lw	a4,-28(s0)
60000330:	00f777b3          	and	a5,a4,a5
60000334:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
60000338:	40000737          	lui	a4,0x40000
6000033c:	fdc42783          	lw	a5,-36(s0)
60000340:	0057d793          	srli	a5,a5,0x5
60000344:	fe842683          	lw	a3,-24(s0)
60000348:	00569693          	slli	a3,a3,0x5
6000034c:	00f686b3          	add	a3,a3,a5
60000350:	000017b7          	lui	a5,0x1
60000354:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000358:	00f687b3          	add	a5,a3,a5
6000035c:	00279793          	slli	a5,a5,0x2
60000360:	00f707b3          	add	a5,a4,a5
60000364:	fe442703          	lw	a4,-28(s0)
60000368:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:181
}
6000036c:	00000013          	nop
60000370:	02c12403          	lw	s0,44(sp)
60000374:	03010113          	addi	sp,sp,48
60000378:	00008067          	ret

6000037c <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
6000037c:	fe010113          	addi	sp,sp,-32
60000380:	00812e23          	sw	s0,28(sp)
60000384:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
60000388:	f14027f3          	csrr	a5,mhartid
6000038c:	fef42623          	sw	a5,-20(s0)
60000390:	fec42783          	lw	a5,-20(s0)
60000394:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
60000398:	40000737          	lui	a4,0x40000
6000039c:	fe842783          	lw	a5,-24(s0)
600003a0:	20078793          	addi	a5,a5,512
600003a4:	00c79793          	slli	a5,a5,0xc
600003a8:	00f707b3          	add	a5,a4,a5
600003ac:	0047a783          	lw	a5,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:209
}
600003b0:	00078513          	mv	a0,a5
600003b4:	01c12403          	lw	s0,28(sp)
600003b8:	02010113          	addi	sp,sp,32
600003bc:	00008067          	ret

600003c0 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
600003c0:	fd010113          	addi	sp,sp,-48
600003c4:	02812623          	sw	s0,44(sp)
600003c8:	03010413          	addi	s0,sp,48
600003cc:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
600003d0:	f14027f3          	csrr	a5,mhartid
600003d4:	fef42623          	sw	a5,-20(s0)
600003d8:	fec42783          	lw	a5,-20(s0)
600003dc:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
600003e0:	40000737          	lui	a4,0x40000
600003e4:	fe842783          	lw	a5,-24(s0)
600003e8:	20078793          	addi	a5,a5,512
600003ec:	00c79793          	slli	a5,a5,0xc
600003f0:	00f707b3          	add	a5,a4,a5
600003f4:	fdc42703          	lw	a4,-36(s0)
600003f8:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_plic.h:220
}
600003fc:	00000013          	nop
60000400:	02c12403          	lw	s0,44(sp)
60000404:	03010113          	addi	sp,sp,48
60000408:	00008067          	ret

6000040c <__enable_irq>:
__enable_irq():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:86

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
6000040c:	fe010113          	addi	sp,sp,-32
60000410:	00812e23          	sw	s0,28(sp)
60000414:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:87
    set_csr(mstatus, MSTATUS_MIE);
60000418:	300467f3          	csrrsi	a5,mstatus,8
6000041c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:88
}
60000420:	00000013          	nop
60000424:	01c12403          	lw	s0,28(sp)
60000428:	02010113          	addi	sp,sp,32
6000042c:	00008067          	ret

60000430 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:119

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
static void handle_m_timer_interrupt(void)
{
60000430:	fe010113          	addi	sp,sp,-32
60000434:	00112e23          	sw	ra,28(sp)
60000438:	00812c23          	sw	s0,24(sp)
6000043c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:120
    clear_csr(mie, MIP_MTIP);
60000440:	08000793          	li	a5,128
60000444:	3047b7f3          	csrrc	a5,mie,a5
60000448:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:122

    SysTick_Handler();
6000044c:	5ac010ef          	jal	ra,600019f8 <SysTick_Handler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:124

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
60000450:	44000737          	lui	a4,0x44000
60000454:	0000c7b7          	lui	a5,0xc
60000458:	00f707b3          	add	a5,a4,a5
6000045c:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE+0xaffc>
60000460:	ff87a783          	lw	a5,-8(a5)
60000464:	9001a583          	lw	a1,-1792(gp) # 80000100 <__data_end>
60000468:	9041a603          	lw	a2,-1788(gp) # 80000104 <__data_end+0x4>
6000046c:	44000537          	lui	a0,0x44000
60000470:	f1402773          	csrr	a4,mhartid
60000474:	fee42423          	sw	a4,-24(s0)
60000478:	fe842883          	lw	a7,-24(s0)
6000047c:	00b786b3          	add	a3,a5,a1
60000480:	00068313          	mv	t1,a3
60000484:	00f33333          	sltu	t1,t1,a5
60000488:	00c80733          	add	a4,a6,a2
6000048c:	00e307b3          	add	a5,t1,a4
60000490:	00078713          	mv	a4,a5
60000494:	00068793          	mv	a5,a3
60000498:	00070813          	mv	a6,a4
6000049c:	00001737          	lui	a4,0x1
600004a0:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0x800>
600004a4:	00e88733          	add	a4,a7,a4
600004a8:	00371713          	slli	a4,a4,0x3
600004ac:	00e50733          	add	a4,a0,a4
600004b0:	00f72023          	sw	a5,0(a4)
600004b4:	01072223          	sw	a6,4(a4)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:126

    set_csr(mie, MIP_MTIP);
600004b8:	08000793          	li	a5,128
600004bc:	3047a7f3          	csrrs	a5,mie,a5
600004c0:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:127
}
600004c4:	00000013          	nop
600004c8:	01c12083          	lw	ra,28(sp)
600004cc:	01812403          	lw	s0,24(sp)
600004d0:	02010113          	addi	sp,sp,32
600004d4:	00008067          	ret

600004d8 <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:172

/*------------------------------------------------------------------------------
 *
 */
static void handle_m_ext_interrupt(void)
{
600004d8:	fe010113          	addi	sp,sp,-32
600004dc:	00112e23          	sw	ra,28(sp)
600004e0:	00812c23          	sw	s0,24(sp)
600004e4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:173
    uint32_t int_num  = PLIC_ClaimIRQ();
600004e8:	e95ff0ef          	jal	ra,6000037c <PLIC_ClaimIRQ>
600004ec:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:174
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
600004f0:	fe0405a3          	sb	zero,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:176

    disable = ext_irq_handler_table[int_num]();
600004f4:	800007b7          	lui	a5,0x80000
600004f8:	fec42703          	lw	a4,-20(s0)
600004fc:	00271713          	slli	a4,a4,0x2
60000500:	02078793          	addi	a5,a5,32 # 80000020 <__stack_top+0xfffe4dd0>
60000504:	00f707b3          	add	a5,a4,a5
60000508:	0007a783          	lw	a5,0(a5)
6000050c:	000780e7          	jalr	a5
60000510:	00050793          	mv	a5,a0
60000514:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:178

    PLIC_CompleteIRQ(int_num);
60000518:	fec42503          	lw	a0,-20(s0)
6000051c:	ea5ff0ef          	jal	ra,600003c0 <PLIC_CompleteIRQ>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:180

    if(EXT_IRQ_DISABLE == disable)
60000520:	feb44703          	lbu	a4,-21(s0)
60000524:	00100793          	li	a5,1
60000528:	00f71663          	bne	a4,a5,60000534 <handle_m_ext_interrupt+0x5c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:182
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
6000052c:	fec42503          	lw	a0,-20(s0)
60000530:	d95ff0ef          	jal	ra,600002c4 <PLIC_DisableIRQ>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:184
    }
}
60000534:	00000013          	nop
60000538:	01c12083          	lw	ra,28(sp)
6000053c:	01812403          	lw	s0,24(sp)
60000540:	02010113          	addi	sp,sp,32
60000544:	00008067          	ret

60000548 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:187

static void handle_m_soft_interrupt(void)
{
60000548:	ff010113          	addi	sp,sp,-16
6000054c:	00112623          	sw	ra,12(sp)
60000550:	00812423          	sw	s0,8(sp)
60000554:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:188
    Software_IRQHandler();
60000558:	5b0010ef          	jal	ra,60001b08 <Software_IRQHandler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:191

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00U;
6000055c:	440007b7          	lui	a5,0x44000
60000560:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:192
}
60000564:	00000013          	nop
60000568:	00c12083          	lw	ra,12(sp)
6000056c:	00812403          	lw	s0,8(sp)
60000570:	01010113          	addi	sp,sp,16
60000574:	00008067          	ret

60000578 <handle_trap>:
handle_trap():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:198

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t mepc)
{
60000578:	fb010113          	addi	sp,sp,-80
6000057c:	04112623          	sw	ra,76(sp)
60000580:	04812423          	sw	s0,72(sp)
60000584:	05010413          	addi	s0,sp,80
60000588:	faa42e23          	sw	a0,-68(s0)
6000058c:	fab42c23          	sw	a1,-72(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:199
    if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
60000590:	fbc42783          	lw	a5,-68(s0)
60000594:	0207d263          	bgez	a5,600005b8 <handle_trap+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:199 (discriminator 1)
60000598:	fbc42703          	lw	a4,-68(s0)
6000059c:	800007b7          	lui	a5,0x80000
600005a0:	fff7c793          	not	a5,a5
600005a4:	00f77733          	and	a4,a4,a5
600005a8:	00b00793          	li	a5,11
600005ac:	00f71663          	bne	a4,a5,600005b8 <handle_trap+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:201
    {
        handle_m_ext_interrupt();
600005b0:	f29ff0ef          	jal	ra,600004d8 <handle_m_ext_interrupt>
600005b4:	0a80006f          	j	6000065c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:203
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
600005b8:	fbc42783          	lw	a5,-68(s0)
600005bc:	0207d263          	bgez	a5,600005e0 <handle_trap+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:203 (discriminator 1)
600005c0:	fbc42703          	lw	a4,-68(s0)
600005c4:	800007b7          	lui	a5,0x80000
600005c8:	fff7c793          	not	a5,a5
600005cc:	00f77733          	and	a4,a4,a5
600005d0:	00700793          	li	a5,7
600005d4:	00f71663          	bne	a4,a5,600005e0 <handle_trap+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:205
    {
        handle_m_timer_interrupt();
600005d8:	e59ff0ef          	jal	ra,60000430 <handle_m_timer_interrupt>
600005dc:	0800006f          	j	6000065c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:207
    }
    else if ( (mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
600005e0:	fbc42783          	lw	a5,-68(s0)
600005e4:	0207d263          	bgez	a5,60000608 <handle_trap+0x90>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:207 (discriminator 1)
600005e8:	fbc42703          	lw	a4,-68(s0)
600005ec:	800007b7          	lui	a5,0x80000
600005f0:	fff7c793          	not	a5,a5
600005f4:	00f77733          	and	a4,a4,a5
600005f8:	00300793          	li	a5,3
600005fc:	00f71663          	bne	a4,a5,60000608 <handle_trap+0x90>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:209
    {
        handle_m_soft_interrupt();
60000600:	f49ff0ef          	jal	ra,60000548 <handle_m_soft_interrupt>
60000604:	0580006f          	j	6000065c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:234
         B Instruction page fault
         C Load page fault                (mtval/mbadaddr is the address)
         E Store page fault               (mtval/mbadaddr is the address)
        */

         uintptr_t mip      = read_csr(mip);      /* interrupt pending */
60000608:	344027f3          	csrr	a5,mip
6000060c:	fef42623          	sw	a5,-20(s0)
60000610:	fec42783          	lw	a5,-20(s0)
60000614:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:235
         uintptr_t mbadaddr = read_csr(mbadaddr); /* additional info and meaning depends on mcause */
60000618:	343027f3          	csrr	a5,mtval
6000061c:	fef42223          	sw	a5,-28(s0)
60000620:	fe442783          	lw	a5,-28(s0)
60000624:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:236
         uintptr_t mtvec    = read_csr(mtvec);    /* trap vector */
60000628:	305027f3          	csrr	a5,mtvec
6000062c:	fcf42e23          	sw	a5,-36(s0)
60000630:	fdc42783          	lw	a5,-36(s0)
60000634:	fcf42c23          	sw	a5,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:237
         uintptr_t mscratch = read_csr(mscratch); /* temporary, sometimes might hold temporary value of a0 */
60000638:	340027f3          	csrr	a5,mscratch
6000063c:	fcf42a23          	sw	a5,-44(s0)
60000640:	fd442783          	lw	a5,-44(s0)
60000644:	fcf42823          	sw	a5,-48(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:238
         uintptr_t mstatus  = read_csr(mstatus);  /* status contains many smaller fields: */
60000648:	300027f3          	csrr	a5,mstatus
6000064c:	fcf42623          	sw	a5,-52(s0)
60000650:	fcc42783          	lw	a5,-52(s0)
60000654:	fcf42423          	sw	a5,-56(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:241

		/* breakpoint*/
        __asm("ebreak");
60000658:	00100073          	ebreak
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:246
#else
        _exit(1 + mcause);
#endif
    }
    return mepc;
6000065c:	fb842783          	lw	a5,-72(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal.c:247
}
60000660:	00078513          	mv	a0,a5
60000664:	04c12083          	lw	ra,76(sp)
60000668:	04812403          	lw	s0,72(sp)
6000066c:	05010113          	addi	sp,sp,80
60000670:	00008067          	ret

60000674 <Invalid_IRQHandler>:
Invalid_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:35
	/*Default handler*/
}

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t Invalid_IRQHandler(void)
{
60000674:	ff010113          	addi	sp,sp,-16
60000678:	00812623          	sw	s0,12(sp)
6000067c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:36
    return(0U); /*Default handler*/
60000680:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:37
}
60000684:	00078513          	mv	a0,a5
60000688:	00c12403          	lw	s0,12(sp)
6000068c:	01010113          	addi	sp,sp,16
60000690:	00008067          	ret

60000694 <External_1_IRQHandler>:
External_1_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:41

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_1_IRQHandler(void)
{
60000694:	ff010113          	addi	sp,sp,-16
60000698:	00812623          	sw	s0,12(sp)
6000069c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:42
    return(0U); /*Default handler*/
600006a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:43
}
600006a4:	00078513          	mv	a0,a5
600006a8:	00c12403          	lw	s0,12(sp)
600006ac:	01010113          	addi	sp,sp,16
600006b0:	00008067          	ret

600006b4 <External_2_IRQHandler>:
External_2_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:47

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_2_IRQHandler(void)
{
600006b4:	ff010113          	addi	sp,sp,-16
600006b8:	00812623          	sw	s0,12(sp)
600006bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:48
    return(0U); /*Default handler*/
600006c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:49
}
600006c4:	00078513          	mv	a0,a5
600006c8:	00c12403          	lw	s0,12(sp)
600006cc:	01010113          	addi	sp,sp,16
600006d0:	00008067          	ret

600006d4 <External_3_IRQHandler>:
External_3_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:53

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_3_IRQHandler(void)
{
600006d4:	ff010113          	addi	sp,sp,-16
600006d8:	00812623          	sw	s0,12(sp)
600006dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:54
    return(0U); /*Default handler*/
600006e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:55
}
600006e4:	00078513          	mv	a0,a5
600006e8:	00c12403          	lw	s0,12(sp)
600006ec:	01010113          	addi	sp,sp,16
600006f0:	00008067          	ret

600006f4 <External_4_IRQHandler>:
External_4_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:59

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_4_IRQHandler(void)
{
600006f4:	ff010113          	addi	sp,sp,-16
600006f8:	00812623          	sw	s0,12(sp)
600006fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:60
	return(0U); /*Default handler*/
60000700:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:61
}
60000704:	00078513          	mv	a0,a5
60000708:	00c12403          	lw	s0,12(sp)
6000070c:	01010113          	addi	sp,sp,16
60000710:	00008067          	ret

60000714 <External_5_IRQHandler>:
External_5_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:65

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_5_IRQHandler(void)
{
60000714:	ff010113          	addi	sp,sp,-16
60000718:	00812623          	sw	s0,12(sp)
6000071c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:66
    return(0U); /*Default handler*/
60000720:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:67
}
60000724:	00078513          	mv	a0,a5
60000728:	00c12403          	lw	s0,12(sp)
6000072c:	01010113          	addi	sp,sp,16
60000730:	00008067          	ret

60000734 <External_6_IRQHandler>:
External_6_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:71

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_6_IRQHandler(void)
{
60000734:	ff010113          	addi	sp,sp,-16
60000738:	00812623          	sw	s0,12(sp)
6000073c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:72
    return(0U); /*Default handler*/
60000740:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:73
}
60000744:	00078513          	mv	a0,a5
60000748:	00c12403          	lw	s0,12(sp)
6000074c:	01010113          	addi	sp,sp,16
60000750:	00008067          	ret

60000754 <External_7_IRQHandler>:
External_7_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:77

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_7_IRQHandler(void)
{
60000754:	ff010113          	addi	sp,sp,-16
60000758:	00812623          	sw	s0,12(sp)
6000075c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0U); /*Default handler*/
60000760:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:79
}
60000764:	00078513          	mv	a0,a5
60000768:	00c12403          	lw	s0,12(sp)
6000076c:	01010113          	addi	sp,sp,16
60000770:	00008067          	ret

60000774 <External_8_IRQHandler>:
External_8_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:83

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_8_IRQHandler(void)
{
60000774:	ff010113          	addi	sp,sp,-16
60000778:	00812623          	sw	s0,12(sp)
6000077c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:84
    return(0U); /*Default handler*/
60000780:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:85
}
60000784:	00078513          	mv	a0,a5
60000788:	00c12403          	lw	s0,12(sp)
6000078c:	01010113          	addi	sp,sp,16
60000790:	00008067          	ret

60000794 <External_9_IRQHandler>:
External_9_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:89

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_9_IRQHandler(void)
{
60000794:	ff010113          	addi	sp,sp,-16
60000798:	00812623          	sw	s0,12(sp)
6000079c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:90
    return(0U); /*Default handler*/
600007a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:91
}
600007a4:	00078513          	mv	a0,a5
600007a8:	00c12403          	lw	s0,12(sp)
600007ac:	01010113          	addi	sp,sp,16
600007b0:	00008067          	ret

600007b4 <External_10_IRQHandler>:
External_10_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:95

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_10_IRQHandler(void)
{
600007b4:	ff010113          	addi	sp,sp,-16
600007b8:	00812623          	sw	s0,12(sp)
600007bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:96
    return(0U); /*Default handler*/
600007c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:97
}
600007c4:	00078513          	mv	a0,a5
600007c8:	00c12403          	lw	s0,12(sp)
600007cc:	01010113          	addi	sp,sp,16
600007d0:	00008067          	ret

600007d4 <External_11_IRQHandler>:
External_11_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:101

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_11_IRQHandler(void)
{
600007d4:	ff010113          	addi	sp,sp,-16
600007d8:	00812623          	sw	s0,12(sp)
600007dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:102
    return(0U); /*Default handler*/
600007e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:103
}
600007e4:	00078513          	mv	a0,a5
600007e8:	00c12403          	lw	s0,12(sp)
600007ec:	01010113          	addi	sp,sp,16
600007f0:	00008067          	ret

600007f4 <External_12_IRQHandler>:
External_12_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:107

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_12_IRQHandler(void)
{
600007f4:	ff010113          	addi	sp,sp,-16
600007f8:	00812623          	sw	s0,12(sp)
600007fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:108
	return(0U); /*Default handler*/
60000800:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:109
}
60000804:	00078513          	mv	a0,a5
60000808:	00c12403          	lw	s0,12(sp)
6000080c:	01010113          	addi	sp,sp,16
60000810:	00008067          	ret

60000814 <External_13_IRQHandler>:
External_13_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:113

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_13_IRQHandler(void)
{
60000814:	ff010113          	addi	sp,sp,-16
60000818:	00812623          	sw	s0,12(sp)
6000081c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:114
	return(0U); /*Default handler*/
60000820:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:115
}
60000824:	00078513          	mv	a0,a5
60000828:	00c12403          	lw	s0,12(sp)
6000082c:	01010113          	addi	sp,sp,16
60000830:	00008067          	ret

60000834 <External_14_IRQHandler>:
External_14_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:119

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_14_IRQHandler(void)
{
60000834:	ff010113          	addi	sp,sp,-16
60000838:	00812623          	sw	s0,12(sp)
6000083c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:120
	return(0U); /*Default handler*/
60000840:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:121
}
60000844:	00078513          	mv	a0,a5
60000848:	00c12403          	lw	s0,12(sp)
6000084c:	01010113          	addi	sp,sp,16
60000850:	00008067          	ret

60000854 <External_15_IRQHandler>:
External_15_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:125

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_15_IRQHandler(void)
{
60000854:	ff010113          	addi	sp,sp,-16
60000858:	00812623          	sw	s0,12(sp)
6000085c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:126
	return(0U); /*Default handler*/
60000860:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:127
}
60000864:	00078513          	mv	a0,a5
60000868:	00c12403          	lw	s0,12(sp)
6000086c:	01010113          	addi	sp,sp,16
60000870:	00008067          	ret

60000874 <External_16_IRQHandler>:
External_16_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:131

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_16_IRQHandler(void)
{
60000874:	ff010113          	addi	sp,sp,-16
60000878:	00812623          	sw	s0,12(sp)
6000087c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:132
	return(0U); /*Default handler*/
60000880:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:133
}
60000884:	00078513          	mv	a0,a5
60000888:	00c12403          	lw	s0,12(sp)
6000088c:	01010113          	addi	sp,sp,16
60000890:	00008067          	ret

60000894 <External_17_IRQHandler>:
External_17_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:137

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_17_IRQHandler(void)
{
60000894:	ff010113          	addi	sp,sp,-16
60000898:	00812623          	sw	s0,12(sp)
6000089c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:138
	return(0U); /*Default handler*/
600008a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:139
}
600008a4:	00078513          	mv	a0,a5
600008a8:	00c12403          	lw	s0,12(sp)
600008ac:	01010113          	addi	sp,sp,16
600008b0:	00008067          	ret

600008b4 <External_18_IRQHandler>:
External_18_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:143

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_18_IRQHandler(void)
{
600008b4:	ff010113          	addi	sp,sp,-16
600008b8:	00812623          	sw	s0,12(sp)
600008bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:144
	return(0U); /*Default handler*/
600008c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:145
}
600008c4:	00078513          	mv	a0,a5
600008c8:	00c12403          	lw	s0,12(sp)
600008cc:	01010113          	addi	sp,sp,16
600008d0:	00008067          	ret

600008d4 <External_19_IRQHandler>:
External_19_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:149

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_19_IRQHandler(void)
{
600008d4:	ff010113          	addi	sp,sp,-16
600008d8:	00812623          	sw	s0,12(sp)
600008dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:150
	return(0U); /*Default handler*/
600008e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:151
}
600008e4:	00078513          	mv	a0,a5
600008e8:	00c12403          	lw	s0,12(sp)
600008ec:	01010113          	addi	sp,sp,16
600008f0:	00008067          	ret

600008f4 <External_20_IRQHandler>:
External_20_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:155

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_20_IRQHandler(void)
{
600008f4:	ff010113          	addi	sp,sp,-16
600008f8:	00812623          	sw	s0,12(sp)
600008fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:156
	return(0U); /*Default handler*/
60000900:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:157
}
60000904:	00078513          	mv	a0,a5
60000908:	00c12403          	lw	s0,12(sp)
6000090c:	01010113          	addi	sp,sp,16
60000910:	00008067          	ret

60000914 <External_21_IRQHandler>:
External_21_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:161

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_21_IRQHandler(void)
{
60000914:	ff010113          	addi	sp,sp,-16
60000918:	00812623          	sw	s0,12(sp)
6000091c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:162
	return(0U); /*Default handler*/
60000920:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:163
}
60000924:	00078513          	mv	a0,a5
60000928:	00c12403          	lw	s0,12(sp)
6000092c:	01010113          	addi	sp,sp,16
60000930:	00008067          	ret

60000934 <External_22_IRQHandler>:
External_22_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:167

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_22_IRQHandler(void)
{
60000934:	ff010113          	addi	sp,sp,-16
60000938:	00812623          	sw	s0,12(sp)
6000093c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:168
	return(0U); /*Default handler*/
60000940:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:169
}
60000944:	00078513          	mv	a0,a5
60000948:	00c12403          	lw	s0,12(sp)
6000094c:	01010113          	addi	sp,sp,16
60000950:	00008067          	ret

60000954 <External_23_IRQHandler>:
External_23_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:173

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_23_IRQHandler(void)
{
60000954:	ff010113          	addi	sp,sp,-16
60000958:	00812623          	sw	s0,12(sp)
6000095c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:174
	return(0U); /*Default handler*/
60000960:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:175
}
60000964:	00078513          	mv	a0,a5
60000968:	00c12403          	lw	s0,12(sp)
6000096c:	01010113          	addi	sp,sp,16
60000970:	00008067          	ret

60000974 <External_24_IRQHandler>:
External_24_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:179

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_24_IRQHandler(void)
{
60000974:	ff010113          	addi	sp,sp,-16
60000978:	00812623          	sw	s0,12(sp)
6000097c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:180
	return(0U); /*Default handler*/
60000980:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:181
}
60000984:	00078513          	mv	a0,a5
60000988:	00c12403          	lw	s0,12(sp)
6000098c:	01010113          	addi	sp,sp,16
60000990:	00008067          	ret

60000994 <External_25_IRQHandler>:
External_25_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:185

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_25_IRQHandler(void)
{
60000994:	ff010113          	addi	sp,sp,-16
60000998:	00812623          	sw	s0,12(sp)
6000099c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:186
	return(0U); /*Default handler*/
600009a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:187
}
600009a4:	00078513          	mv	a0,a5
600009a8:	00c12403          	lw	s0,12(sp)
600009ac:	01010113          	addi	sp,sp,16
600009b0:	00008067          	ret

600009b4 <External_26_IRQHandler>:
External_26_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:191

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_26_IRQHandler(void)
{
600009b4:	ff010113          	addi	sp,sp,-16
600009b8:	00812623          	sw	s0,12(sp)
600009bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:192
	return(0U); /*Default handler*/
600009c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:193
}
600009c4:	00078513          	mv	a0,a5
600009c8:	00c12403          	lw	s0,12(sp)
600009cc:	01010113          	addi	sp,sp,16
600009d0:	00008067          	ret

600009d4 <External_27_IRQHandler>:
External_27_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:197

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_27_IRQHandler(void)
{
600009d4:	ff010113          	addi	sp,sp,-16
600009d8:	00812623          	sw	s0,12(sp)
600009dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:198
	return(0U); /*Default handler*/
600009e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:199
}
600009e4:	00078513          	mv	a0,a5
600009e8:	00c12403          	lw	s0,12(sp)
600009ec:	01010113          	addi	sp,sp,16
600009f0:	00008067          	ret

600009f4 <External_28_IRQHandler>:
External_28_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:203

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_28_IRQHandler(void)
{
600009f4:	ff010113          	addi	sp,sp,-16
600009f8:	00812623          	sw	s0,12(sp)
600009fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:204
	return(0U); /*Default handler*/
60000a00:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/riscv_hal_stubs.c:205
}
60000a04:	00078513          	mv	a0,a5
60000a08:	00c12403          	lw	s0,12(sp)
60000a0c:	01010113          	addi	sp,sp,16
60000a10:	00008067          	ret

60000a14 <_sbrk>:
_sbrk():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/syscall.c:86

    while (1);
}

void *_sbrk(ptrdiff_t incr)
{
60000a14:	fe010113          	addi	sp,sp,-32
60000a18:	00812e23          	sw	s0,28(sp)
60000a1c:	02010413          	addi	s0,sp,32
60000a20:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/syscall.c:91
    extern char _end[];
    extern char _heap_end[];
    static char *curbrk = _end;

    if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
60000a24:	800007b7          	lui	a5,0x80000
60000a28:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a2c:	fec42783          	lw	a5,-20(s0)
60000a30:	00f70733          	add	a4,a4,a5
60000a34:	800197b7          	lui	a5,0x80019
60000a38:	25078793          	addi	a5,a5,592 # 80019250 <__stack_top+0xffffe000>
60000a3c:	02f76063          	bltu	a4,a5,60000a5c <_sbrk+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/syscall.c:91 (discriminator 1)
60000a40:	800007b7          	lui	a5,0x80000
60000a44:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a48:	fec42783          	lw	a5,-20(s0)
60000a4c:	00f70733          	add	a4,a4,a5
60000a50:	8001a7b7          	lui	a5,0x8001a
60000a54:	25078793          	addi	a5,a5,592 # 8001a250 <__stack_top+0xfffff000>
60000a58:	00e7f663          	bgeu	a5,a4,60000a64 <_sbrk+0x50>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/syscall.c:93
    {
        return ((char *) - 1);
60000a5c:	fff00793          	li	a5,-1
60000a60:	0300006f          	j	60000a90 <_sbrk+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/syscall.c:96
    }

    curbrk += incr;
60000a64:	800007b7          	lui	a5,0x80000
60000a68:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a6c:	fec42783          	lw	a5,-20(s0)
60000a70:	00f70733          	add	a4,a4,a5
60000a74:	800007b7          	lui	a5,0x80000
60000a78:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/syscall.c:97
    return curbrk - incr;
60000a7c:	800007b7          	lui	a5,0x80000
60000a80:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a84:	fec42783          	lw	a5,-20(s0)
60000a88:	40f007b3          	neg	a5,a5
60000a8c:	00f707b3          	add	a5,a4,a5
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../riscv_hal/syscall.c:98
}
60000a90:	00078513          	mv	a0,a5
60000a94:	01c12403          	lw	s0,28(sp)
60000a98:	02010113          	addi	sp,sp,32
60000a9c:	00008067          	ret

60000aa0 <HW_set_32bit_reg>:
HW_set_32bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
60000aa0:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:37
    ret
60000aa4:	00008067          	ret

60000aa8 <HW_get_32bit_reg>:
HW_get_32bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
60000aa8:	00052503          	lw	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:48
    ret
60000aac:	00008067          	ret

60000ab0 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
60000ab0:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
60000ab4:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
60000ab8:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
60000abc:	00052303          	lw	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:64
    mv t2, a2
60000ac0:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:65
    not t2, t2
60000ac4:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
60000ac8:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
60000acc:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
60000ad0:	00652023          	sw	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:69
    ret
60000ad4:	00008067          	ret

60000ad8 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
60000ad8:	00052503          	lw	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
60000adc:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
60000ae0:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:86
    ret
60000ae4:	00008067          	ret

60000ae8 <HW_set_16bit_reg>:
HW_set_16bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
60000ae8:	00b51023          	sh	a1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:97
    ret
60000aec:	00008067          	ret

60000af0 <HW_get_16bit_reg>:
HW_get_16bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
60000af0:	00051503          	lh	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:108
    ret
60000af4:	00008067          	ret

60000af8 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
60000af8:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
60000afc:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
60000b00:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
60000b04:	00051303          	lh	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:125
    mv t2, a2
60000b08:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:126
    not t2, t2
60000b0c:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
60000b10:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
60000b14:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
60000b18:	00651023          	sh	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:130
    ret
60000b1c:	00008067          	ret

60000b20 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
60000b20:	00051503          	lh	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
60000b24:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
60000b28:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:147
    ret
60000b2c:	00008067          	ret

60000b30 <HW_set_8bit_reg>:
HW_set_8bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
60000b30:	00b50023          	sb	a1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:158
    ret
60000b34:	00008067          	ret

60000b38 <HW_get_8bit_reg>:
HW_get_8bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
60000b38:	00050503          	lb	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:169
    ret
60000b3c:	00008067          	ret

60000b40 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
60000b40:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
60000b44:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
60000b48:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
60000b4c:	00050303          	lb	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:185
    mv t2, a2
60000b50:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:186
    not t2, t2
60000b54:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
60000b58:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
60000b5c:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
60000b60:	00650023          	sb	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:190
    ret
60000b64:	00008067          	ret

60000b68 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
60000b68:	00050503          	lb	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
60000b6c:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
60000b70:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../hal/hw_reg_access.S:207
    ret
60000b74:	00008067          	ret

60000b78 <UART_init>:
UART_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:45
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
60000b78:	fd010113          	addi	sp,sp,-48
60000b7c:	02112623          	sw	ra,44(sp)
60000b80:	02812423          	sw	s0,40(sp)
60000b84:	03010413          	addi	s0,sp,48
60000b88:	fca42e23          	sw	a0,-36(s0)
60000b8c:	fcb42c23          	sw	a1,-40(s0)
60000b90:	00060793          	mv	a5,a2
60000b94:	00068713          	mv	a4,a3
60000b98:	fcf41b23          	sh	a5,-42(s0)
60000b9c:	00070793          	mv	a5,a4
60000ba0:	fcf40aa3          	sb	a5,-43(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:52
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
60000ba4:	fdc42783          	lw	a5,-36(s0)
60000ba8:	0c078a63          	beqz	a5,60000c7c <UART_init+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:52 (discriminator 1)
60000bac:	fd544703          	lbu	a4,-43(s0)
60000bb0:	00700793          	li	a5,7
60000bb4:	0ce7e463          	bltu	a5,a4,60000c7c <UART_init+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
        ( line_config <= MAX_LINE_CONFIG ) &&
60000bb8:	fd645703          	lhu	a4,-42(s0)
60000bbc:	000027b7          	lui	a5,0x2
60000bc0:	0af77e63          	bgeu	a4,a5,60000c7c <UART_init+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:59
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
60000bc4:	fd842783          	lw	a5,-40(s0)
60000bc8:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE+0x1008>
60000bcc:	fd645783          	lhu	a5,-42(s0)
60000bd0:	0ff7f793          	andi	a5,a5,255
60000bd4:	00078593          	mv	a1,a5
60000bd8:	00070513          	mv	a0,a4
60000bdc:	f55ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:66
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
60000be0:	fd842783          	lw	a5,-40(s0)
60000be4:	00c78693          	addi	a3,a5,12
60000be8:	fd544703          	lbu	a4,-43(s0)
60000bec:	fd645783          	lhu	a5,-42(s0)
60000bf0:	4057d793          	srai	a5,a5,0x5
60000bf4:	7f87f793          	andi	a5,a5,2040
60000bf8:	00f767b3          	or	a5,a4,a5
60000bfc:	00078593          	mv	a1,a5
60000c00:	00068513          	mv	a0,a3
60000c04:	f2dff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:70
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
60000c08:	fdc42783          	lw	a5,-36(s0)
60000c0c:	fd842703          	lw	a4,-40(s0)
60000c10:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:93
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000c14:	fdc42783          	lw	a5,-36(s0)
60000c18:	0007a783          	lw	a5,0(a5)
60000c1c:	01078793          	addi	a5,a5,16
60000c20:	00078513          	mv	a0,a5
60000c24:	f15ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000c28:	00050793          	mv	a5,a0
60000c2c:	0027f793          	andi	a5,a5,2
60000c30:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:95
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
60000c34:	0380006f          	j	60000c6c <UART_init+0xf4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:97
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
60000c38:	fdc42783          	lw	a5,-36(s0)
60000c3c:	0007a783          	lw	a5,0(a5)
60000c40:	00478793          	addi	a5,a5,4
60000c44:	00078513          	mv	a0,a5
60000c48:	ef1ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000c4c:	fdc42783          	lw	a5,-36(s0)
60000c50:	0007a783          	lw	a5,0(a5)
60000c54:	01078793          	addi	a5,a5,16
60000c58:	00078513          	mv	a0,a5
60000c5c:	eddff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000c60:	00050793          	mv	a5,a0
60000c64:	0027f793          	andi	a5,a5,2
60000c68:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:95
        while ( rx_full )
60000c6c:	fef44783          	lbu	a5,-17(s0)
60000c70:	fc0794e3          	bnez	a5,60000c38 <UART_init+0xc0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:105
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
60000c74:	fdc42783          	lw	a5,-36(s0)
60000c78:	00078223          	sb	zero,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:107
    }
}
60000c7c:	00000013          	nop
60000c80:	02c12083          	lw	ra,44(sp)
60000c84:	02812403          	lw	s0,40(sp)
60000c88:	03010113          	addi	sp,sp,48
60000c8c:	00008067          	ret

60000c90 <UART_send>:
UART_send():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:120
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
60000c90:	fd010113          	addi	sp,sp,-48
60000c94:	02112623          	sw	ra,44(sp)
60000c98:	02812423          	sw	s0,40(sp)
60000c9c:	03010413          	addi	s0,sp,48
60000ca0:	fca42e23          	sw	a0,-36(s0)
60000ca4:	fcb42c23          	sw	a1,-40(s0)
60000ca8:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:128

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
60000cac:	fdc42783          	lw	a5,-36(s0)
60000cb0:	08078063          	beqz	a5,60000d30 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:128 (discriminator 1)
60000cb4:	fd842783          	lw	a5,-40(s0)
60000cb8:	06078c63          	beqz	a5,60000d30 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:129
        (tx_buffer != NULL_BUFFER)   &&
60000cbc:	fd442783          	lw	a5,-44(s0)
60000cc0:	06078863          	beqz	a5,60000d30 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
60000cc4:	fe042623          	sw	zero,-20(s0)
60000cc8:	05c0006f          	j	60000d24 <UART_send+0x94>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:136 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000ccc:	fdc42783          	lw	a5,-36(s0)
60000cd0:	0007a783          	lw	a5,0(a5)
60000cd4:	01078793          	addi	a5,a5,16
60000cd8:	00078513          	mv	a0,a5
60000cdc:	e5dff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000ce0:	00050793          	mv	a5,a0
60000ce4:	0017f793          	andi	a5,a5,1
60000ce8:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:138 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
60000cec:	feb44783          	lbu	a5,-21(s0)
60000cf0:	fc078ee3          	beqz	a5,60000ccc <UART_send+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:140 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
60000cf4:	fdc42783          	lw	a5,-36(s0)
60000cf8:	0007a683          	lw	a3,0(a5)
60000cfc:	fd842703          	lw	a4,-40(s0)
60000d00:	fec42783          	lw	a5,-20(s0)
60000d04:	00f707b3          	add	a5,a4,a5
60000d08:	0007c783          	lbu	a5,0(a5)
60000d0c:	00078593          	mv	a1,a5
60000d10:	00068513          	mv	a0,a3
60000d14:	e1dff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
60000d18:	fec42783          	lw	a5,-20(s0)
60000d1c:	00178793          	addi	a5,a5,1
60000d20:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132 (discriminator 1)
60000d24:	fec42703          	lw	a4,-20(s0)
60000d28:	fd442783          	lw	a5,-44(s0)
60000d2c:	faf760e3          	bltu	a4,a5,60000ccc <UART_send+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:144
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
60000d30:	00000013          	nop
60000d34:	02c12083          	lw	ra,44(sp)
60000d38:	02812403          	lw	s0,40(sp)
60000d3c:	03010113          	addi	sp,sp,48
60000d40:	00008067          	ret

60000d44 <UART_polled_tx_string>:
UART_polled_tx_string():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:238
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
60000d44:	fd010113          	addi	sp,sp,-48
60000d48:	02112623          	sw	ra,44(sp)
60000d4c:	02812423          	sw	s0,40(sp)
60000d50:	03010413          	addi	s0,sp,48
60000d54:	fca42e23          	sw	a0,-36(s0)
60000d58:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
60000d5c:	fdc42783          	lw	a5,-36(s0)
60000d60:	08078063          	beqz	a5,60000de0 <UART_polled_tx_string+0x9c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245 (discriminator 1)
60000d64:	fd842783          	lw	a5,-40(s0)
60000d68:	06078c63          	beqz	a5,60000de0 <UART_polled_tx_string+0x9c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:247
    {
        char_idx = 0U;
60000d6c:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000d70:	05c0006f          	j	60000dcc <UART_polled_tx_string+0x88>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:252 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000d74:	fdc42783          	lw	a5,-36(s0)
60000d78:	0007a783          	lw	a5,0(a5)
60000d7c:	01078793          	addi	a5,a5,16
60000d80:	00078513          	mv	a0,a5
60000d84:	db5ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000d88:	00050793          	mv	a5,a0
60000d8c:	0017f793          	andi	a5,a5,1
60000d90:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:254 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
60000d94:	feb44783          	lbu	a5,-21(s0)
60000d98:	fc078ee3          	beqz	a5,60000d74 <UART_polled_tx_string+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:256
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
60000d9c:	fdc42783          	lw	a5,-36(s0)
60000da0:	0007a683          	lw	a3,0(a5)
60000da4:	fd842703          	lw	a4,-40(s0)
60000da8:	fec42783          	lw	a5,-20(s0)
60000dac:	00f707b3          	add	a5,a4,a5
60000db0:	0007c783          	lbu	a5,0(a5)
60000db4:	00078593          	mv	a1,a5
60000db8:	00068513          	mv	a0,a3
60000dbc:	d75ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:258
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
60000dc0:	fec42783          	lw	a5,-20(s0)
60000dc4:	00178793          	addi	a5,a5,1
60000dc8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000dcc:	fd842703          	lw	a4,-40(s0)
60000dd0:	fec42783          	lw	a5,-20(s0)
60000dd4:	00f707b3          	add	a5,a4,a5
60000dd8:	0007c783          	lbu	a5,0(a5)
60000ddc:	f8079ce3          	bnez	a5,60000d74 <UART_polled_tx_string+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreUARTapb/core_uart_apb.c:261
        }
    }
}
60000de0:	00000013          	nop
60000de4:	02c12083          	lw	ra,44(sp)
60000de8:	02812403          	lw	s0,40(sp)
60000dec:	03010113          	addi	sp,sp,48
60000df0:	00008067          	ret

60000df4 <GPIO_init>:
GPIO_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:37
(
    gpio_instance_t *   this_gpio,
    addr_t              base_addr,
    gpio_apb_width_t    bus_width
)
{
60000df4:	fd010113          	addi	sp,sp,-48
60000df8:	02112623          	sw	ra,44(sp)
60000dfc:	02812423          	sw	s0,40(sp)
60000e00:	03010413          	addi	s0,sp,48
60000e04:	fca42e23          	sw	a0,-36(s0)
60000e08:	fcb42c23          	sw	a1,-40(s0)
60000e0c:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:38
    uint8_t i = 0;
60000e10:	fe0407a3          	sb	zero,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:39
    addr_t cfg_reg_addr = base_addr;
60000e14:	fd842783          	lw	a5,-40(s0)
60000e18:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:41
    
    this_gpio->base_addr = base_addr;
60000e1c:	fdc42783          	lw	a5,-36(s0)
60000e20:	fd842703          	lw	a4,-40(s0)
60000e24:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:42
    this_gpio->apb_bus_width = bus_width;
60000e28:	fdc42783          	lw	a5,-36(s0)
60000e2c:	fd442703          	lw	a4,-44(s0)
60000e30:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:45
    
    /* Clear configuration. */
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
60000e34:	fe0407a3          	sb	zero,-17(s0)
60000e38:	fd842783          	lw	a5,-40(s0)
60000e3c:	fef42423          	sw	a5,-24(s0)
60000e40:	0280006f          	j	60000e68 <GPIO_init+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:47 (discriminator 3)
    {
        HW_set_8bit_reg( cfg_reg_addr, 0 );
60000e44:	00000593          	li	a1,0
60000e48:	fe842503          	lw	a0,-24(s0)
60000e4c:	ce5ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:48 (discriminator 3)
        cfg_reg_addr += 4;
60000e50:	fe842783          	lw	a5,-24(s0)
60000e54:	00478793          	addi	a5,a5,4
60000e58:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:45 (discriminator 3)
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
60000e5c:	fef44783          	lbu	a5,-17(s0)
60000e60:	00178793          	addi	a5,a5,1
60000e64:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:45 (discriminator 1)
60000e68:	fef44703          	lbu	a4,-17(s0)
60000e6c:	01f00793          	li	a5,31
60000e70:	fce7fae3          	bgeu	a5,a4,60000e44 <GPIO_init+0x50>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:51
    }
    /* Clear any pending interrupts */
    switch( this_gpio->apb_bus_width )
60000e74:	fdc42783          	lw	a5,-36(s0)
60000e78:	0047a783          	lw	a5,4(a5)
60000e7c:	00100713          	li	a4,1
60000e80:	02e78663          	beq	a5,a4,60000eac <GPIO_init+0xb8>
60000e84:	06078263          	beqz	a5,60000ee8 <GPIO_init+0xf4>
60000e88:	00200713          	li	a4,2
60000e8c:	0ce79063          	bne	a5,a4,60000f4c <GPIO_init+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:54
    {
        case GPIO_APB_32_BITS_BUS:
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
60000e90:	fdc42783          	lw	a5,-36(s0)
60000e94:	0007a783          	lw	a5,0(a5)
60000e98:	08078793          	addi	a5,a5,128
60000e9c:	fff00593          	li	a1,-1
60000ea0:	00078513          	mv	a0,a5
60000ea4:	bfdff0ef          	jal	ra,60000aa0 <HW_set_32bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:55
            break;
60000ea8:	0a80006f          	j	60000f50 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:58
            
        case GPIO_APB_16_BITS_BUS:
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, (uint16_t)CLEAR_ALL_IRQ16 );
60000eac:	fdc42783          	lw	a5,-36(s0)
60000eb0:	0007a783          	lw	a5,0(a5)
60000eb4:	08078713          	addi	a4,a5,128
60000eb8:	000107b7          	lui	a5,0x10
60000ebc:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60000ec0:	00070513          	mv	a0,a4
60000ec4:	c25ff0ef          	jal	ra,60000ae8 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
60000ec8:	fdc42783          	lw	a5,-36(s0)
60000ecc:	0007a783          	lw	a5,0(a5)
60000ed0:	08478713          	addi	a4,a5,132
60000ed4:	000107b7          	lui	a5,0x10
60000ed8:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60000edc:	00070513          	mv	a0,a4
60000ee0:	c09ff0ef          	jal	ra,60000ae8 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:60
            break;
60000ee4:	06c0006f          	j	60000f50 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:63
            
        case GPIO_APB_8_BITS_BUS:
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, (uint8_t)CLEAR_ALL_IRQ8 );
60000ee8:	fdc42783          	lw	a5,-36(s0)
60000eec:	0007a783          	lw	a5,0(a5)
60000ef0:	08078793          	addi	a5,a5,128
60000ef4:	0ff00593          	li	a1,255
60000ef8:	00078513          	mv	a0,a5
60000efc:	c35ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:64
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, (uint8_t)CLEAR_ALL_IRQ8 );
60000f00:	fdc42783          	lw	a5,-36(s0)
60000f04:	0007a783          	lw	a5,0(a5)
60000f08:	08478793          	addi	a5,a5,132
60000f0c:	0ff00593          	li	a1,255
60000f10:	00078513          	mv	a0,a5
60000f14:	c1dff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:65
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, (uint8_t)CLEAR_ALL_IRQ8 );
60000f18:	fdc42783          	lw	a5,-36(s0)
60000f1c:	0007a783          	lw	a5,0(a5)
60000f20:	08878793          	addi	a5,a5,136
60000f24:	0ff00593          	li	a1,255
60000f28:	00078513          	mv	a0,a5
60000f2c:	c05ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
60000f30:	fdc42783          	lw	a5,-36(s0)
60000f34:	0007a783          	lw	a5,0(a5)
60000f38:	08c78793          	addi	a5,a5,140
60000f3c:	0ff00593          	li	a1,255
60000f40:	00078513          	mv	a0,a5
60000f44:	bedff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:67
            break;
60000f48:	0080006f          	j	60000f50 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:71
            
        default:
            HAL_ASSERT(0);
            break;
60000f4c:	00000013          	nop
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:73
    }
}
60000f50:	00000013          	nop
60000f54:	02c12083          	lw	ra,44(sp)
60000f58:	02812403          	lw	s0,40(sp)
60000f5c:	03010113          	addi	sp,sp,48
60000f60:	00008067          	ret

60000f64 <GPIO_set_output>:
GPIO_set_output():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:232
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint8_t             value
)
{
60000f64:	fd010113          	addi	sp,sp,-48
60000f68:	02112623          	sw	ra,44(sp)
60000f6c:	02812423          	sw	s0,40(sp)
60000f70:	03010413          	addi	s0,sp,48
60000f74:	fca42e23          	sw	a0,-36(s0)
60000f78:	fcb42c23          	sw	a1,-40(s0)
60000f7c:	00060793          	mv	a5,a2
60000f80:	fcf40ba3          	sb	a5,-41(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:236
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
            
    switch( this_gpio->apb_bus_width )
60000f84:	fdc42783          	lw	a5,-36(s0)
60000f88:	0047a783          	lw	a5,4(a5)
60000f8c:	00100713          	li	a4,1
60000f90:	08e78663          	beq	a5,a4,6000101c <GPIO_set_output+0xb8>
60000f94:	12078e63          	beqz	a5,600010d0 <GPIO_set_output+0x16c>
60000f98:	00200713          	li	a4,2
60000f9c:	1ee79463          	bne	a5,a4,60001184 <GPIO_set_output+0x220>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:242
    {
        case GPIO_APB_32_BITS_BUS:
            {
                uint32_t outputs_state;
                
                outputs_state = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
60000fa0:	fdc42783          	lw	a5,-36(s0)
60000fa4:	0007a783          	lw	a5,0(a5)
60000fa8:	0a078793          	addi	a5,a5,160
60000fac:	00078513          	mv	a0,a5
60000fb0:	af9ff0ef          	jal	ra,60000aa8 <HW_get_32bit_reg>
60000fb4:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:243
                if ( 0 == value )
60000fb8:	fd744783          	lbu	a5,-41(s0)
60000fbc:	02079463          	bnez	a5,60000fe4 <GPIO_set_output+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:245
                {
                    outputs_state &= ~(1 << port_id);
60000fc0:	fd842783          	lw	a5,-40(s0)
60000fc4:	00100713          	li	a4,1
60000fc8:	00f717b3          	sll	a5,a4,a5
60000fcc:	fff7c793          	not	a5,a5
60000fd0:	00078713          	mv	a4,a5
60000fd4:	fec42783          	lw	a5,-20(s0)
60000fd8:	00e7f7b3          	and	a5,a5,a4
60000fdc:	fef42623          	sw	a5,-20(s0)
60000fe0:	0200006f          	j	60001000 <GPIO_set_output+0x9c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:249
                }
                else
                {
                    outputs_state |= 1 << port_id;
60000fe4:	fd842783          	lw	a5,-40(s0)
60000fe8:	00100713          	li	a4,1
60000fec:	00f717b3          	sll	a5,a4,a5
60000ff0:	00078713          	mv	a4,a5
60000ff4:	fec42783          	lw	a5,-20(s0)
60000ff8:	00e7e7b3          	or	a5,a5,a4
60000ffc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:251
                }
                HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, outputs_state );
60001000:	fdc42783          	lw	a5,-36(s0)
60001004:	0007a783          	lw	a5,0(a5)
60001008:	0a078793          	addi	a5,a5,160
6000100c:	fec42583          	lw	a1,-20(s0)
60001010:	00078513          	mv	a0,a5
60001014:	a8dff0ef          	jal	ra,60000aa0 <HW_set_32bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:262
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT ) == outputs_state );
            }
            break;
60001018:	1700006f          	j	60001188 <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:267
            
        case GPIO_APB_16_BITS_BUS:
            {
                uint16_t outputs_state;
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 4) * 4);
6000101c:	fdc42783          	lw	a5,-36(s0)
60001020:	0007a703          	lw	a4,0(a5)
60001024:	fd842783          	lw	a5,-40(s0)
60001028:	0047d793          	srli	a5,a5,0x4
6000102c:	00279793          	slli	a5,a5,0x2
60001030:	00f707b3          	add	a5,a4,a5
60001034:	0a078793          	addi	a5,a5,160
60001038:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:269
                
                outputs_state = HW_get_16bit_reg( gpio_out_reg_addr );
6000103c:	fe442503          	lw	a0,-28(s0)
60001040:	ab1ff0ef          	jal	ra,60000af0 <HW_get_16bit_reg>
60001044:	00050793          	mv	a5,a0
60001048:	fef41523          	sh	a5,-22(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:270
                if ( 0 == value )
6000104c:	fd744783          	lbu	a5,-41(s0)
60001050:	04079063          	bnez	a5,60001090 <GPIO_set_output+0x12c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:272
                {
                    outputs_state &= ~(1 << (port_id & 0x0F));
60001054:	fd842783          	lw	a5,-40(s0)
60001058:	00f7f793          	andi	a5,a5,15
6000105c:	00100713          	li	a4,1
60001060:	00f717b3          	sll	a5,a4,a5
60001064:	01079793          	slli	a5,a5,0x10
60001068:	4107d793          	srai	a5,a5,0x10
6000106c:	fff7c793          	not	a5,a5
60001070:	01079713          	slli	a4,a5,0x10
60001074:	41075713          	srai	a4,a4,0x10
60001078:	fea41783          	lh	a5,-22(s0)
6000107c:	00f777b3          	and	a5,a4,a5
60001080:	01079793          	slli	a5,a5,0x10
60001084:	4107d793          	srai	a5,a5,0x10
60001088:	fef41523          	sh	a5,-22(s0)
6000108c:	0300006f          	j	600010bc <GPIO_set_output+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:276
                }
                else
                {
                    outputs_state |= 1 << (port_id & 0x0F);
60001090:	fd842783          	lw	a5,-40(s0)
60001094:	00f7f793          	andi	a5,a5,15
60001098:	00100713          	li	a4,1
6000109c:	00f717b3          	sll	a5,a4,a5
600010a0:	01079713          	slli	a4,a5,0x10
600010a4:	41075713          	srai	a4,a4,0x10
600010a8:	fea41783          	lh	a5,-22(s0)
600010ac:	00f767b3          	or	a5,a4,a5
600010b0:	01079793          	slli	a5,a5,0x10
600010b4:	4107d793          	srai	a5,a5,0x10
600010b8:	fef41523          	sh	a5,-22(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:278
                }
                HW_set_16bit_reg( gpio_out_reg_addr, outputs_state );
600010bc:	fea45783          	lhu	a5,-22(s0)
600010c0:	00078593          	mv	a1,a5
600010c4:	fe442503          	lw	a0,-28(s0)
600010c8:	a21ff0ef          	jal	ra,60000ae8 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:289
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HW_get_16bit_reg( gpio_out_reg_addr ) == outputs_state );
            }
            break;
600010cc:	0bc0006f          	j	60001188 <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:294
            
        case GPIO_APB_8_BITS_BUS:
            {
                uint8_t outputs_state;
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 3) * 4);
600010d0:	fdc42783          	lw	a5,-36(s0)
600010d4:	0007a703          	lw	a4,0(a5)
600010d8:	fd842783          	lw	a5,-40(s0)
600010dc:	0037d793          	srli	a5,a5,0x3
600010e0:	00279793          	slli	a5,a5,0x2
600010e4:	00f707b3          	add	a5,a4,a5
600010e8:	0a078793          	addi	a5,a5,160
600010ec:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:296
                
                outputs_state = HW_get_8bit_reg( gpio_out_reg_addr );
600010f0:	fe042503          	lw	a0,-32(s0)
600010f4:	a45ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
600010f8:	00050793          	mv	a5,a0
600010fc:	fef404a3          	sb	a5,-23(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:297
                if ( 0 == value )
60001100:	fd744783          	lbu	a5,-41(s0)
60001104:	04079063          	bnez	a5,60001144 <GPIO_set_output+0x1e0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:299
                {
                    outputs_state &= ~(1 << (port_id & 0x07));
60001108:	fd842783          	lw	a5,-40(s0)
6000110c:	0077f793          	andi	a5,a5,7
60001110:	00100713          	li	a4,1
60001114:	00f717b3          	sll	a5,a4,a5
60001118:	01879793          	slli	a5,a5,0x18
6000111c:	4187d793          	srai	a5,a5,0x18
60001120:	fff7c793          	not	a5,a5
60001124:	01879713          	slli	a4,a5,0x18
60001128:	41875713          	srai	a4,a4,0x18
6000112c:	fe940783          	lb	a5,-23(s0)
60001130:	00f777b3          	and	a5,a4,a5
60001134:	01879793          	slli	a5,a5,0x18
60001138:	4187d793          	srai	a5,a5,0x18
6000113c:	fef404a3          	sb	a5,-23(s0)
60001140:	0300006f          	j	60001170 <GPIO_set_output+0x20c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:303
                }
                else
                {
                    outputs_state |= 1 << (port_id & 0x07);
60001144:	fd842783          	lw	a5,-40(s0)
60001148:	0077f793          	andi	a5,a5,7
6000114c:	00100713          	li	a4,1
60001150:	00f717b3          	sll	a5,a4,a5
60001154:	01879713          	slli	a4,a5,0x18
60001158:	41875713          	srai	a4,a4,0x18
6000115c:	fe940783          	lb	a5,-23(s0)
60001160:	00f767b3          	or	a5,a4,a5
60001164:	01879793          	slli	a5,a5,0x18
60001168:	4187d793          	srai	a5,a5,0x18
6000116c:	fef404a3          	sb	a5,-23(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:305
                }
                HW_set_8bit_reg( gpio_out_reg_addr, outputs_state );
60001170:	fe944783          	lbu	a5,-23(s0)
60001174:	00078593          	mv	a1,a5
60001178:	fe042503          	lw	a0,-32(s0)
6000117c:	9b5ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:316
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HW_get_8bit_reg( gpio_out_reg_addr ) == outputs_state );
            }
            break;
60001180:	0080006f          	j	60001188 <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:320
            
        default:
            HAL_ASSERT(0);
            break;
60001184:	00000013          	nop
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:322
    }
}
60001188:	00000013          	nop
6000118c:	02c12083          	lw	ra,44(sp)
60001190:	02812403          	lw	s0,40(sp)
60001194:	03010113          	addi	sp,sp,48
60001198:	00008067          	ret

6000119c <GPIO_enable_irq>:
GPIO_enable_irq():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:387
void GPIO_enable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
6000119c:	fd010113          	addi	sp,sp,-48
600011a0:	02112623          	sw	ra,44(sp)
600011a4:	02812423          	sw	s0,40(sp)
600011a8:	03010413          	addi	s0,sp,48
600011ac:	fca42e23          	sw	a0,-36(s0)
600011b0:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:389
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
600011b4:	fdc42783          	lw	a5,-36(s0)
600011b8:	0007a783          	lw	a5,0(a5)
600011bc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:393
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
600011c0:	fd842703          	lw	a4,-40(s0)
600011c4:	01f00793          	li	a5,31
600011c8:	04e7e063          	bltu	a5,a4,60001208 <GPIO_enable_irq+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:395
    {
        cfg_reg_addr += (port_id * 4);
600011cc:	fd842783          	lw	a5,-40(s0)
600011d0:	00279793          	slli	a5,a5,0x2
600011d4:	fec42703          	lw	a4,-20(s0)
600011d8:	00f707b3          	add	a5,a4,a5
600011dc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:396
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
600011e0:	fec42503          	lw	a0,-20(s0)
600011e4:	955ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
600011e8:	00050793          	mv	a5,a0
600011ec:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:397
        cfg_value |= GPIO_INT_ENABLE_MASK;
600011f0:	fe842783          	lw	a5,-24(s0)
600011f4:	0087e793          	ori	a5,a5,8
600011f8:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:398
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
600011fc:	fe842583          	lw	a1,-24(s0)
60001200:	fec42503          	lw	a0,-20(s0)
60001204:	92dff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/CoreGPIO/core_gpio.c:400
    }
}
60001208:	00000013          	nop
6000120c:	02c12083          	lw	ra,44(sp)
60001210:	02812403          	lw	s0,40(sp)
60001214:	03010113          	addi	sp,sp,48
60001218:	00008067          	ret

6000121c <ADD2_init>:
ADD2_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:17
void ADD2_init
(
	add2_instance_t * this_add2,
	addr_t base_addr
)
{
6000121c:	fe010113          	addi	sp,sp,-32
60001220:	00112e23          	sw	ra,28(sp)
60001224:	00812c23          	sw	s0,24(sp)
60001228:	02010413          	addi	s0,sp,32
6000122c:	fea42623          	sw	a0,-20(s0)
60001230:	feb42423          	sw	a1,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:18
	this_add2->base_addr = base_addr;
60001234:	fec42783          	lw	a5,-20(s0)
60001238:	fe842703          	lw	a4,-24(s0)
6000123c:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:21

	// clear all
	HAL_set_8bit_reg(this_add2->base_addr, A, 0x00);
60001240:	fec42783          	lw	a5,-20(s0)
60001244:	0007a783          	lw	a5,0(a5)
60001248:	00000593          	li	a1,0
6000124c:	00078513          	mv	a0,a5
60001250:	8e1ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:22
	HAL_set_8bit_reg(this_add2->base_addr, B, 0x00);
60001254:	fec42783          	lw	a5,-20(s0)
60001258:	0007a783          	lw	a5,0(a5)
6000125c:	00478793          	addi	a5,a5,4
60001260:	00000593          	li	a1,0
60001264:	00078513          	mv	a0,a5
60001268:	8c9ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:24

}
6000126c:	00000013          	nop
60001270:	01c12083          	lw	ra,28(sp)
60001274:	01812403          	lw	s0,24(sp)
60001278:	02010113          	addi	sp,sp,32
6000127c:	00008067          	ret

60001280 <set_A>:
set_A():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:31
void set_A
(
	add2_instance_t * this_add2,
	uint8_t aValue
)
{
60001280:	fe010113          	addi	sp,sp,-32
60001284:	00112e23          	sw	ra,28(sp)
60001288:	00812c23          	sw	s0,24(sp)
6000128c:	02010413          	addi	s0,sp,32
60001290:	fea42623          	sw	a0,-20(s0)
60001294:	00058793          	mv	a5,a1
60001298:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:32
	HAL_set_8bit_reg(this_add2->base_addr, A, aValue);
6000129c:	fec42783          	lw	a5,-20(s0)
600012a0:	0007a783          	lw	a5,0(a5)
600012a4:	feb44703          	lbu	a4,-21(s0)
600012a8:	00070593          	mv	a1,a4
600012ac:	00078513          	mv	a0,a5
600012b0:	881ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:35
	HAL_ASSERT( set_AB( this_add2 ) == aValue );

}
600012b4:	00000013          	nop
600012b8:	01c12083          	lw	ra,28(sp)
600012bc:	01812403          	lw	s0,24(sp)
600012c0:	02010113          	addi	sp,sp,32
600012c4:	00008067          	ret

600012c8 <set_B>:
set_B():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:42
void set_B
(
	add2_instance_t * this_add2,
	uint8_t bValue
)
{
600012c8:	fe010113          	addi	sp,sp,-32
600012cc:	00112e23          	sw	ra,28(sp)
600012d0:	00812c23          	sw	s0,24(sp)
600012d4:	02010413          	addi	s0,sp,32
600012d8:	fea42623          	sw	a0,-20(s0)
600012dc:	00058793          	mv	a5,a1
600012e0:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:43
	HAL_set_8bit_reg(this_add2->base_addr, B, bValue);
600012e4:	fec42783          	lw	a5,-20(s0)
600012e8:	0007a783          	lw	a5,0(a5)
600012ec:	00478793          	addi	a5,a5,4
600012f0:	feb44703          	lbu	a4,-21(s0)
600012f4:	00070593          	mv	a1,a4
600012f8:	00078513          	mv	a0,a5
600012fc:	835ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:46
	HAL_ASSERT( set_AB( this_add2 ) == bValue );

}
60001300:	00000013          	nop
60001304:	01c12083          	lw	ra,28(sp)
60001308:	01812403          	lw	s0,24(sp)
6000130c:	02010113          	addi	sp,sp,32
60001310:	00008067          	ret

60001314 <get_ABX>:
get_ABX():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:53
uint8_t get_ABX
(
	add2_instance_t * this_add2,
	uint8_t value
)
{
60001314:	fd010113          	addi	sp,sp,-48
60001318:	02112623          	sw	ra,44(sp)
6000131c:	02812423          	sw	s0,40(sp)
60001320:	03010413          	addi	s0,sp,48
60001324:	fca42e23          	sw	a0,-36(s0)
60001328:	00058793          	mv	a5,a1
6000132c:	fcf40da3          	sb	a5,-37(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:54
	uint8_t output_x = 0;
60001330:	fe0407a3          	sb	zero,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:55
	if(value == 0)
60001334:	fdb44783          	lbu	a5,-37(s0)
60001338:	02079063          	bnez	a5,60001358 <get_ABX+0x44>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:56
		output_x = HAL_get_8bit_reg(this_add2->base_addr, A);
6000133c:	fdc42783          	lw	a5,-36(s0)
60001340:	0007a783          	lw	a5,0(a5)
60001344:	00078513          	mv	a0,a5
60001348:	ff0ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
6000134c:	00050793          	mv	a5,a0
60001350:	fef407a3          	sb	a5,-17(s0)
60001354:	0580006f          	j	600013ac <get_ABX+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:57
	else if(value == 1)
60001358:	fdb44703          	lbu	a4,-37(s0)
6000135c:	00100793          	li	a5,1
60001360:	02f71263          	bne	a4,a5,60001384 <get_ABX+0x70>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:58
		output_x = HAL_get_8bit_reg(this_add2->base_addr, B);
60001364:	fdc42783          	lw	a5,-36(s0)
60001368:	0007a783          	lw	a5,0(a5)
6000136c:	00478793          	addi	a5,a5,4
60001370:	00078513          	mv	a0,a5
60001374:	fc4ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60001378:	00050793          	mv	a5,a0
6000137c:	fef407a3          	sb	a5,-17(s0)
60001380:	02c0006f          	j	600013ac <get_ABX+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:59
	else if(value == 2)
60001384:	fdb44703          	lbu	a4,-37(s0)
60001388:	00200793          	li	a5,2
6000138c:	02f71063          	bne	a4,a5,600013ac <get_ABX+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:60
		output_x = HAL_get_8bit_reg(this_add2->base_addr, X);
60001390:	fdc42783          	lw	a5,-36(s0)
60001394:	0007a783          	lw	a5,0(a5)
60001398:	00878793          	addi	a5,a5,8
6000139c:	00078513          	mv	a0,a5
600013a0:	f98ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
600013a4:	00050793          	mv	a5,a0
600013a8:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:64
	else
		HAL_ASSERT(0);

	return output_x;
600013ac:	fef44783          	lbu	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../drivers/ADD2/ADD2.c:65
}
600013b0:	00078513          	mv	a0,a5
600013b4:	02c12083          	lw	ra,44(sp)
600013b8:	02812403          	lw	s0,40(sp)
600013bc:	03010113          	addi	sp,sp,48
600013c0:	00008067          	ret

600013c4 <pvPortMalloc>:
pvPortMalloc():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
600013c4:	fc010113          	addi	sp,sp,-64
600013c8:	02112e23          	sw	ra,60(sp)
600013cc:	02812c23          	sw	s0,56(sp)
600013d0:	04010413          	addi	s0,sp,64
600013d4:	fca42623          	sw	a0,-52(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
600013d8:	fe042223          	sw	zero,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
600013dc:	7a5000ef          	jal	ra,60002380 <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
600013e0:	9181a783          	lw	a5,-1768(gp) # 80000118 <xHeapHasBeenInitialised.2779>
600013e4:	00079863          	bnez	a5,600013f4 <pvPortMalloc+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
600013e8:	284000ef          	jal	ra,6000166c <prvHeapInit>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
600013ec:	00100713          	li	a4,1
600013f0:	90e1ac23          	sw	a4,-1768(gp) # 80000118 <xHeapHasBeenInitialised.2779>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
600013f4:	fcc42783          	lw	a5,-52(s0)
600013f8:	02078a63          	beqz	a5,6000142c <pvPortMalloc+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
600013fc:	00800793          	li	a5,8
60001400:	00078713          	mv	a4,a5
60001404:	fcc42783          	lw	a5,-52(s0)
60001408:	00e787b3          	add	a5,a5,a4
6000140c:	fcf42623          	sw	a5,-52(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
60001410:	fcc42783          	lw	a5,-52(s0)
60001414:	0037f793          	andi	a5,a5,3
60001418:	00078a63          	beqz	a5,6000142c <pvPortMalloc+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
6000141c:	fcc42783          	lw	a5,-52(s0)
60001420:	ffc7f793          	andi	a5,a5,-4
60001424:	00478793          	addi	a5,a5,4
60001428:	fcf42623          	sw	a5,-52(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
6000142c:	fcc42783          	lw	a5,-52(s0)
60001430:	14078463          	beqz	a5,60001578 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
60001434:	fcc42703          	lw	a4,-52(s0)
60001438:	000197b7          	lui	a5,0x19
6000143c:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x17ffb>
60001440:	12e7ec63          	bltu	a5,a4,60001578 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
60001444:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
60001448:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
6000144c:	9081a783          	lw	a5,-1784(gp) # 80000108 <xStart>
60001450:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
60001454:	0180006f          	j	6000146c <pvPortMalloc+0xa8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
60001458:	fec42783          	lw	a5,-20(s0)
6000145c:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
60001460:	fec42783          	lw	a5,-20(s0)
60001464:	0007a783          	lw	a5,0(a5)
60001468:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
6000146c:	fec42783          	lw	a5,-20(s0)
60001470:	0047a783          	lw	a5,4(a5)
60001474:	fcc42703          	lw	a4,-52(s0)
60001478:	00e7f863          	bgeu	a5,a4,60001488 <pvPortMalloc+0xc4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
6000147c:	fec42783          	lw	a5,-20(s0)
60001480:	0007a783          	lw	a5,0(a5)
60001484:	fc079ae3          	bnez	a5,60001458 <pvPortMalloc+0x94>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
60001488:	fec42703          	lw	a4,-20(s0)
6000148c:	91018793          	addi	a5,gp,-1776 # 80000110 <xEnd>
60001490:	0ef70463          	beq	a4,a5,60001578 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
60001494:	fe842783          	lw	a5,-24(s0)
60001498:	0007a783          	lw	a5,0(a5)
6000149c:	00800713          	li	a4,8
600014a0:	00e787b3          	add	a5,a5,a4
600014a4:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
600014a8:	fec42783          	lw	a5,-20(s0)
600014ac:	0007a703          	lw	a4,0(a5)
600014b0:	fe842783          	lw	a5,-24(s0)
600014b4:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
600014b8:	fec42783          	lw	a5,-20(s0)
600014bc:	0047a703          	lw	a4,4(a5)
600014c0:	fcc42783          	lw	a5,-52(s0)
600014c4:	40f707b3          	sub	a5,a4,a5
600014c8:	00800713          	li	a4,8
600014cc:	00171713          	slli	a4,a4,0x1
600014d0:	08f77663          	bgeu	a4,a5,6000155c <pvPortMalloc+0x198>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
600014d4:	fec42703          	lw	a4,-20(s0)
600014d8:	fcc42783          	lw	a5,-52(s0)
600014dc:	00f707b3          	add	a5,a4,a5
600014e0:	fcf42e23          	sw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
600014e4:	fec42783          	lw	a5,-20(s0)
600014e8:	0047a703          	lw	a4,4(a5)
600014ec:	fcc42783          	lw	a5,-52(s0)
600014f0:	40f70733          	sub	a4,a4,a5
600014f4:	fdc42783          	lw	a5,-36(s0)
600014f8:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
600014fc:	fec42783          	lw	a5,-20(s0)
60001500:	fcc42703          	lw	a4,-52(s0)
60001504:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
60001508:	fdc42783          	lw	a5,-36(s0)
6000150c:	0047a783          	lw	a5,4(a5)
60001510:	fcf42c23          	sw	a5,-40(s0)
60001514:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
60001518:	fef42023          	sw	a5,-32(s0)
6000151c:	0100006f          	j	6000152c <pvPortMalloc+0x168>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
60001520:	fe042783          	lw	a5,-32(s0)
60001524:	0007a783          	lw	a5,0(a5)
60001528:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
6000152c:	fe042783          	lw	a5,-32(s0)
60001530:	0007a783          	lw	a5,0(a5)
60001534:	0047a783          	lw	a5,4(a5)
60001538:	fd842703          	lw	a4,-40(s0)
6000153c:	fee7e2e3          	bltu	a5,a4,60001520 <pvPortMalloc+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
60001540:	fe042783          	lw	a5,-32(s0)
60001544:	0007a703          	lw	a4,0(a5)
60001548:	fdc42783          	lw	a5,-36(s0)
6000154c:	00e7a023          	sw	a4,0(a5)
60001550:	fe042783          	lw	a5,-32(s0)
60001554:	fdc42703          	lw	a4,-36(s0)
60001558:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
6000155c:	800007b7          	lui	a5,0x80000
60001560:	0047a703          	lw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
60001564:	fec42783          	lw	a5,-20(s0)
60001568:	0047a783          	lw	a5,4(a5)
6000156c:	40f70733          	sub	a4,a4,a5
60001570:	800007b7          	lui	a5,0x80000
60001574:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
60001578:	631000ef          	jal	ra,600023a8 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
6000157c:	fe442783          	lw	a5,-28(s0)
60001580:	00079463          	bnez	a5,60001588 <pvPortMalloc+0x1c4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
60001584:	2e5010ef          	jal	ra,60003068 <vApplicationMallocFailedHook>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
60001588:	fe442783          	lw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
6000158c:	00078513          	mv	a0,a5
60001590:	03c12083          	lw	ra,60(sp)
60001594:	03812403          	lw	s0,56(sp)
60001598:	04010113          	addi	sp,sp,64
6000159c:	00008067          	ret

600015a0 <vPortFree>:
vPortFree():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
600015a0:	fd010113          	addi	sp,sp,-48
600015a4:	02112623          	sw	ra,44(sp)
600015a8:	02812423          	sw	s0,40(sp)
600015ac:	03010413          	addi	s0,sp,48
600015b0:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
600015b4:	fdc42783          	lw	a5,-36(s0)
600015b8:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
600015bc:	fdc42783          	lw	a5,-36(s0)
600015c0:	08078c63          	beqz	a5,60001658 <vPortFree+0xb8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
600015c4:	00800793          	li	a5,8
600015c8:	40f007b3          	neg	a5,a5
600015cc:	fe842703          	lw	a4,-24(s0)
600015d0:	00f707b3          	add	a5,a4,a5
600015d4:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
600015d8:	fe842783          	lw	a5,-24(s0)
600015dc:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
600015e0:	5a1000ef          	jal	ra,60002380 <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
600015e4:	fe442783          	lw	a5,-28(s0)
600015e8:	0047a783          	lw	a5,4(a5)
600015ec:	fef42023          	sw	a5,-32(s0)
600015f0:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
600015f4:	fef42623          	sw	a5,-20(s0)
600015f8:	0100006f          	j	60001608 <vPortFree+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
600015fc:	fec42783          	lw	a5,-20(s0)
60001600:	0007a783          	lw	a5,0(a5)
60001604:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
60001608:	fec42783          	lw	a5,-20(s0)
6000160c:	0007a783          	lw	a5,0(a5)
60001610:	0047a783          	lw	a5,4(a5)
60001614:	fe042703          	lw	a4,-32(s0)
60001618:	fee7e2e3          	bltu	a5,a4,600015fc <vPortFree+0x5c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
6000161c:	fec42783          	lw	a5,-20(s0)
60001620:	0007a703          	lw	a4,0(a5)
60001624:	fe442783          	lw	a5,-28(s0)
60001628:	00e7a023          	sw	a4,0(a5)
6000162c:	fec42783          	lw	a5,-20(s0)
60001630:	fe442703          	lw	a4,-28(s0)
60001634:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
60001638:	fe442783          	lw	a5,-28(s0)
6000163c:	0047a703          	lw	a4,4(a5)
60001640:	800007b7          	lui	a5,0x80000
60001644:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4db4>
60001648:	00f70733          	add	a4,a4,a5
6000164c:	800007b7          	lui	a5,0x80000
60001650:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
60001654:	555000ef          	jal	ra,600023a8 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
60001658:	00000013          	nop
6000165c:	02c12083          	lw	ra,44(sp)
60001660:	02812403          	lw	s0,40(sp)
60001664:	03010113          	addi	sp,sp,48
60001668:	00008067          	ret

6000166c <prvHeapInit>:
prvHeapInit():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
6000166c:	fe010113          	addi	sp,sp,-32
60001670:	00812e23          	sw	s0,28(sp)
60001674:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
60001678:	800007b7          	lui	a5,0x80000
6000167c:	18478793          	addi	a5,a5,388 # 80000184 <__stack_top+0xfffe4f34>
60001680:	ffc7f793          	andi	a5,a5,-4
60001684:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
60001688:	fec42703          	lw	a4,-20(s0)
6000168c:	90e1a423          	sw	a4,-1784(gp) # 80000108 <xStart>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
60001690:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
60001694:	0007a223          	sw	zero,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
60001698:	91018793          	addi	a5,gp,-1776 # 80000110 <xEnd>
6000169c:	00019737          	lui	a4,0x19
600016a0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
600016a4:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
600016a8:	9001a823          	sw	zero,-1776(gp) # 80000110 <xEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
600016ac:	fec42783          	lw	a5,-20(s0)
600016b0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
600016b4:	fe842783          	lw	a5,-24(s0)
600016b8:	00019737          	lui	a4,0x19
600016bc:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
600016c0:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
600016c4:	fe842783          	lw	a5,-24(s0)
600016c8:	91018713          	addi	a4,gp,-1776 # 80000110 <xEnd>
600016cc:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
600016d0:	00000013          	nop
600016d4:	01c12403          	lw	s0,28(sp)
600016d8:	02010113          	addi	sp,sp,32
600016dc:	00008067          	ret

600016e0 <raise_soft_interrupt>:
raise_soft_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
600016e0:	fe010113          	addi	sp,sp,-32
600016e4:	00812e23          	sw	s0,28(sp)
600016e8:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
600016ec:	f14027f3          	csrr	a5,mhartid
600016f0:	fef42623          	sw	a5,-20(s0)
600016f4:	fec42783          	lw	a5,-20(s0)
600016f8:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
600016fc:	304467f3          	csrrsi	a5,mie,8
60001700:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
60001704:	44000737          	lui	a4,0x44000
60001708:	fe842783          	lw	a5,-24(s0)
6000170c:	00279793          	slli	a5,a5,0x2
60001710:	00f707b3          	add	a5,a4,a5
60001714:	00100713          	li	a4,1
60001718:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:233
}
6000171c:	00000013          	nop
60001720:	01c12403          	lw	s0,28(sp)
60001724:	02010113          	addi	sp,sp,32
60001728:	00008067          	ret

6000172c <vPortEnterCritical>:
vPortEnterCritical():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
6000172c:	ff010113          	addi	sp,sp,-16
60001730:	00812623          	sw	s0,12(sp)
60001734:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
60001738:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
6000173c:	800007b7          	lui	a5,0x80000
60001740:	0087a783          	lw	a5,8(a5) # 80000008 <__stack_top+0xfffe4db8>
60001744:	00178713          	addi	a4,a5,1
60001748:	800007b7          	lui	a5,0x80000
6000174c:	00e7a423          	sw	a4,8(a5) # 80000008 <__stack_top+0xfffe4db8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
60001750:	00000013          	nop
60001754:	00c12403          	lw	s0,12(sp)
60001758:	01010113          	addi	sp,sp,16
6000175c:	00008067          	ret

60001760 <vPortExitCritical>:
vPortExitCritical():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
60001760:	ff010113          	addi	sp,sp,-16
60001764:	00812623          	sw	s0,12(sp)
60001768:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
6000176c:	800007b7          	lui	a5,0x80000
60001770:	0087a783          	lw	a5,8(a5) # 80000008 <__stack_top+0xfffe4db8>
60001774:	fff78713          	addi	a4,a5,-1
60001778:	800007b7          	lui	a5,0x80000
6000177c:	00e7a423          	sw	a4,8(a5) # 80000008 <__stack_top+0xfffe4db8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
60001780:	800007b7          	lui	a5,0x80000
60001784:	0087a783          	lw	a5,8(a5) # 80000008 <__stack_top+0xfffe4db8>
60001788:	00079463          	bnez	a5,60001790 <vPortExitCritical+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
6000178c:	30046073          	csrsi	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
60001790:	00000013          	nop
60001794:	00c12403          	lw	s0,12(sp)
60001798:	01010113          	addi	sp,sp,16
6000179c:	00008067          	ret

600017a0 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
600017a0:	fe010113          	addi	sp,sp,-32
600017a4:	00812e23          	sw	s0,28(sp)
600017a8:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
600017ac:	80000637          	lui	a2,0x80000
600017b0:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
600017b4:	00062603          	lw	a2,0(a2)
600017b8:	fec42423          	sw	a2,-24(s0)
600017bc:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
600017c0:	80000637          	lui	a2,0x80000
600017c4:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
600017c8:	00462603          	lw	a2,4(a2)
600017cc:	00060693          	mv	a3,a2
600017d0:	00000713          	li	a4,0
600017d4:	00069813          	slli	a6,a3,0x0
600017d8:	00000793          	li	a5,0
600017dc:	fe842703          	lw	a4,-24(s0)
600017e0:	00f76733          	or	a4,a4,a5
600017e4:	fee42423          	sw	a4,-24(s0)
600017e8:	fec42703          	lw	a4,-20(s0)
600017ec:	010767b3          	or	a5,a4,a6
600017f0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
600017f4:	fe842683          	lw	a3,-24(s0)
600017f8:	fec42703          	lw	a4,-20(s0)
600017fc:	0000c5b7          	lui	a1,0xc
60001800:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
60001804:	00000613          	li	a2,0
60001808:	00b687b3          	add	a5,a3,a1
6000180c:	00078513          	mv	a0,a5
60001810:	00d53533          	sltu	a0,a0,a3
60001814:	00c70833          	add	a6,a4,a2
60001818:	01050733          	add	a4,a0,a6
6000181c:	00070813          	mv	a6,a4
60001820:	fef42423          	sw	a5,-24(s0)
60001824:	ff042623          	sw	a6,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
60001828:	800007b7          	lui	a5,0x80000
6000182c:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
60001830:	fe842703          	lw	a4,-24(s0)
60001834:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
60001838:	fec42783          	lw	a5,-20(s0)
6000183c:	0007d313          	srli	t1,a5,0x0
60001840:	00000393          	li	t2,0
60001844:	800007b7          	lui	a5,0x80000
60001848:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
6000184c:	00030713          	mv	a4,t1
60001850:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
60001854:	08000793          	li	a5,128
60001858:	3047a073          	csrs	mie,a5
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
6000185c:	00000013          	nop
60001860:	01c12403          	lw	s0,28(sp)
60001864:	02010113          	addi	sp,sp,32
60001868:	00008067          	ret

6000186c <vPortSetupTimer>:
vPortSetupTimer():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
6000186c:	fe010113          	addi	sp,sp,-32
60001870:	00812e23          	sw	s0,28(sp)
60001874:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
60001878:	80000637          	lui	a2,0x80000
6000187c:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
60001880:	00062603          	lw	a2,0(a2)
60001884:	fec42423          	sw	a2,-24(s0)
60001888:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
6000188c:	80000637          	lui	a2,0x80000
60001890:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
60001894:	00462603          	lw	a2,4(a2)
60001898:	00060693          	mv	a3,a2
6000189c:	00000713          	li	a4,0
600018a0:	00069813          	slli	a6,a3,0x0
600018a4:	00000793          	li	a5,0
600018a8:	fe842703          	lw	a4,-24(s0)
600018ac:	00f76733          	or	a4,a4,a5
600018b0:	fee42423          	sw	a4,-24(s0)
600018b4:	fec42703          	lw	a4,-20(s0)
600018b8:	010767b3          	or	a5,a4,a6
600018bc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
600018c0:	fe842683          	lw	a3,-24(s0)
600018c4:	fec42703          	lw	a4,-20(s0)
600018c8:	0000c5b7          	lui	a1,0xc
600018cc:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
600018d0:	00000613          	li	a2,0
600018d4:	00b687b3          	add	a5,a3,a1
600018d8:	00078513          	mv	a0,a5
600018dc:	00d53533          	sltu	a0,a0,a3
600018e0:	00c70833          	add	a6,a4,a2
600018e4:	01050733          	add	a4,a0,a6
600018e8:	00070813          	mv	a6,a4
600018ec:	fef42423          	sw	a5,-24(s0)
600018f0:	ff042623          	sw	a6,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
600018f4:	800007b7          	lui	a5,0x80000
600018f8:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
600018fc:	fe842703          	lw	a4,-24(s0)
60001900:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
60001904:	fec42783          	lw	a5,-20(s0)
60001908:	0007d313          	srli	t1,a5,0x0
6000190c:	00000393          	li	t2,0
60001910:	800007b7          	lui	a5,0x80000
60001914:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
60001918:	00030713          	mv	a4,t1
6000191c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
60001920:	08000793          	li	a5,128
60001924:	3047a073          	csrs	mie,a5
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
60001928:	00000013          	nop
6000192c:	01c12403          	lw	s0,28(sp)
60001930:	02010113          	addi	sp,sp,32
60001934:	00008067          	ret

60001938 <prvTaskExitError>:
prvTaskExitError():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
60001938:	ff010113          	addi	sp,sp,-16
6000193c:	00812623          	sw	s0,12(sp)
60001940:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
60001944:	800007b7          	lui	a5,0x80000
60001948:	0087a703          	lw	a4,8(a5) # 80000008 <__stack_top+0xfffe4db8>
6000194c:	fff00793          	li	a5,-1
60001950:	00f70663          	beq	a4,a5,6000195c <prvTaskExitError+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
60001954:	30047073          	csrci	mstatus,8
60001958:	0000006f          	j	60001958 <prvTaskExitError+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
6000195c:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
60001960:	0000006f          	j	60001960 <prvTaskExitError+0x28>

60001964 <pxPortInitialiseStack>:
pxPortInitialiseStack():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
60001964:	fe010113          	addi	sp,sp,-32
60001968:	00812e23          	sw	s0,28(sp)
6000196c:	02010413          	addi	s0,sp,32
60001970:	fea42623          	sw	a0,-20(s0)
60001974:	feb42423          	sw	a1,-24(s0)
60001978:	fec42223          	sw	a2,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
6000197c:	fec42783          	lw	a5,-20(s0)
60001980:	ffc78793          	addi	a5,a5,-4
60001984:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
60001988:	fe842703          	lw	a4,-24(s0)
6000198c:	fec42783          	lw	a5,-20(s0)
60001990:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
60001994:	fec42783          	lw	a5,-20(s0)
60001998:	fa878793          	addi	a5,a5,-88
6000199c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
600019a0:	fe442703          	lw	a4,-28(s0)
600019a4:	fec42783          	lw	a5,-20(s0)
600019a8:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
600019ac:	fec42783          	lw	a5,-20(s0)
600019b0:	fe878793          	addi	a5,a5,-24
600019b4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
600019b8:	00018793          	mv	a5,gp
600019bc:	00078713          	mv	a4,a5
600019c0:	fec42783          	lw	a5,-20(s0)
600019c4:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
600019c8:	fec42783          	lw	a5,-20(s0)
600019cc:	ff478793          	addi	a5,a5,-12
600019d0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
600019d4:	600027b7          	lui	a5,0x60002
600019d8:	93878713          	addi	a4,a5,-1736 # 60001938 <prvTaskExitError>
600019dc:	fec42783          	lw	a5,-20(s0)
600019e0:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233
	
	return pxTopOfStack;
600019e4:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
600019e8:	00078513          	mv	a0,a5
600019ec:	01c12403          	lw	s0,28(sp)
600019f0:	02010113          	addi	sp,sp,32
600019f4:	00008067          	ret

600019f8 <SysTick_Handler>:
SysTick_Handler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
600019f8:	ff010113          	addi	sp,sp,-16
600019fc:	00112623          	sw	ra,12(sp)
60001a00:	00812423          	sw	s0,8(sp)
60001a04:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
60001a08:	9201a283          	lw	t0,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
60001a0c:	00c2a023          	sw	a2,0(t0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
60001a10:	d91ff0ef          	jal	ra,600017a0 <prvSetNextTimerInterrupt>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
60001a14:	2f5000ef          	jal	ra,60002508 <xTaskIncrementTick>
60001a18:	00050793          	mv	a5,a0
60001a1c:	00078463          	beqz	a5,60001a24 <SysTick_Handler+0x2c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
60001a20:	4d5000ef          	jal	ra,600026f4 <vTaskSwitchContext>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
60001a24:	9201a103          	lw	sp,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
60001a28:	00012103          	lw	sp,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
60001a2c:	07c12283          	lw	t0,124(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
60001a30:	34129073          	csrw	mepc,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
60001a34:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
60001a38:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
60001a3c:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
60001a40:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
60001a44:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
60001a48:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
60001a4c:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
60001a50:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
60001a54:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
60001a58:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
60001a5c:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
60001a60:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
60001a64:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
60001a68:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
60001a6c:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
60001a70:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
60001a74:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
60001a78:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
60001a7c:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
60001a80:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
60001a84:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
60001a88:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
60001a8c:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
60001a90:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
60001a94:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
60001a98:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
60001a9c:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
60001aa0:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
60001aa4:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
60001aa8:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
60001aac:	30200073          	mret
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
60001ab0:	00000013          	nop
60001ab4:	00c12083          	lw	ra,12(sp)
60001ab8:	00812403          	lw	s0,8(sp)
60001abc:	01010113          	addi	sp,sp,16
60001ac0:	00008067          	ret

60001ac4 <xPortStartScheduler>:
xPortStartScheduler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
60001ac4:	ff010113          	addi	sp,sp,-16
60001ac8:	00112623          	sw	ra,12(sp)
60001acc:	00812423          	sw	s0,8(sp)
60001ad0:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
60001ad4:	d99ff0ef          	jal	ra,6000186c <vPortSetupTimer>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
60001ad8:	800007b7          	lui	a5,0x80000
60001adc:	0007a423          	sw	zero,8(a5) # 80000008 <__stack_top+0xfffe4db8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
60001ae0:	00100713          	li	a4,1
60001ae4:	90e1ae23          	sw	a4,-1764(gp) # 8000011c <g_startscheduler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
60001ae8:	925fe0ef          	jal	ra,6000040c <__enable_irq>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
60001aec:	bf5ff0ef          	jal	ra,600016e0 <raise_soft_interrupt>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
60001af0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
60001af4:	00078513          	mv	a0,a5
60001af8:	00c12083          	lw	ra,12(sp)
60001afc:	00812403          	lw	s0,8(sp)
60001b00:	01010113          	addi	sp,sp,16
60001b04:	00008067          	ret

60001b08 <Software_IRQHandler>:
Software_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
60001b08:	ff010113          	addi	sp,sp,-16
60001b0c:	00112623          	sw	ra,12(sp)
60001b10:	00812423          	sw	s0,8(sp)
60001b14:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
60001b18:	91c1a703          	lw	a4,-1764(gp) # 8000011c <g_startscheduler>
60001b1c:	00100793          	li	a5,1
60001b20:	00f71863          	bne	a4,a5,60001b30 <Software_IRQHandler+0x28>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
60001b24:	00200713          	li	a4,2
60001b28:	90e1ae23          	sw	a4,-1764(gp) # 8000011c <g_startscheduler>
60001b2c:	0100006f          	j	60001b3c <Software_IRQHandler+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
60001b30:	9201a283          	lw	t0,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
60001b34:	00c2a023          	sw	a2,0(t0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
60001b38:	3bd000ef          	jal	ra,600026f4 <vTaskSwitchContext>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
60001b3c:	9201a103          	lw	sp,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
		__asm volatile("lw	sp, 0x0(sp)");
60001b40:	00012103          	lw	sp,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

		__asm volatile("lw	t0, 31 * 4(sp)");
60001b44:	07c12283          	lw	t0,124(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("csrw	mepc, t0");
60001b48:	34129073          	csrw	mepc,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	x1, 0x0(sp)");
60001b4c:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("lw   x4, 3 * 4(sp)");
60001b50:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
		__asm volatile("lw   x5, 4 * 4(sp)");
60001b54:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339
		__asm volatile("lw   x6, 5 * 4(sp)");
60001b58:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x7, 6 * 4(sp)");
60001b5c:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x8, 7 * 4(sp)");
60001b60:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x9, 8 * 4(sp)");
60001b64:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x10, 9 * 4(sp)");
60001b68:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x11, 10 * 4(sp)");
60001b6c:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x12, 11 * 4(sp)");
60001b70:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x13, 12 * 4(sp)");
60001b74:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x14, 13 * 4(sp)");
60001b78:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x15, 14 * 4(sp)");
60001b7c:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x16, 15 * 4(sp)");
60001b80:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x17, 16 * 4(sp)");
60001b84:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x18, 17 * 4(sp)");
60001b88:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x19, 18 * 4(sp)");
60001b8c:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x20, 19 * 4(sp)");
60001b90:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x21, 20 * 4(sp)");
60001b94:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x22, 21 * 4(sp)");
60001b98:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x23, 22 * 4(sp)");
60001b9c:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x24, 23 * 4(sp)");
60001ba0:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x25, 24 * 4(sp)");
60001ba4:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x26, 25 * 4(sp)");
60001ba8:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x27, 26 * 4(sp)");
60001bac:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x28, 27 * 4(sp)");
60001bb0:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x29, 28 * 4(sp)");
60001bb4:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x30, 29 * 4(sp)");
60001bb8:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x31, 30 * 4(sp)");
60001bbc:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366

		__asm volatile("addi	sp, sp, 4 * 32");
60001bc0:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370

		//PRCI->MSIP[0] = 0x00;

		__asm volatile("addi sp, sp, -1*4");
60001bc4:	ffc10113          	addi	sp,sp,-4
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("sw t0, 0(sp)");
60001bc8:	00512023          	sw	t0,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("li t0, 0x44000000");	// address of PRCI->MSIP[0]
60001bcc:	440002b7          	lui	t0,0x44000
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("sw zero,0(t0)");
60001bd0:	0002a023          	sw	zero,0(t0) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw t0, 0(sp)");
60001bd4:	00012283          	lw	t0,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("addi sp, sp, 1*4");
60001bd8:	00410113          	addi	sp,sp,4
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377

		__asm volatile("mret");
60001bdc:	30200073          	mret
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
	}
}
60001be0:	00000013          	nop
60001be4:	00c12083          	lw	ra,12(sp)
60001be8:	00812403          	lw	s0,8(sp)
60001bec:	01010113          	addi	sp,sp,16
60001bf0:	00008067          	ret

60001bf4 <vPortYield>:
vPortYield():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382

void vPortYield( void )
{
60001bf4:	ff010113          	addi	sp,sp,-16
60001bf8:	00112623          	sw	ra,12(sp)
60001bfc:	00812423          	sw	s0,8(sp)
60001c00:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
	raise_soft_interrupt();
60001c04:	addff0ef          	jal	ra,600016e0 <raise_soft_interrupt>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
}
60001c08:	00000013          	nop
60001c0c:	00c12083          	lw	ra,12(sp)
60001c10:	00812403          	lw	s0,8(sp)
60001c14:	01010113          	addi	sp,sp,16
60001c18:	00008067          	ret

60001c1c <vListInitialise>:
vListInitialise():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
60001c1c:	fe010113          	addi	sp,sp,-32
60001c20:	00812e23          	sw	s0,28(sp)
60001c24:	02010413          	addi	s0,sp,32
60001c28:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001c2c:	fec42783          	lw	a5,-20(s0)
60001c30:	00878713          	addi	a4,a5,8
60001c34:	fec42783          	lw	a5,-20(s0)
60001c38:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
60001c3c:	fec42783          	lw	a5,-20(s0)
60001c40:	fff00713          	li	a4,-1
60001c44:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001c48:	fec42783          	lw	a5,-20(s0)
60001c4c:	00878713          	addi	a4,a5,8
60001c50:	fec42783          	lw	a5,-20(s0)
60001c54:	00e7a623          	sw	a4,12(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001c58:	fec42783          	lw	a5,-20(s0)
60001c5c:	00878713          	addi	a4,a5,8
60001c60:	fec42783          	lw	a5,-20(s0)
60001c64:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
60001c68:	fec42783          	lw	a5,-20(s0)
60001c6c:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
60001c70:	00000013          	nop
60001c74:	01c12403          	lw	s0,28(sp)
60001c78:	02010113          	addi	sp,sp,32
60001c7c:	00008067          	ret

60001c80 <vListInitialiseItem>:
vListInitialiseItem():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
60001c80:	fe010113          	addi	sp,sp,-32
60001c84:	00812e23          	sw	s0,28(sp)
60001c88:	02010413          	addi	s0,sp,32
60001c8c:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
60001c90:	fec42783          	lw	a5,-20(s0)
60001c94:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
60001c98:	00000013          	nop
60001c9c:	01c12403          	lw	s0,28(sp)
60001ca0:	02010113          	addi	sp,sp,32
60001ca4:	00008067          	ret

60001ca8 <vListInsertEnd>:
vListInsertEnd():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
60001ca8:	fd010113          	addi	sp,sp,-48
60001cac:	02812623          	sw	s0,44(sp)
60001cb0:	03010413          	addi	s0,sp,48
60001cb4:	fca42e23          	sw	a0,-36(s0)
60001cb8:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
60001cbc:	fdc42783          	lw	a5,-36(s0)
60001cc0:	0047a783          	lw	a5,4(a5)
60001cc4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
60001cc8:	fd842783          	lw	a5,-40(s0)
60001ccc:	fec42703          	lw	a4,-20(s0)
60001cd0:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
60001cd4:	fec42783          	lw	a5,-20(s0)
60001cd8:	0087a703          	lw	a4,8(a5)
60001cdc:	fd842783          	lw	a5,-40(s0)
60001ce0:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
60001ce4:	fec42783          	lw	a5,-20(s0)
60001ce8:	0087a783          	lw	a5,8(a5)
60001cec:	fd842703          	lw	a4,-40(s0)
60001cf0:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
60001cf4:	fec42783          	lw	a5,-20(s0)
60001cf8:	fd842703          	lw	a4,-40(s0)
60001cfc:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
60001d00:	fd842783          	lw	a5,-40(s0)
60001d04:	fdc42703          	lw	a4,-36(s0)
60001d08:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
60001d0c:	fdc42783          	lw	a5,-36(s0)
60001d10:	0007a783          	lw	a5,0(a5)
60001d14:	00178713          	addi	a4,a5,1
60001d18:	fdc42783          	lw	a5,-36(s0)
60001d1c:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:142
}
60001d20:	00000013          	nop
60001d24:	02c12403          	lw	s0,44(sp)
60001d28:	03010113          	addi	sp,sp,48
60001d2c:	00008067          	ret

60001d30 <vListInsert>:
vListInsert():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
60001d30:	fd010113          	addi	sp,sp,-48
60001d34:	02812623          	sw	s0,44(sp)
60001d38:	03010413          	addi	s0,sp,48
60001d3c:	fca42e23          	sw	a0,-36(s0)
60001d40:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
60001d44:	fd842783          	lw	a5,-40(s0)
60001d48:	0007a783          	lw	a5,0(a5)
60001d4c:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
60001d50:	fe842703          	lw	a4,-24(s0)
60001d54:	fff00793          	li	a5,-1
60001d58:	00f71a63          	bne	a4,a5,60001d6c <vListInsert+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
60001d5c:	fdc42783          	lw	a5,-36(s0)
60001d60:	0107a783          	lw	a5,16(a5)
60001d64:	fef42623          	sw	a5,-20(s0)
60001d68:	0340006f          	j	60001d9c <vListInsert+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001d6c:	fdc42783          	lw	a5,-36(s0)
60001d70:	00878793          	addi	a5,a5,8
60001d74:	fef42623          	sw	a5,-20(s0)
60001d78:	0100006f          	j	60001d88 <vListInsert+0x58>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:192 (discriminator 3)
60001d7c:	fec42783          	lw	a5,-20(s0)
60001d80:	0047a783          	lw	a5,4(a5)
60001d84:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:192 (discriminator 1)
60001d88:	fec42783          	lw	a5,-20(s0)
60001d8c:	0047a783          	lw	a5,4(a5)
60001d90:	0007a783          	lw	a5,0(a5)
60001d94:	fe842703          	lw	a4,-24(s0)
60001d98:	fef772e3          	bgeu	a4,a5,60001d7c <vListInsert+0x4c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
60001d9c:	fec42783          	lw	a5,-20(s0)
60001da0:	0047a703          	lw	a4,4(a5)
60001da4:	fd842783          	lw	a5,-40(s0)
60001da8:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
60001dac:	fd842783          	lw	a5,-40(s0)
60001db0:	0047a783          	lw	a5,4(a5)
60001db4:	fd842703          	lw	a4,-40(s0)
60001db8:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
60001dbc:	fd842783          	lw	a5,-40(s0)
60001dc0:	fec42703          	lw	a4,-20(s0)
60001dc4:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
60001dc8:	fec42783          	lw	a5,-20(s0)
60001dcc:	fd842703          	lw	a4,-40(s0)
60001dd0:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
60001dd4:	fd842783          	lw	a5,-40(s0)
60001dd8:	fdc42703          	lw	a4,-36(s0)
60001ddc:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
60001de0:	fdc42783          	lw	a5,-36(s0)
60001de4:	0007a783          	lw	a5,0(a5)
60001de8:	00178713          	addi	a4,a5,1
60001dec:	fdc42783          	lw	a5,-36(s0)
60001df0:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:209
}
60001df4:	00000013          	nop
60001df8:	02c12403          	lw	s0,44(sp)
60001dfc:	03010113          	addi	sp,sp,48
60001e00:	00008067          	ret

60001e04 <uxListRemove>:
uxListRemove():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
60001e04:	fd010113          	addi	sp,sp,-48
60001e08:	02812623          	sw	s0,44(sp)
60001e0c:	03010413          	addi	s0,sp,48
60001e10:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
60001e14:	fdc42783          	lw	a5,-36(s0)
60001e18:	0107a783          	lw	a5,16(a5)
60001e1c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
60001e20:	fdc42783          	lw	a5,-36(s0)
60001e24:	0047a783          	lw	a5,4(a5)
60001e28:	fdc42703          	lw	a4,-36(s0)
60001e2c:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f00008>
60001e30:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
60001e34:	fdc42783          	lw	a5,-36(s0)
60001e38:	0087a783          	lw	a5,8(a5)
60001e3c:	fdc42703          	lw	a4,-36(s0)
60001e40:	00472703          	lw	a4,4(a4)
60001e44:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
60001e48:	fec42783          	lw	a5,-20(s0)
60001e4c:	0047a783          	lw	a5,4(a5)
60001e50:	fdc42703          	lw	a4,-36(s0)
60001e54:	00f71a63          	bne	a4,a5,60001e68 <uxListRemove+0x64>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
60001e58:	fdc42783          	lw	a5,-36(s0)
60001e5c:	0087a703          	lw	a4,8(a5)
60001e60:	fec42783          	lw	a5,-20(s0)
60001e64:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
60001e68:	fdc42783          	lw	a5,-36(s0)
60001e6c:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
60001e70:	fec42783          	lw	a5,-20(s0)
60001e74:	0007a783          	lw	a5,0(a5)
60001e78:	fff78713          	addi	a4,a5,-1
60001e7c:	fec42783          	lw	a5,-20(s0)
60001e80:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
60001e84:	fec42783          	lw	a5,-20(s0)
60001e88:	0007a783          	lw	a5,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/list.c:238
}
60001e8c:	00078513          	mv	a0,a5
60001e90:	02c12403          	lw	s0,44(sp)
60001e94:	03010113          	addi	sp,sp,48
60001e98:	00008067          	ret

60001e9c <memcpy>:
memcpy():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:6
#include <string.h>
#include <stdint.h>
#include <ctype.h>

void* memcpy(void* dest, const void* src, size_t len)
{
60001e9c:	fd010113          	addi	sp,sp,-48
60001ea0:	02812623          	sw	s0,44(sp)
60001ea4:	03010413          	addi	s0,sp,48
60001ea8:	fca42e23          	sw	a0,-36(s0)
60001eac:	fcb42c23          	sw	a1,-40(s0)
60001eb0:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:7
  const char* s = src;
60001eb4:	fd842783          	lw	a5,-40(s0)
60001eb8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:8
  char *d = dest;
60001ebc:	fdc42783          	lw	a5,-36(s0)
60001ec0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:10

  if ((((uintptr_t)dest | (uintptr_t)src) & (sizeof(uintptr_t)-1)) == 0) {
60001ec4:	fdc42703          	lw	a4,-36(s0)
60001ec8:	fd842783          	lw	a5,-40(s0)
60001ecc:	00f767b3          	or	a5,a4,a5
60001ed0:	0037f793          	andi	a5,a5,3
60001ed4:	06079663          	bnez	a5,60001f40 <memcpy+0xa4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:11
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
60001ed8:	02c0006f          	j	60001f04 <memcpy+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:12
      *(uintptr_t*)d = *(const uintptr_t*)s;
60001edc:	fec42783          	lw	a5,-20(s0)
60001ee0:	0007a703          	lw	a4,0(a5)
60001ee4:	fe842783          	lw	a5,-24(s0)
60001ee8:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:13
      d += sizeof(uintptr_t);
60001eec:	fe842783          	lw	a5,-24(s0)
60001ef0:	00478793          	addi	a5,a5,4
60001ef4:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:14
      s += sizeof(uintptr_t);
60001ef8:	fec42783          	lw	a5,-20(s0)
60001efc:	00478793          	addi	a5,a5,4
60001f00:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:11
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
60001f04:	fd442783          	lw	a5,-44(s0)
60001f08:	ffd78793          	addi	a5,a5,-3
60001f0c:	fdc42703          	lw	a4,-36(s0)
60001f10:	00f707b3          	add	a5,a4,a5
60001f14:	fe842703          	lw	a4,-24(s0)
60001f18:	fcf762e3          	bltu	a4,a5,60001edc <memcpy+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:18
    }
  }

  while (d < (char*)(dest + len))
60001f1c:	0240006f          	j	60001f40 <memcpy+0xa4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:19
    *d++ = *s++;
60001f20:	fec42703          	lw	a4,-20(s0)
60001f24:	00170793          	addi	a5,a4,1
60001f28:	fef42623          	sw	a5,-20(s0)
60001f2c:	fe842783          	lw	a5,-24(s0)
60001f30:	00178693          	addi	a3,a5,1
60001f34:	fed42423          	sw	a3,-24(s0)
60001f38:	00070703          	lb	a4,0(a4)
60001f3c:	00e78023          	sb	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:18
  while (d < (char*)(dest + len))
60001f40:	fdc42703          	lw	a4,-36(s0)
60001f44:	fd442783          	lw	a5,-44(s0)
60001f48:	00f707b3          	add	a5,a4,a5
60001f4c:	fe842703          	lw	a4,-24(s0)
60001f50:	fcf768e3          	bltu	a4,a5,60001f20 <memcpy+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:21

  return dest;
60001f54:	fdc42783          	lw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:22
}
60001f58:	00078513          	mv	a0,a5
60001f5c:	02c12403          	lw	s0,44(sp)
60001f60:	03010113          	addi	sp,sp,48
60001f64:	00008067          	ret

60001f68 <memset>:
memset():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:25

void* memset(void* dest, int byte, size_t len)
{
60001f68:	fd010113          	addi	sp,sp,-48
60001f6c:	02812623          	sw	s0,44(sp)
60001f70:	03010413          	addi	s0,sp,48
60001f74:	fca42e23          	sw	a0,-36(s0)
60001f78:	fcb42c23          	sw	a1,-40(s0)
60001f7c:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
60001f80:	fdc42703          	lw	a4,-36(s0)
60001f84:	fd442783          	lw	a5,-44(s0)
60001f88:	00f767b3          	or	a5,a4,a5
60001f8c:	0037f793          	andi	a5,a5,3
60001f90:	06079863          	bnez	a5,60002000 <memset+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
60001f94:	fd842783          	lw	a5,-40(s0)
60001f98:	0ff7f793          	andi	a5,a5,255
60001f9c:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:28
    word |= word << 8;
60001fa0:	fe442783          	lw	a5,-28(s0)
60001fa4:	00879793          	slli	a5,a5,0x8
60001fa8:	fe442703          	lw	a4,-28(s0)
60001fac:	00f767b3          	or	a5,a4,a5
60001fb0:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:29
    word |= word << 16;
60001fb4:	fe442783          	lw	a5,-28(s0)
60001fb8:	01079793          	slli	a5,a5,0x10
60001fbc:	fe442703          	lw	a4,-28(s0)
60001fc0:	00f767b3          	or	a5,a4,a5
60001fc4:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
60001fc8:	fdc42783          	lw	a5,-36(s0)
60001fcc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60001fd0:	0180006f          	j	60001fe8 <memset+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:34
      *d++ = word;
60001fd4:	fec42783          	lw	a5,-20(s0)
60001fd8:	00478713          	addi	a4,a5,4
60001fdc:	fee42623          	sw	a4,-20(s0)
60001fe0:	fe442703          	lw	a4,-28(s0)
60001fe4:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60001fe8:	fdc42703          	lw	a4,-36(s0)
60001fec:	fd442783          	lw	a5,-44(s0)
60001ff0:	00f707b3          	add	a5,a4,a5
60001ff4:	fec42703          	lw	a4,-20(s0)
60001ff8:	fcf76ee3          	bltu	a4,a5,60001fd4 <memset+0x6c>
60001ffc:	0400006f          	j	6000203c <memset+0xd4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
60002000:	fdc42783          	lw	a5,-36(s0)
60002004:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60002008:	0200006f          	j	60002028 <memset+0xc0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:38
      *d++ = byte;
6000200c:	fe842783          	lw	a5,-24(s0)
60002010:	00178713          	addi	a4,a5,1
60002014:	fee42423          	sw	a4,-24(s0)
60002018:	fd842703          	lw	a4,-40(s0)
6000201c:	01871713          	slli	a4,a4,0x18
60002020:	41875713          	srai	a4,a4,0x18
60002024:	00e78023          	sb	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60002028:	fdc42703          	lw	a4,-36(s0)
6000202c:	fd442783          	lw	a5,-44(s0)
60002030:	00f707b3          	add	a5,a4,a5
60002034:	fe842703          	lw	a4,-24(s0)
60002038:	fcf76ae3          	bltu	a4,a5,6000200c <memset+0xa4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:40
  }
  return dest;
6000203c:	fdc42783          	lw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/string.c:41
}
60002040:	00078513          	mv	a0,a5
60002044:	02c12403          	lw	s0,44(sp)
60002048:	03010113          	addi	sp,sp,48
6000204c:	00008067          	ret

60002050 <xTaskGenericCreate>:
xTaskGenericCreate():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
60002050:	fc010113          	addi	sp,sp,-64
60002054:	02112e23          	sw	ra,60(sp)
60002058:	02812c23          	sw	s0,56(sp)
6000205c:	04010413          	addi	s0,sp,64
60002060:	fca42e23          	sw	a0,-36(s0)
60002064:	fcb42c23          	sw	a1,-40(s0)
60002068:	fcd42823          	sw	a3,-48(s0)
6000206c:	fce42623          	sw	a4,-52(s0)
60002070:	fcf42423          	sw	a5,-56(s0)
60002074:	fd042223          	sw	a6,-60(s0)
60002078:	fd142023          	sw	a7,-64(s0)
6000207c:	00060793          	mv	a5,a2
60002080:	fcf41b23          	sh	a5,-42(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
60002084:	fdc42783          	lw	a5,-36(s0)
60002088:	00079663          	bnez	a5,60002094 <xTaskGenericCreate+0x44>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
6000208c:	30047073          	csrci	mstatus,8
60002090:	0000006f          	j	60002090 <xTaskGenericCreate+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
60002094:	fcc42703          	lw	a4,-52(s0)
60002098:	00400793          	li	a5,4
6000209c:	00e7f663          	bgeu	a5,a4,600020a8 <xTaskGenericCreate+0x58>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
600020a0:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
600020a4:	0000006f          	j	600020a4 <xTaskGenericCreate+0x54>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
600020a8:	fd645783          	lhu	a5,-42(s0)
600020ac:	fc442583          	lw	a1,-60(s0)
600020b0:	00078513          	mv	a0,a5
600020b4:	281000ef          	jal	ra,60002b34 <prvAllocateTCBAndStack>
600020b8:	fea42423          	sw	a0,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
600020bc:	fe842783          	lw	a5,-24(s0)
600020c0:	16078263          	beqz	a5,60002224 <xTaskGenericCreate+0x1d4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
600020c4:	fe842783          	lw	a5,-24(s0)
600020c8:	0307a703          	lw	a4,48(a5)
600020cc:	fd645683          	lhu	a3,-42(s0)
600020d0:	400007b7          	lui	a5,0x40000
600020d4:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3fefffff>
600020d8:	00f687b3          	add	a5,a3,a5
600020dc:	00279793          	slli	a5,a5,0x2
600020e0:	00f707b3          	add	a5,a4,a5
600020e4:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
600020e8:	fe442783          	lw	a5,-28(s0)
600020ec:	ffc7f793          	andi	a5,a5,-4
600020f0:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
600020f4:	fe442783          	lw	a5,-28(s0)
600020f8:	0037f793          	andi	a5,a5,3
600020fc:	00078663          	beqz	a5,60002108 <xTaskGenericCreate+0xb8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
60002100:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
60002104:	0000006f          	j	60002104 <xTaskGenericCreate+0xb4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
60002108:	fd645783          	lhu	a5,-42(s0)
6000210c:	00078713          	mv	a4,a5
60002110:	fc042683          	lw	a3,-64(s0)
60002114:	fcc42603          	lw	a2,-52(s0)
60002118:	fd842583          	lw	a1,-40(s0)
6000211c:	fe842503          	lw	a0,-24(s0)
60002120:	6f4000ef          	jal	ra,60002814 <prvInitialiseTCBVariables>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
60002124:	fd042603          	lw	a2,-48(s0)
60002128:	fdc42583          	lw	a1,-36(s0)
6000212c:	fe442503          	lw	a0,-28(s0)
60002130:	835ff0ef          	jal	ra,60001964 <pxPortInitialiseStack>
60002134:	00050713          	mv	a4,a0
60002138:	fe842783          	lw	a5,-24(s0)
6000213c:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
60002140:	fc842783          	lw	a5,-56(s0)
60002144:	00078863          	beqz	a5,60002154 <xTaskGenericCreate+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
60002148:	fc842783          	lw	a5,-56(s0)
6000214c:	fe842703          	lw	a4,-24(s0)
60002150:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
60002154:	dd8ff0ef          	jal	ra,6000172c <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
60002158:	9301a783          	lw	a5,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
6000215c:	00178713          	addi	a4,a5,1
60002160:	92e1a823          	sw	a4,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
60002164:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002168:	02079063          	bnez	a5,60002188 <xTaskGenericCreate+0x138>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
6000216c:	fe842703          	lw	a4,-24(s0)
60002170:	92e1a023          	sw	a4,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
60002174:	9301a703          	lw	a4,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
60002178:	00100793          	li	a5,1
6000217c:	02f71663          	bne	a4,a5,600021a8 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
60002180:	7cc000ef          	jal	ra,6000294c <prvInitialiseTaskLists>
60002184:	0240006f          	j	600021a8 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
60002188:	93c1a783          	lw	a5,-1732(gp) # 8000013c <xSchedulerRunning>
6000218c:	00079e63          	bnez	a5,600021a8 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
60002190:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002194:	02c7a783          	lw	a5,44(a5)
60002198:	fcc42703          	lw	a4,-52(s0)
6000219c:	00f76663          	bltu	a4,a5,600021a8 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
600021a0:	fe842703          	lw	a4,-24(s0)
600021a4:	92e1a023          	sw	a4,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
600021a8:	94c1a783          	lw	a5,-1716(gp) # 8000014c <uxTaskNumber>
600021ac:	00178713          	addi	a4,a5,1
600021b0:	94e1a623          	sw	a4,-1716(gp) # 8000014c <uxTaskNumber>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
600021b4:	94c1a703          	lw	a4,-1716(gp) # 8000014c <uxTaskNumber>
600021b8:	fe842783          	lw	a5,-24(s0)
600021bc:	04e7a423          	sw	a4,72(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
600021c0:	fe842783          	lw	a5,-24(s0)
600021c4:	02c7a703          	lw	a4,44(a5)
600021c8:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
600021cc:	00e7f863          	bgeu	a5,a4,600021dc <xTaskGenericCreate+0x18c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
600021d0:	fe842783          	lw	a5,-24(s0)
600021d4:	02c7a703          	lw	a4,44(a5)
600021d8:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
600021dc:	fe842783          	lw	a5,-24(s0)
600021e0:	02c7a703          	lw	a4,44(a5)
600021e4:	00070793          	mv	a5,a4
600021e8:	00279793          	slli	a5,a5,0x2
600021ec:	00e787b3          	add	a5,a5,a4
600021f0:	00279793          	slli	a5,a5,0x2
600021f4:	80019737          	lui	a4,0x80019
600021f8:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
600021fc:	00e78733          	add	a4,a5,a4
60002200:	fe842783          	lw	a5,-24(s0)
60002204:	00478793          	addi	a5,a5,4
60002208:	00078593          	mv	a1,a5
6000220c:	00070513          	mv	a0,a4
60002210:	a99ff0ef          	jal	ra,60001ca8 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
60002214:	00100793          	li	a5,1
60002218:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
6000221c:	d44ff0ef          	jal	ra,60001760 <vPortExitCritical>
60002220:	00c0006f          	j	6000222c <xTaskGenericCreate+0x1dc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
60002224:	fff00793          	li	a5,-1
60002228:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
6000222c:	fec42703          	lw	a4,-20(s0)
60002230:	00100793          	li	a5,1
60002234:	02f71063          	bne	a4,a5,60002254 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
60002238:	93c1a783          	lw	a5,-1732(gp) # 8000013c <xSchedulerRunning>
6000223c:	00078c63          	beqz	a5,60002254 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
60002240:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002244:	02c7a783          	lw	a5,44(a5)
60002248:	fcc42703          	lw	a4,-52(s0)
6000224c:	00e7f463          	bgeu	a5,a4,60002254 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
60002250:	9a5ff0ef          	jal	ra,60001bf4 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
60002254:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:737
}
60002258:	00078513          	mv	a0,a5
6000225c:	03c12083          	lw	ra,60(sp)
60002260:	03812403          	lw	s0,56(sp)
60002264:	04010113          	addi	sp,sp,64
60002268:	00008067          	ret

6000226c <vTaskDelay>:
vTaskDelay():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
6000226c:	fd010113          	addi	sp,sp,-48
60002270:	02112623          	sw	ra,44(sp)
60002274:	02812423          	sw	s0,40(sp)
60002278:	03010413          	addi	s0,sp,48
6000227c:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
60002280:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
60002284:	fdc42783          	lw	a5,-36(s0)
60002288:	04078463          	beqz	a5,600022d0 <vTaskDelay+0x64>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
6000228c:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
60002290:	00078663          	beqz	a5,6000229c <vTaskDelay+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
60002294:	30047073          	csrci	mstatus,8
60002298:	0000006f          	j	60002298 <vTaskDelay+0x2c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
6000229c:	0e4000ef          	jal	ra,60002380 <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
600022a0:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
600022a4:	fdc42703          	lw	a4,-36(s0)
600022a8:	00f707b3          	add	a5,a4,a5
600022ac:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
600022b0:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
600022b4:	00478793          	addi	a5,a5,4
600022b8:	00078513          	mv	a0,a5
600022bc:	b49ff0ef          	jal	ra,60001e04 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
600022c0:	fe842503          	lw	a0,-24(s0)
600022c4:	7e8000ef          	jal	ra,60002aac <prvAddCurrentTaskToDelayedList>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
600022c8:	0e0000ef          	jal	ra,600023a8 <xTaskResumeAll>
600022cc:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
600022d0:	fec42783          	lw	a5,-20(s0)
600022d4:	00079463          	bnez	a5,600022dc <vTaskDelay+0x70>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
600022d8:	91dff0ef          	jal	ra,60001bf4 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
600022dc:	00000013          	nop
600022e0:	02c12083          	lw	ra,44(sp)
600022e4:	02812403          	lw	s0,40(sp)
600022e8:	03010113          	addi	sp,sp,48
600022ec:	00008067          	ret

600022f0 <vTaskStartScheduler>:
vTaskStartScheduler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
600022f0:	fe010113          	addi	sp,sp,-32
600022f4:	00112e23          	sw	ra,28(sp)
600022f8:	00812c23          	sw	s0,24(sp)
600022fc:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
60002300:	00000893          	li	a7,0
60002304:	00000813          	li	a6,0
60002308:	00000793          	li	a5,0
6000230c:	00000713          	li	a4,0
60002310:	00000693          	li	a3,0
60002314:	40000613          	li	a2,1024
60002318:	600045b7          	lui	a1,0x60004
6000231c:	fa858593          	addi	a1,a1,-88 # 60003fa8 <_malloc_usable_size_r+0x30>
60002320:	60002537          	lui	a0,0x60002
60002324:	7e050513          	addi	a0,a0,2016 # 600027e0 <prvIdleTask>
60002328:	d29ff0ef          	jal	ra,60002050 <xTaskGenericCreate>
6000232c:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
60002330:	fec42703          	lw	a4,-20(s0)
60002334:	00100793          	li	a5,1
60002338:	02f71263          	bne	a4,a5,6000235c <vTaskStartScheduler+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
6000233c:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
60002340:	fff00713          	li	a4,-1
60002344:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
60002348:	00100713          	li	a4,1
6000234c:	92e1ae23          	sw	a4,-1732(gp) # 8000013c <xSchedulerRunning>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
60002350:	9201aa23          	sw	zero,-1740(gp) # 80000134 <xTickCount>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
60002354:	f70ff0ef          	jal	ra,60001ac4 <xPortStartScheduler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
60002358:	0140006f          	j	6000236c <vTaskStartScheduler+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
6000235c:	fec42783          	lw	a5,-20(s0)
60002360:	00079663          	bnez	a5,6000236c <vTaskStartScheduler+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
60002364:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
60002368:	0000006f          	j	60002368 <vTaskStartScheduler+0x78>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1617
}
6000236c:	00000013          	nop
60002370:	01c12083          	lw	ra,28(sp)
60002374:	01812403          	lw	s0,24(sp)
60002378:	02010113          	addi	sp,sp,32
6000237c:	00008067          	ret

60002380 <vTaskSuspendAll>:
vTaskSuspendAll():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
60002380:	ff010113          	addi	sp,sp,-16
60002384:	00812623          	sw	s0,12(sp)
60002388:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
6000238c:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
60002390:	00178713          	addi	a4,a5,1
60002394:	94e1aa23          	sw	a4,-1708(gp) # 80000154 <uxSchedulerSuspended>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1638
}
60002398:	00000013          	nop
6000239c:	00c12403          	lw	s0,12(sp)
600023a0:	01010113          	addi	sp,sp,16
600023a4:	00008067          	ret

600023a8 <xTaskResumeAll>:
xTaskResumeAll():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
600023a8:	fe010113          	addi	sp,sp,-32
600023ac:	00112e23          	sw	ra,28(sp)
600023b0:	00812c23          	sw	s0,24(sp)
600023b4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
600023b8:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
600023bc:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
600023c0:	00079663          	bnez	a5,600023cc <xTaskResumeAll+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
600023c4:	30047073          	csrci	mstatus,8
600023c8:	0000006f          	j	600023c8 <xTaskResumeAll+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
600023cc:	b60ff0ef          	jal	ra,6000172c <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
600023d0:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
600023d4:	fff78713          	addi	a4,a5,-1
600023d8:	94e1aa23          	sw	a4,-1708(gp) # 80000154 <uxSchedulerSuspended>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
600023dc:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
600023e0:	10079663          	bnez	a5,600024ec <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
600023e4:	9301a783          	lw	a5,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
600023e8:	10078263          	beqz	a5,600024ec <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
600023ec:	0a80006f          	j	60002494 <xTaskResumeAll+0xec>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
600023f0:	800197b7          	lui	a5,0x80019
600023f4:	20c78793          	addi	a5,a5,524 # 8001920c <__stack_top+0xffffdfbc>
600023f8:	00c7a783          	lw	a5,12(a5)
600023fc:	00c7a783          	lw	a5,12(a5)
60002400:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
60002404:	fe842783          	lw	a5,-24(s0)
60002408:	01878793          	addi	a5,a5,24
6000240c:	00078513          	mv	a0,a5
60002410:	9f5ff0ef          	jal	ra,60001e04 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
60002414:	fe842783          	lw	a5,-24(s0)
60002418:	00478793          	addi	a5,a5,4
6000241c:	00078513          	mv	a0,a5
60002420:	9e5ff0ef          	jal	ra,60001e04 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
60002424:	fe842783          	lw	a5,-24(s0)
60002428:	02c7a703          	lw	a4,44(a5)
6000242c:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
60002430:	00e7f863          	bgeu	a5,a4,60002440 <xTaskResumeAll+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
60002434:	fe842783          	lw	a5,-24(s0)
60002438:	02c7a703          	lw	a4,44(a5)
6000243c:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
60002440:	fe842783          	lw	a5,-24(s0)
60002444:	02c7a703          	lw	a4,44(a5)
60002448:	00070793          	mv	a5,a4
6000244c:	00279793          	slli	a5,a5,0x2
60002450:	00e787b3          	add	a5,a5,a4
60002454:	00279793          	slli	a5,a5,0x2
60002458:	80019737          	lui	a4,0x80019
6000245c:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
60002460:	00e78733          	add	a4,a5,a4
60002464:	fe842783          	lw	a5,-24(s0)
60002468:	00478793          	addi	a5,a5,4
6000246c:	00078593          	mv	a1,a5
60002470:	00070513          	mv	a0,a4
60002474:	835ff0ef          	jal	ra,60001ca8 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
60002478:	fe842783          	lw	a5,-24(s0)
6000247c:	02c7a703          	lw	a4,44(a5)
60002480:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002484:	02c7a783          	lw	a5,44(a5)
60002488:	00f76663          	bltu	a4,a5,60002494 <xTaskResumeAll+0xec>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
6000248c:	00100713          	li	a4,1
60002490:	94e1a223          	sw	a4,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
60002494:	800197b7          	lui	a5,0x80019
60002498:	20c7a783          	lw	a5,524(a5) # 8001920c <__stack_top+0xffffdfbc>
6000249c:	f4079ae3          	bnez	a5,600023f0 <xTaskResumeAll+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
600024a0:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
600024a4:	02078863          	beqz	a5,600024d4 <xTaskResumeAll+0x12c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
600024a8:	0240006f          	j	600024cc <xTaskResumeAll+0x124>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
600024ac:	05c000ef          	jal	ra,60002508 <xTaskIncrementTick>
600024b0:	00050793          	mv	a5,a0
600024b4:	00078663          	beqz	a5,600024c0 <xTaskResumeAll+0x118>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
600024b8:	00100713          	li	a4,1
600024bc:	94e1a223          	sw	a4,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
600024c0:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
600024c4:	fff78713          	addi	a4,a5,-1
600024c8:	94e1a023          	sw	a4,-1728(gp) # 80000140 <uxPendedTicks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
600024cc:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
600024d0:	fc079ee3          	bnez	a5,600024ac <xTaskResumeAll+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
600024d4:	9441a703          	lw	a4,-1724(gp) # 80000144 <xYieldPending>
600024d8:	00100793          	li	a5,1
600024dc:	00f71863          	bne	a4,a5,600024ec <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
600024e0:	00100793          	li	a5,1
600024e4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
600024e8:	f0cff0ef          	jal	ra,60001bf4 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
600024ec:	a74ff0ef          	jal	ra,60001760 <vPortExitCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
600024f0:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1759
}
600024f4:	00078513          	mv	a0,a5
600024f8:	01c12083          	lw	ra,28(sp)
600024fc:	01812403          	lw	s0,24(sp)
60002500:	02010113          	addi	sp,sp,32
60002504:	00008067          	ret

60002508 <xTaskIncrementTick>:
xTaskIncrementTick():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
60002508:	fd010113          	addi	sp,sp,-48
6000250c:	02112623          	sw	ra,44(sp)
60002510:	02812423          	sw	s0,40(sp)
60002514:	03010413          	addi	s0,sp,48
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
60002518:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
6000251c:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
60002520:	1a079063          	bnez	a5,600026c0 <xTaskIncrementTick+0x1b8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
60002524:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
60002528:	00178713          	addi	a4,a5,1
6000252c:	92e1aa23          	sw	a4,-1740(gp) # 80000134 <xTickCount>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
60002530:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
60002534:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
60002538:	fe842783          	lw	a5,-24(s0)
6000253c:	04079063          	bnez	a5,6000257c <xTaskIncrementTick+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
60002540:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002544:	0007a783          	lw	a5,0(a5)
60002548:	00078663          	beqz	a5,60002554 <xTaskIncrementTick+0x4c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
6000254c:	30047073          	csrci	mstatus,8
60002550:	0000006f          	j	60002550 <xTaskIncrementTick+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
60002554:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002558:	fef42223          	sw	a5,-28(s0)
6000255c:	9281a703          	lw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
60002560:	92e1a223          	sw	a4,-1756(gp) # 80000124 <pxDelayedTaskList>
60002564:	fe442703          	lw	a4,-28(s0)
60002568:	92e1a423          	sw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
6000256c:	9481a783          	lw	a5,-1720(gp) # 80000148 <xNumOfOverflows>
60002570:	00178713          	addi	a4,a5,1
60002574:	94e1a423          	sw	a4,-1720(gp) # 80000148 <xNumOfOverflows>
60002578:	6bc000ef          	jal	ra,60002c34 <prvResetNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
6000257c:	9501a783          	lw	a5,-1712(gp) # 80000150 <xNextTaskUnblockTime>
60002580:	fe842703          	lw	a4,-24(s0)
60002584:	10f76063          	bltu	a4,a5,60002684 <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60002588:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
6000258c:	0007a783          	lw	a5,0(a5)
60002590:	00079663          	bnez	a5,6000259c <xTaskIncrementTick+0x94>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
60002594:	00100793          	li	a5,1
60002598:	0080006f          	j	600025a0 <xTaskIncrementTick+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
6000259c:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
600025a0:	00078863          	beqz	a5,600025b0 <xTaskIncrementTick+0xa8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
600025a4:	fff00713          	li	a4,-1
600025a8:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1983
						break;
600025ac:	0d80006f          	j	60002684 <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
600025b0:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
600025b4:	00c7a783          	lw	a5,12(a5)
600025b8:	00c7a783          	lw	a5,12(a5)
600025bc:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
600025c0:	fe042783          	lw	a5,-32(s0)
600025c4:	0047a783          	lw	a5,4(a5)
600025c8:	fcf42e23          	sw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
600025cc:	fe842703          	lw	a4,-24(s0)
600025d0:	fdc42783          	lw	a5,-36(s0)
600025d4:	00f77863          	bgeu	a4,a5,600025e4 <xTaskIncrementTick+0xdc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
600025d8:	fdc42703          	lw	a4,-36(s0)
600025dc:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2002
							break;
600025e0:	0a40006f          	j	60002684 <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
600025e4:	fe042783          	lw	a5,-32(s0)
600025e8:	00478793          	addi	a5,a5,4
600025ec:	00078513          	mv	a0,a5
600025f0:	815ff0ef          	jal	ra,60001e04 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
600025f4:	fe042783          	lw	a5,-32(s0)
600025f8:	0287a783          	lw	a5,40(a5)
600025fc:	00078a63          	beqz	a5,60002610 <xTaskIncrementTick+0x108>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
60002600:	fe042783          	lw	a5,-32(s0)
60002604:	01878793          	addi	a5,a5,24
60002608:	00078513          	mv	a0,a5
6000260c:	ff8ff0ef          	jal	ra,60001e04 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
60002610:	fe042783          	lw	a5,-32(s0)
60002614:	02c7a703          	lw	a4,44(a5)
60002618:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
6000261c:	00e7f863          	bgeu	a5,a4,6000262c <xTaskIncrementTick+0x124>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
60002620:	fe042783          	lw	a5,-32(s0)
60002624:	02c7a703          	lw	a4,44(a5)
60002628:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
6000262c:	fe042783          	lw	a5,-32(s0)
60002630:	02c7a703          	lw	a4,44(a5)
60002634:	00070793          	mv	a5,a4
60002638:	00279793          	slli	a5,a5,0x2
6000263c:	00e787b3          	add	a5,a5,a4
60002640:	00279793          	slli	a5,a5,0x2
60002644:	80019737          	lui	a4,0x80019
60002648:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
6000264c:	00e78733          	add	a4,a5,a4
60002650:	fe042783          	lw	a5,-32(s0)
60002654:	00478793          	addi	a5,a5,4
60002658:	00078593          	mv	a1,a5
6000265c:	00070513          	mv	a0,a4
60002660:	e48ff0ef          	jal	ra,60001ca8 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
60002664:	fe042783          	lw	a5,-32(s0)
60002668:	02c7a703          	lw	a4,44(a5)
6000266c:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002670:	02c7a783          	lw	a5,44(a5)
60002674:	f0f76ae3          	bltu	a4,a5,60002588 <xTaskIncrementTick+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
60002678:	00100793          	li	a5,1
6000267c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60002680:	f09ff06f          	j	60002588 <xTaskIncrementTick+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
60002684:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002688:	02c7a703          	lw	a4,44(a5)
6000268c:	800196b7          	lui	a3,0x80019
60002690:	00070793          	mv	a5,a4
60002694:	00279793          	slli	a5,a5,0x2
60002698:	00e787b3          	add	a5,a5,a4
6000269c:	00279793          	slli	a5,a5,0x2
600026a0:	18068713          	addi	a4,a3,384 # 80019180 <__stack_top+0xffffdf30>
600026a4:	00e787b3          	add	a5,a5,a4
600026a8:	0007a703          	lw	a4,0(a5)
600026ac:	00100793          	li	a5,1
600026b0:	00e7fe63          	bgeu	a5,a4,600026cc <xTaskIncrementTick+0x1c4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
600026b4:	00100793          	li	a5,1
600026b8:	fef42623          	sw	a5,-20(s0)
600026bc:	0100006f          	j	600026cc <xTaskIncrementTick+0x1c4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
600026c0:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
600026c4:	00178713          	addi	a4,a5,1
600026c8:	94e1a023          	sw	a4,-1728(gp) # 80000140 <uxPendedTicks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
600026cc:	9441a783          	lw	a5,-1724(gp) # 80000144 <xYieldPending>
600026d0:	00078663          	beqz	a5,600026dc <xTaskIncrementTick+0x1d4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
600026d4:	00100793          	li	a5,1
600026d8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
600026dc:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2108
}
600026e0:	00078513          	mv	a0,a5
600026e4:	02c12083          	lw	ra,44(sp)
600026e8:	02812403          	lw	s0,40(sp)
600026ec:	03010113          	addi	sp,sp,48
600026f0:	00008067          	ret

600026f4 <vTaskSwitchContext>:
vTaskSwitchContext():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
600026f4:	fe010113          	addi	sp,sp,-32
600026f8:	00812e23          	sw	s0,28(sp)
600026fc:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
60002700:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
60002704:	00078863          	beqz	a5,60002714 <vTaskSwitchContext+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
60002708:	00100713          	li	a4,1
6000270c:	94e1a223          	sw	a4,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
60002710:	0c00006f          	j	600027d0 <vTaskSwitchContext+0xdc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
60002714:	9401a223          	sw	zero,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
60002718:	0200006f          	j	60002738 <vTaskSwitchContext+0x44>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
6000271c:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
60002720:	00079663          	bnez	a5,6000272c <vTaskSwitchContext+0x38>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
60002724:	30047073          	csrci	mstatus,8
60002728:	0000006f          	j	60002728 <vTaskSwitchContext+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
6000272c:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
60002730:	fff78713          	addi	a4,a5,-1
60002734:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
60002738:	9381a703          	lw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
6000273c:	800196b7          	lui	a3,0x80019
60002740:	00070793          	mv	a5,a4
60002744:	00279793          	slli	a5,a5,0x2
60002748:	00e787b3          	add	a5,a5,a4
6000274c:	00279793          	slli	a5,a5,0x2
60002750:	18068713          	addi	a4,a3,384 # 80019180 <__stack_top+0xffffdf30>
60002754:	00e787b3          	add	a5,a5,a4
60002758:	0007a783          	lw	a5,0(a5)
6000275c:	fc0780e3          	beqz	a5,6000271c <vTaskSwitchContext+0x28>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
60002760:	9381a703          	lw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
60002764:	00070793          	mv	a5,a4
60002768:	00279793          	slli	a5,a5,0x2
6000276c:	00e787b3          	add	a5,a5,a4
60002770:	00279793          	slli	a5,a5,0x2
60002774:	80019737          	lui	a4,0x80019
60002778:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
6000277c:	00e787b3          	add	a5,a5,a4
60002780:	fef42623          	sw	a5,-20(s0)
60002784:	fec42783          	lw	a5,-20(s0)
60002788:	0047a783          	lw	a5,4(a5)
6000278c:	0047a703          	lw	a4,4(a5)
60002790:	fec42783          	lw	a5,-20(s0)
60002794:	00e7a223          	sw	a4,4(a5)
60002798:	fec42783          	lw	a5,-20(s0)
6000279c:	0047a703          	lw	a4,4(a5)
600027a0:	fec42783          	lw	a5,-20(s0)
600027a4:	00878793          	addi	a5,a5,8
600027a8:	00f71c63          	bne	a4,a5,600027c0 <vTaskSwitchContext+0xcc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
600027ac:	fec42783          	lw	a5,-20(s0)
600027b0:	0047a783          	lw	a5,4(a5)
600027b4:	0047a703          	lw	a4,4(a5)
600027b8:	fec42783          	lw	a5,-20(s0)
600027bc:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
600027c0:	fec42783          	lw	a5,-20(s0)
600027c4:	0047a783          	lw	a5,4(a5)
600027c8:	00c7a703          	lw	a4,12(a5)
600027cc:	92e1a023          	sw	a4,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2257
}
600027d0:	00000013          	nop
600027d4:	01c12403          	lw	s0,28(sp)
600027d8:	02010113          	addi	sp,sp,32
600027dc:	00008067          	ret

600027e0 <prvIdleTask>:
prvIdleTask():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
600027e0:	fe010113          	addi	sp,sp,-32
600027e4:	00112e23          	sw	ra,28(sp)
600027e8:	00812c23          	sw	s0,24(sp)
600027ec:	02010413          	addi	s0,sp,32
600027f0:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
600027f4:	218000ef          	jal	ra,60002a0c <prvCheckTasksWaitingTermination>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
600027f8:	800197b7          	lui	a5,0x80019
600027fc:	1807a703          	lw	a4,384(a5) # 80019180 <__stack_top+0xffffdf30>
60002800:	00100793          	li	a5,1
60002804:	00e7f463          	bgeu	a5,a4,6000280c <prvIdleTask+0x2c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
60002808:	becff0ef          	jal	ra,60001bf4 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
6000280c:	071000ef          	jal	ra,6000307c <vApplicationIdleHook>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
60002810:	fe5ff06f          	j	600027f4 <prvIdleTask+0x14>

60002814 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
60002814:	fc010113          	addi	sp,sp,-64
60002818:	02112e23          	sw	ra,60(sp)
6000281c:	02812c23          	sw	s0,56(sp)
60002820:	04010413          	addi	s0,sp,64
60002824:	fca42e23          	sw	a0,-36(s0)
60002828:	fcb42c23          	sw	a1,-40(s0)
6000282c:	fcc42a23          	sw	a2,-44(s0)
60002830:	fcd42823          	sw	a3,-48(s0)
60002834:	00070793          	mv	a5,a4
60002838:	fcf41723          	sh	a5,-50(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
6000283c:	fe042623          	sw	zero,-20(s0)
60002840:	0440006f          	j	60002884 <prvInitialiseTCBVariables+0x70>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
60002844:	fd842703          	lw	a4,-40(s0)
60002848:	fec42783          	lw	a5,-20(s0)
6000284c:	00f707b3          	add	a5,a4,a5
60002850:	00078703          	lb	a4,0(a5)
60002854:	fdc42683          	lw	a3,-36(s0)
60002858:	fec42783          	lw	a5,-20(s0)
6000285c:	00f687b3          	add	a5,a3,a5
60002860:	02e78a23          	sb	a4,52(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
60002864:	fd842703          	lw	a4,-40(s0)
60002868:	fec42783          	lw	a5,-20(s0)
6000286c:	00f707b3          	add	a5,a4,a5
60002870:	00078783          	lb	a5,0(a5)
60002874:	02078063          	beqz	a5,60002894 <prvInitialiseTCBVariables+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
60002878:	fec42783          	lw	a5,-20(s0)
6000287c:	00178793          	addi	a5,a5,1
60002880:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
60002884:	fec42703          	lw	a4,-20(s0)
60002888:	00f00793          	li	a5,15
6000288c:	fae7fce3          	bgeu	a5,a4,60002844 <prvInitialiseTCBVariables+0x30>
60002890:	0080006f          	j	60002898 <prvInitialiseTCBVariables+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2845
		{
			break;
60002894:	00000013          	nop
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
60002898:	fdc42783          	lw	a5,-36(s0)
6000289c:	040781a3          	sb	zero,67(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
600028a0:	fd442703          	lw	a4,-44(s0)
600028a4:	00400793          	li	a5,4
600028a8:	00e7f663          	bgeu	a5,a4,600028b4 <prvInitialiseTCBVariables+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
600028ac:	00400793          	li	a5,4
600028b0:	fcf42a23          	sw	a5,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
600028b4:	fdc42783          	lw	a5,-36(s0)
600028b8:	fd442703          	lw	a4,-44(s0)
600028bc:	02e7a623          	sw	a4,44(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
600028c0:	fdc42783          	lw	a5,-36(s0)
600028c4:	fd442703          	lw	a4,-44(s0)
600028c8:	04e7a823          	sw	a4,80(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
600028cc:	fdc42783          	lw	a5,-36(s0)
600028d0:	0407aa23          	sw	zero,84(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
600028d4:	fdc42783          	lw	a5,-36(s0)
600028d8:	00478793          	addi	a5,a5,4
600028dc:	00078513          	mv	a0,a5
600028e0:	ba0ff0ef          	jal	ra,60001c80 <vListInitialiseItem>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
600028e4:	fdc42783          	lw	a5,-36(s0)
600028e8:	01878793          	addi	a5,a5,24
600028ec:	00078513          	mv	a0,a5
600028f0:	b90ff0ef          	jal	ra,60001c80 <vListInitialiseItem>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
600028f4:	fdc42783          	lw	a5,-36(s0)
600028f8:	fdc42703          	lw	a4,-36(s0)
600028fc:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
60002900:	00500713          	li	a4,5
60002904:	fd442783          	lw	a5,-44(s0)
60002908:	40f70733          	sub	a4,a4,a5
6000290c:	fdc42783          	lw	a5,-36(s0)
60002910:	00e7ac23          	sw	a4,24(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
60002914:	fdc42783          	lw	a5,-36(s0)
60002918:	fdc42703          	lw	a4,-36(s0)
6000291c:	02e7a223          	sw	a4,36(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
60002920:	fdc42783          	lw	a5,-36(s0)
60002924:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
60002928:	fdc42783          	lw	a5,-36(s0)
6000292c:	0407ac23          	sw	zero,88(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
60002930:	fdc42783          	lw	a5,-36(s0)
60002934:	0407ae23          	sw	zero,92(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
60002938:	00000013          	nop
6000293c:	03c12083          	lw	ra,60(sp)
60002940:	03812403          	lw	s0,56(sp)
60002944:	04010113          	addi	sp,sp,64
60002948:	00008067          	ret

6000294c <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
6000294c:	fe010113          	addi	sp,sp,-32
60002950:	00112e23          	sw	ra,28(sp)
60002954:	00812c23          	sw	s0,24(sp)
60002958:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
6000295c:	fe042623          	sw	zero,-20(s0)
60002960:	0380006f          	j	60002998 <prvInitialiseTaskLists+0x4c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
60002964:	fec42703          	lw	a4,-20(s0)
60002968:	00070793          	mv	a5,a4
6000296c:	00279793          	slli	a5,a5,0x2
60002970:	00e787b3          	add	a5,a5,a4
60002974:	00279793          	slli	a5,a5,0x2
60002978:	80019737          	lui	a4,0x80019
6000297c:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
60002980:	00e787b3          	add	a5,a5,a4
60002984:	00078513          	mv	a0,a5
60002988:	a94ff0ef          	jal	ra,60001c1c <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
6000298c:	fec42783          	lw	a5,-20(s0)
60002990:	00178793          	addi	a5,a5,1
60002994:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
60002998:	fec42703          	lw	a4,-20(s0)
6000299c:	00400793          	li	a5,4
600029a0:	fce7f2e3          	bgeu	a5,a4,60002964 <prvInitialiseTaskLists+0x18>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
600029a4:	800197b7          	lui	a5,0x80019
600029a8:	1e478513          	addi	a0,a5,484 # 800191e4 <__stack_top+0xffffdf94>
600029ac:	a70ff0ef          	jal	ra,60001c1c <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
600029b0:	800197b7          	lui	a5,0x80019
600029b4:	1f878513          	addi	a0,a5,504 # 800191f8 <__stack_top+0xffffdfa8>
600029b8:	a64ff0ef          	jal	ra,60001c1c <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
600029bc:	800197b7          	lui	a5,0x80019
600029c0:	20c78513          	addi	a0,a5,524 # 8001920c <__stack_top+0xffffdfbc>
600029c4:	a58ff0ef          	jal	ra,60001c1c <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
600029c8:	800197b7          	lui	a5,0x80019
600029cc:	22078513          	addi	a0,a5,544 # 80019220 <__stack_top+0xffffdfd0>
600029d0:	a4cff0ef          	jal	ra,60001c1c <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
600029d4:	800197b7          	lui	a5,0x80019
600029d8:	23478513          	addi	a0,a5,564 # 80019234 <__stack_top+0xffffdfe4>
600029dc:	a40ff0ef          	jal	ra,60001c1c <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
600029e0:	80019737          	lui	a4,0x80019
600029e4:	1e470713          	addi	a4,a4,484 # 800191e4 <__stack_top+0xffffdf94>
600029e8:	92e1a223          	sw	a4,-1756(gp) # 80000124 <pxDelayedTaskList>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
600029ec:	80019737          	lui	a4,0x80019
600029f0:	1f870713          	addi	a4,a4,504 # 800191f8 <__stack_top+0xffffdfa8>
600029f4:	92e1a423          	sw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3025
}
600029f8:	00000013          	nop
600029fc:	01c12083          	lw	ra,28(sp)
60002a00:	01812403          	lw	s0,24(sp)
60002a04:	02010113          	addi	sp,sp,32
60002a08:	00008067          	ret

60002a0c <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
60002a0c:	fe010113          	addi	sp,sp,-32
60002a10:	00112e23          	sw	ra,28(sp)
60002a14:	00812c23          	sw	s0,24(sp)
60002a18:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
60002a1c:	0740006f          	j	60002a90 <prvCheckTasksWaitingTermination+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
60002a20:	961ff0ef          	jal	ra,60002380 <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
60002a24:	800197b7          	lui	a5,0x80019
60002a28:	2207a783          	lw	a5,544(a5) # 80019220 <__stack_top+0xffffdfd0>
60002a2c:	0017b793          	seqz	a5,a5
60002a30:	0ff7f793          	andi	a5,a5,255
60002a34:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
60002a38:	971ff0ef          	jal	ra,600023a8 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
60002a3c:	fec42783          	lw	a5,-20(s0)
60002a40:	04079863          	bnez	a5,60002a90 <prvCheckTasksWaitingTermination+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
60002a44:	ce9fe0ef          	jal	ra,6000172c <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
60002a48:	800197b7          	lui	a5,0x80019
60002a4c:	22078793          	addi	a5,a5,544 # 80019220 <__stack_top+0xffffdfd0>
60002a50:	00c7a783          	lw	a5,12(a5)
60002a54:	00c7a783          	lw	a5,12(a5)
60002a58:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
60002a5c:	fe842783          	lw	a5,-24(s0)
60002a60:	00478793          	addi	a5,a5,4
60002a64:	00078513          	mv	a0,a5
60002a68:	b9cff0ef          	jal	ra,60001e04 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
60002a6c:	9301a783          	lw	a5,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
60002a70:	fff78713          	addi	a4,a5,-1
60002a74:	92e1a823          	sw	a4,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
60002a78:	92c1a783          	lw	a5,-1748(gp) # 8000012c <uxTasksDeleted>
60002a7c:	fff78713          	addi	a4,a5,-1
60002a80:	92e1a623          	sw	a4,-1748(gp) # 8000012c <uxTasksDeleted>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
60002a84:	cddfe0ef          	jal	ra,60001760 <vPortExitCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
60002a88:	fe842503          	lw	a0,-24(s0)
60002a8c:	168000ef          	jal	ra,60002bf4 <prvDeleteTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
60002a90:	92c1a783          	lw	a5,-1748(gp) # 8000012c <uxTasksDeleted>
60002a94:	f80796e3          	bnez	a5,60002a20 <prvCheckTasksWaitingTermination+0x14>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
60002a98:	00000013          	nop
60002a9c:	01c12083          	lw	ra,28(sp)
60002aa0:	01812403          	lw	s0,24(sp)
60002aa4:	02010113          	addi	sp,sp,32
60002aa8:	00008067          	ret

60002aac <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
60002aac:	fe010113          	addi	sp,sp,-32
60002ab0:	00112e23          	sw	ra,28(sp)
60002ab4:	00812c23          	sw	s0,24(sp)
60002ab8:	02010413          	addi	s0,sp,32
60002abc:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
60002ac0:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002ac4:	fec42703          	lw	a4,-20(s0)
60002ac8:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
60002acc:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
60002ad0:	fec42703          	lw	a4,-20(s0)
60002ad4:	02f77063          	bgeu	a4,a5,60002af4 <prvAddCurrentTaskToDelayedList+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
60002ad8:	9281a703          	lw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
60002adc:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002ae0:	00478793          	addi	a5,a5,4
60002ae4:	00078593          	mv	a1,a5
60002ae8:	00070513          	mv	a0,a4
60002aec:	a44ff0ef          	jal	ra,60001d30 <vListInsert>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
60002af0:	0300006f          	j	60002b20 <prvAddCurrentTaskToDelayedList+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
60002af4:	9241a703          	lw	a4,-1756(gp) # 80000124 <pxDelayedTaskList>
60002af8:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002afc:	00478793          	addi	a5,a5,4
60002b00:	00078593          	mv	a1,a5
60002b04:	00070513          	mv	a0,a4
60002b08:	a28ff0ef          	jal	ra,60001d30 <vListInsert>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
60002b0c:	9501a783          	lw	a5,-1712(gp) # 80000150 <xNextTaskUnblockTime>
60002b10:	fec42703          	lw	a4,-20(s0)
60002b14:	00f77663          	bgeu	a4,a5,60002b20 <prvAddCurrentTaskToDelayedList+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
60002b18:	fec42703          	lw	a4,-20(s0)
60002b1c:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3096
}
60002b20:	00000013          	nop
60002b24:	01c12083          	lw	ra,28(sp)
60002b28:	01812403          	lw	s0,24(sp)
60002b2c:	02010113          	addi	sp,sp,32
60002b30:	00008067          	ret

60002b34 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
60002b34:	fd010113          	addi	sp,sp,-48
60002b38:	02112623          	sw	ra,44(sp)
60002b3c:	02812423          	sw	s0,40(sp)
60002b40:	03010413          	addi	s0,sp,48
60002b44:	00050793          	mv	a5,a0
60002b48:	fcb42c23          	sw	a1,-40(s0)
60002b4c:	fcf41f23          	sh	a5,-34(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
60002b50:	fd842783          	lw	a5,-40(s0)
60002b54:	00079e63          	bnez	a5,60002b70 <prvAllocateTCBAndStack+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
60002b58:	fde45783          	lhu	a5,-34(s0)
60002b5c:	00279793          	slli	a5,a5,0x2
60002b60:	00078513          	mv	a0,a5
60002b64:	861fe0ef          	jal	ra,600013c4 <pvPortMalloc>
60002b68:	00050793          	mv	a5,a0
60002b6c:	0080006f          	j	60002b74 <prvAllocateTCBAndStack+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
60002b70:	fd842783          	lw	a5,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
60002b74:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
60002b78:	fe842783          	lw	a5,-24(s0)
60002b7c:	02078a63          	beqz	a5,60002bb0 <prvAllocateTCBAndStack+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
60002b80:	06000513          	li	a0,96
60002b84:	841fe0ef          	jal	ra,600013c4 <pvPortMalloc>
60002b88:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
60002b8c:	fec42783          	lw	a5,-20(s0)
60002b90:	00078a63          	beqz	a5,60002ba4 <prvAllocateTCBAndStack+0x70>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
60002b94:	fec42783          	lw	a5,-20(s0)
60002b98:	fe842703          	lw	a4,-24(s0)
60002b9c:	02e7a823          	sw	a4,48(a5)
60002ba0:	0140006f          	j	60002bb4 <prvAllocateTCBAndStack+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
60002ba4:	fe842503          	lw	a0,-24(s0)
60002ba8:	9f9fe0ef          	jal	ra,600015a0 <vPortFree>
60002bac:	0080006f          	j	60002bb4 <prvAllocateTCBAndStack+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
60002bb0:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
60002bb4:	fec42783          	lw	a5,-20(s0)
60002bb8:	02078263          	beqz	a5,60002bdc <prvAllocateTCBAndStack+0xa8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
60002bbc:	fec42783          	lw	a5,-20(s0)
60002bc0:	0307a703          	lw	a4,48(a5)
60002bc4:	fde45783          	lhu	a5,-34(s0)
60002bc8:	00279793          	slli	a5,a5,0x2
60002bcc:	00078613          	mv	a2,a5
60002bd0:	0a500593          	li	a1,165
60002bd4:	00070513          	mv	a0,a4
60002bd8:	b90ff0ef          	jal	ra,60001f68 <memset>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
60002bdc:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3171
}
60002be0:	00078513          	mv	a0,a5
60002be4:	02c12083          	lw	ra,44(sp)
60002be8:	02812403          	lw	s0,40(sp)
60002bec:	03010113          	addi	sp,sp,48
60002bf0:	00008067          	ret

60002bf4 <prvDeleteTCB>:
prvDeleteTCB():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
60002bf4:	fe010113          	addi	sp,sp,-32
60002bf8:	00112e23          	sw	ra,28(sp)
60002bfc:	00812c23          	sw	s0,24(sp)
60002c00:	02010413          	addi	s0,sp,32
60002c04:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
60002c08:	fec42783          	lw	a5,-20(s0)
60002c0c:	0307a783          	lw	a5,48(a5)
60002c10:	00078513          	mv	a0,a5
60002c14:	98dfe0ef          	jal	ra,600015a0 <vPortFree>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
60002c18:	fec42503          	lw	a0,-20(s0)
60002c1c:	985fe0ef          	jal	ra,600015a0 <vPortFree>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3340
	}
60002c20:	00000013          	nop
60002c24:	01c12083          	lw	ra,28(sp)
60002c28:	01812403          	lw	s0,24(sp)
60002c2c:	02010113          	addi	sp,sp,32
60002c30:	00008067          	ret

60002c34 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
60002c34:	fe010113          	addi	sp,sp,-32
60002c38:	00812e23          	sw	s0,28(sp)
60002c3c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60002c40:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002c44:	0007a783          	lw	a5,0(a5)
60002c48:	00079663          	bnez	a5,60002c54 <prvResetNextTaskUnblockTime+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
60002c4c:	00100793          	li	a5,1
60002c50:	0080006f          	j	60002c58 <prvResetNextTaskUnblockTime+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
60002c54:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
60002c58:	00078863          	beqz	a5,60002c68 <prvResetNextTaskUnblockTime+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
60002c5c:	fff00713          	li	a4,-1
60002c60:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
60002c64:	0200006f          	j	60002c84 <prvResetNextTaskUnblockTime+0x50>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
60002c68:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002c6c:	00c7a783          	lw	a5,12(a5)
60002c70:	00c7a783          	lw	a5,12(a5)
60002c74:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
60002c78:	fec42783          	lw	a5,-20(s0)
60002c7c:	0047a703          	lw	a4,4(a5)
60002c80:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../FreeRTOS/tasks.c:3366
}
60002c84:	00000013          	nop
60002c88:	01c12403          	lw	s0,28(sp)
60002c8c:	02010113          	addi	sp,sp,32
60002c90:	00008067          	ret

60002c94 <BasicIO_Init>:
BasicIO_Init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:101

// --- Private functions -------------------------------------------------------

// --- Public Functions --------------------------------------------------------

void BasicIO_Init(addr_t interface_addr) {
60002c94:	fe010113          	addi	sp,sp,-32
60002c98:	00112e23          	sw	ra,28(sp)
60002c9c:	00812c23          	sw	s0,24(sp)
60002ca0:	02010413          	addi	s0,sp,32
60002ca4:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:104

  GPIO_init(BASIC_GPIO_PBS,
 						interface_addr | BASIC_IO_GPIO_ADDR,
60002ca8:	fec42783          	lw	a5,-20(s0)
60002cac:	1007e793          	ori	a5,a5,256
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:103
  GPIO_init(BASIC_GPIO_PBS,
60002cb0:	00200613          	li	a2,2
60002cb4:	00078593          	mv	a1,a5
60002cb8:	95818513          	addi	a0,gp,-1704 # 80000158 <g_gpio_in_PBs>
60002cbc:	938fe0ef          	jal	ra,60000df4 <GPIO_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:107
						GPIO_APB_32_BITS_BUS);
  GPIO_init(BASIC_GPIO_LEDS,
 						interface_addr | BASIC_IO_GPIO_ADDR,
60002cc0:	fec42783          	lw	a5,-20(s0)
60002cc4:	1007e793          	ori	a5,a5,256
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:106
  GPIO_init(BASIC_GPIO_LEDS,
60002cc8:	00200613          	li	a2,2
60002ccc:	00078593          	mv	a1,a5
60002cd0:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002cd4:	920fe0ef          	jal	ra,60000df4 <GPIO_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:110
						GPIO_APB_32_BITS_BUS);
  
  GPIO_enable_irq(BASIC_GPIO_PBS, PB1);
60002cd8:	00000593          	li	a1,0
60002cdc:	95818513          	addi	a0,gp,-1704 # 80000158 <g_gpio_in_PBs>
60002ce0:	cbcfe0ef          	jal	ra,6000119c <GPIO_enable_irq>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:111
  GPIO_enable_irq(BASIC_GPIO_PBS, PB2);  
60002ce4:	00100593          	li	a1,1
60002ce8:	95818513          	addi	a0,gp,-1704 # 80000158 <g_gpio_in_PBs>
60002cec:	cb0fe0ef          	jal	ra,6000119c <GPIO_enable_irq>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:113

  GPIO_set_output(BASIC_GPIO_LEDS, LED1_GREEN, LED_OFF);
60002cf0:	00000613          	li	a2,0
60002cf4:	00200593          	li	a1,2
60002cf8:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002cfc:	a68fe0ef          	jal	ra,60000f64 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:114
  GPIO_set_output(BASIC_GPIO_LEDS, LED1_RED, LED_OFF);
60002d00:	00000613          	li	a2,0
60002d04:	00300593          	li	a1,3
60002d08:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002d0c:	a58fe0ef          	jal	ra,60000f64 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:115
  GPIO_set_output(BASIC_GPIO_LEDS, LED2_GREEN, LED_OFF);
60002d10:	00000613          	li	a2,0
60002d14:	00400593          	li	a1,4
60002d18:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002d1c:	a48fe0ef          	jal	ra,60000f64 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:116
  GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_OFF);
60002d20:	00000613          	li	a2,0
60002d24:	00500593          	li	a1,5
60002d28:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002d2c:	a38fe0ef          	jal	ra,60000f64 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:118
    
  UART_init(BASIC_UART,
60002d30:	00100693          	li	a3,1
60002d34:	01a00613          	li	a2,26
60002d38:	fec42583          	lw	a1,-20(s0)
60002d3c:	96818513          	addi	a0,gp,-1688 # 80000168 <g_uart_term>
60002d40:	e39fd0ef          	jal	ra,60000b78 <UART_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:123
  					interface_addr | BASIC_IO_UART_ADDR,
						BAUD_VALUE_115200,
            (DATA_8_BITS | NO_PARITY));
   
}
60002d44:	00000013          	nop
60002d48:	01c12083          	lw	ra,28(sp)
60002d4c:	01812403          	lw	s0,24(sp)
60002d50:	02010113          	addi	sp,sp,32
60002d54:	00008067          	ret

60002d58 <setLED2_GREEN>:
setLED2_GREEN():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:161

void clearLED1_RED() {
	GPIO_set_output(BASIC_GPIO_LEDS, LED1_RED, LED_OFF);
}

void setLED2_GREEN() {
60002d58:	ff010113          	addi	sp,sp,-16
60002d5c:	00112623          	sw	ra,12(sp)
60002d60:	00812423          	sw	s0,8(sp)
60002d64:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:162
	GPIO_set_output(BASIC_GPIO_LEDS, LED2_GREEN, LED_ON);
60002d68:	00100613          	li	a2,1
60002d6c:	00400593          	li	a1,4
60002d70:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002d74:	9f0fe0ef          	jal	ra,60000f64 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:163
}
60002d78:	00000013          	nop
60002d7c:	00c12083          	lw	ra,12(sp)
60002d80:	00812403          	lw	s0,8(sp)
60002d84:	01010113          	addi	sp,sp,16
60002d88:	00008067          	ret

60002d8c <clearLED2_GREEN>:
clearLED2_GREEN():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:165

void clearLED2_GREEN() {
60002d8c:	ff010113          	addi	sp,sp,-16
60002d90:	00112623          	sw	ra,12(sp)
60002d94:	00812423          	sw	s0,8(sp)
60002d98:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:166
	GPIO_set_output(BASIC_GPIO_LEDS, LED2_GREEN, LED_OFF);
60002d9c:	00000613          	li	a2,0
60002da0:	00400593          	li	a1,4
60002da4:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002da8:	9bcfe0ef          	jal	ra,60000f64 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:167
}
60002dac:	00000013          	nop
60002db0:	00c12083          	lw	ra,12(sp)
60002db4:	00812403          	lw	s0,8(sp)
60002db8:	01010113          	addi	sp,sp,16
60002dbc:	00008067          	ret

60002dc0 <UART_Tx_Msg>:
UART_Tx_Msg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:179
	GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_OFF);
}

// --- Terminal Functions ------------------------------------------------------

void UART_Tx_Msg(char* msg, uint8_t type) {
60002dc0:	fe010113          	addi	sp,sp,-32
60002dc4:	00112e23          	sw	ra,28(sp)
60002dc8:	00812c23          	sw	s0,24(sp)
60002dcc:	02010413          	addi	s0,sp,32
60002dd0:	fea42623          	sw	a0,-20(s0)
60002dd4:	00058793          	mv	a5,a1
60002dd8:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:180
	if (type == 1) {
60002ddc:	feb44703          	lbu	a4,-21(s0)
60002de0:	00100793          	li	a5,1
60002de4:	00f71a63          	bne	a4,a5,60002df8 <UART_Tx_Msg+0x38>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:181
		UART_polled_tx_string(BASIC_UART, (const uint8_t *) msg);
60002de8:	fec42583          	lw	a1,-20(s0)
60002dec:	96818513          	addi	a0,gp,-1688 # 80000168 <g_uart_term>
60002df0:	f55fd0ef          	jal	ra,60000d44 <UART_polled_tx_string>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:185
	} else {
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
	}
}
60002df4:	0140006f          	j	60002e08 <UART_Tx_Msg+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:183
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
60002df8:	00100613          	li	a2,1
60002dfc:	fec42583          	lw	a1,-20(s0)
60002e00:	96818513          	addi	a0,gp,-1688 # 80000168 <g_uart_term>
60002e04:	e8dfd0ef          	jal	ra,60000c90 <UART_send>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../Creative/BasicIO.c:185
}
60002e08:	00000013          	nop
60002e0c:	01c12083          	lw	ra,28(sp)
60002e10:	01812403          	lw	s0,24(sp)
60002e14:	02010113          	addi	sp,sp,32
60002e18:	00008067          	ret

60002e1c <PLIC_init>:
PLIC_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:124
{
60002e1c:	fe010113          	addi	sp,sp,-32
60002e20:	00812e23          	sw	s0,28(sp)
60002e24:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
60002e28:	f14027f3          	csrr	a5,mhartid
60002e2c:	fef42423          	sw	a5,-24(s0)
60002e30:	fe842783          	lw	a5,-24(s0)
60002e34:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
60002e38:	fe042623          	sw	zero,-20(s0)
60002e3c:	03c0006f          	j	60002e78 <PLIC_init+0x5c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
60002e40:	40000737          	lui	a4,0x40000
60002e44:	fe442783          	lw	a5,-28(s0)
60002e48:	00579693          	slli	a3,a5,0x5
60002e4c:	fec42783          	lw	a5,-20(s0)
60002e50:	00f686b3          	add	a3,a3,a5
60002e54:	000017b7          	lui	a5,0x1
60002e58:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60002e5c:	00f687b3          	add	a5,a3,a5
60002e60:	00279793          	slli	a5,a5,0x2
60002e64:	00f707b3          	add	a5,a4,a5
60002e68:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
60002e6c:	fec42783          	lw	a5,-20(s0)
60002e70:	00178793          	addi	a5,a5,1
60002e74:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:129 (discriminator 1)
60002e78:	fec42783          	lw	a5,-20(s0)
60002e7c:	fc0782e3          	beqz	a5,60002e40 <PLIC_init+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
60002e80:	fe042623          	sw	zero,-20(s0)
60002e84:	0240006f          	j	60002ea8 <PLIC_init+0x8c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
60002e88:	40000737          	lui	a4,0x40000
60002e8c:	fec42783          	lw	a5,-20(s0)
60002e90:	00279793          	slli	a5,a5,0x2
60002e94:	00f707b3          	add	a5,a4,a5
60002e98:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
60002e9c:	fec42783          	lw	a5,-20(s0)
60002ea0:	00178793          	addi	a5,a5,1
60002ea4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:137 (discriminator 1)
60002ea8:	fec42703          	lw	a4,-20(s0)
60002eac:	01e00793          	li	a5,30
60002eb0:	fce7fce3          	bgeu	a5,a4,60002e88 <PLIC_init+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
60002eb4:	40000737          	lui	a4,0x40000
60002eb8:	fe442783          	lw	a5,-28(s0)
60002ebc:	20078793          	addi	a5,a5,512
60002ec0:	00c79793          	slli	a5,a5,0xc
60002ec4:	00f707b3          	add	a5,a4,a5
60002ec8:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
60002ecc:	000017b7          	lui	a5,0x1
60002ed0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60002ed4:	3047a7f3          	csrrs	a5,mie,a5
60002ed8:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\riscv_hal/riscv_plic.h:147
}
60002edc:	00000013          	nop
60002ee0:	01c12403          	lw	s0,28(sp)
60002ee4:	02010113          	addi	sp,sp,32
60002ee8:	00008067          	ret

60002eec <External_31_IRQHandler>:
External_31_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:113


/*----------------------------------------------------------------------------
 * User Pushbutton #1 Interrupt Handler
 */
void External_31_IRQHandler() {
60002eec:	ff010113          	addi	sp,sp,-16
60002ef0:	00812623          	sw	s0,12(sp)
60002ef4:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:118
/*
	GPIO_clear_irq(&g_gpio_in_pbs, PB1);
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60002ef8:	00000013          	nop
60002efc:	00c12403          	lw	s0,12(sp)
60002f00:	01010113          	addi	sp,sp,16
60002f04:	00008067          	ret

60002f08 <External_30_IRQHandler>:
External_30_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:123

/*----------------------------------------------------------------------------
 * User Pushbutton #2 Interrupt Handler
 */
void External_30_IRQHandler() {
60002f08:	ff010113          	addi	sp,sp,-16
60002f0c:	00812623          	sw	s0,12(sp)
60002f10:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:128
/*
	GPIO_clear_irq(&g_gpio_in_pbs, PB2);
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60002f14:	00000013          	nop
60002f18:	00c12403          	lw	s0,12(sp)
60002f1c:	01010113          	addi	sp,sp,16
60002f20:	00008067          	ret

60002f24 <External_29_IRQHandler>:
External_29_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:133

/*----------------------------------------------------------------------------
 * User Timer Interrupt Handler
 */
void External_29_IRQHandler() {
60002f24:	ff010113          	addi	sp,sp,-16
60002f28:	00812623          	sw	s0,12(sp)
60002f2c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:137
/*
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60002f30:	00000013          	nop
60002f34:	00c12403          	lw	s0,12(sp)
60002f38:	01010113          	addi	sp,sp,16
60002f3c:	00008067          	ret

60002f40 <main>:
main():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:144
/*-----------------------------------------------------------*/
#define ADD2_BASE_ADDR 0x70002000UL
#define ADD2 &add2_inst
static add2_instance_t add2_inst;

int main(void) {
60002f40:	fb010113          	addi	sp,sp,-80
60002f44:	04112623          	sw	ra,76(sp)
60002f48:	04812423          	sw	s0,72(sp)
60002f4c:	05010413          	addi	s0,sp,80
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:146

	PLIC_init();
60002f50:	ecdff0ef          	jal	ra,60002e1c <PLIC_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:150

	// -- Hardware setup -------------------------------------------------------

	BasicIO_Init(BASIC_IO_INTR_ADDR);
60002f54:	70000537          	lui	a0,0x70000
60002f58:	d3dff0ef          	jal	ra,60002c94 <BasicIO_Init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:151
	ADD2_init(ADD2, ADD2_BASE_ADDR);
60002f5c:	700025b7          	lui	a1,0x70002
60002f60:	97018513          	addi	a0,gp,-1680 # 80000170 <add2_inst>
60002f64:	ab8fe0ef          	jal	ra,6000121c <ADD2_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:155

	// -- Main program ---------------------------------------------------------

	UART_Tx_Msg(Checking, 1);
60002f68:	8141a783          	lw	a5,-2028(gp) # 80000014 <Checking>
60002f6c:	00100593          	li	a1,1
60002f70:	00078513          	mv	a0,a5
60002f74:	e4dff0ef          	jal	ra,60002dc0 <UART_Tx_Msg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:160
	//UART_Tx_Msg(g_MSG_INTRO, 1);
	//UART_Tx_Msg(g_MSG_DEMO, 1);

	/* Create the three test tasks. */
	xTaskCreate(vLEDTestTask1, "LED1", 1000, NULL, 1, NULL);
60002f78:	00000893          	li	a7,0
60002f7c:	00000813          	li	a6,0
60002f80:	00000793          	li	a5,0
60002f84:	00100713          	li	a4,1
60002f88:	00000693          	li	a3,0
60002f8c:	3e800613          	li	a2,1000
60002f90:	600045b7          	lui	a1,0x60004
60002f94:	09c58593          	addi	a1,a1,156 # 6000409c <_malloc_usable_size_r+0x124>
60002f98:	60003537          	lui	a0,0x60003
60002f9c:	09850513          	addi	a0,a0,152 # 60003098 <vLEDTestTask1>
60002fa0:	8b0ff0ef          	jal	ra,60002050 <xTaskGenericCreate>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:164
	//xTaskCreate(vLEDTestTask2, "LED2", 1000, NULL, 3, NULL);
	//xTaskCreate(vLEDTestTask3, "LED3", 1000, NULL, 2, NULL);

	uint8_t outA = 0;
60002fa4:	fe0407a3          	sb	zero,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:165
	uint8_t outB = 0;
60002fa8:	fe040723          	sb	zero,-18(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:166
	uint8_t outX = 0;
60002fac:	fe0406a3          	sb	zero,-19(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:167
	uint8_t a = 2;
60002fb0:	00200793          	li	a5,2
60002fb4:	fef40623          	sb	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:168
	uint8_t b = 5;
60002fb8:	00500793          	li	a5,5
60002fbc:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:170

	set_A(ADD2,a);
60002fc0:	fec44783          	lbu	a5,-20(s0)
60002fc4:	00078593          	mv	a1,a5
60002fc8:	97018513          	addi	a0,gp,-1680 # 80000170 <add2_inst>
60002fcc:	ab4fe0ef          	jal	ra,60001280 <set_A>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:171
	set_B(ADD2,b);
60002fd0:	feb44783          	lbu	a5,-21(s0)
60002fd4:	00078593          	mv	a1,a5
60002fd8:	97018513          	addi	a0,gp,-1680 # 80000170 <add2_inst>
60002fdc:	aecfe0ef          	jal	ra,600012c8 <set_B>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:173

	outA = get_ABX(ADD2,0);
60002fe0:	00000593          	li	a1,0
60002fe4:	97018513          	addi	a0,gp,-1680 # 80000170 <add2_inst>
60002fe8:	b2cfe0ef          	jal	ra,60001314 <get_ABX>
60002fec:	00050793          	mv	a5,a0
60002ff0:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:174
	outB = get_ABX(ADD2,1);
60002ff4:	00100593          	li	a1,1
60002ff8:	97018513          	addi	a0,gp,-1680 # 80000170 <add2_inst>
60002ffc:	b18fe0ef          	jal	ra,60001314 <get_ABX>
60003000:	00050793          	mv	a5,a0
60003004:	fef40723          	sb	a5,-18(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:175
	outX = get_ABX(ADD2,2);
60003008:	00200593          	li	a1,2
6000300c:	97018513          	addi	a0,gp,-1680 # 80000170 <add2_inst>
60003010:	b04fe0ef          	jal	ra,60001314 <get_ABX>
60003014:	00050793          	mv	a5,a0
60003018:	fef406a3          	sb	a5,-19(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:179

	char message[50];

	sprintf(message,"%d + %d = %d\n\r",outA,outB,outX);
6000301c:	fef44783          	lbu	a5,-17(s0)
60003020:	fee44683          	lbu	a3,-18(s0)
60003024:	fed44703          	lbu	a4,-19(s0)
60003028:	fb840513          	addi	a0,s0,-72
6000302c:	00078613          	mv	a2,a5
60003030:	600047b7          	lui	a5,0x60004
60003034:	0a478593          	addi	a1,a5,164 # 600040a4 <_malloc_usable_size_r+0x12c>
60003038:	090000ef          	jal	ra,600030c8 <siprintf>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:180
	UART_Tx_Msg(message, 1);
6000303c:	fb840793          	addi	a5,s0,-72
60003040:	00100593          	li	a1,1
60003044:	00078513          	mv	a0,a5
60003048:	d79ff0ef          	jal	ra,60002dc0 <UART_Tx_Msg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:183

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
6000304c:	aa4ff0ef          	jal	ra,600022f0 <vTaskStartScheduler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:186

	/* Exit FreeRTOS */
	return 0;
60003050:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:187
}
60003054:	00078513          	mv	a0,a5
60003058:	04c12083          	lw	ra,76(sp)
6000305c:	04812403          	lw	s0,72(sp)
60003060:	05010113          	addi	sp,sp,80
60003064:	00008067          	ret

60003068 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:191

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void) {
60003068:	ff010113          	addi	sp,sp,-16
6000306c:	00812623          	sw	s0,12(sp)
60003070:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:203
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
60003074:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:204 (discriminator 1)
	for(;;);
60003078:	0000006f          	j	60003078 <vApplicationMallocFailedHook+0x10>

6000307c <vApplicationIdleHook>:
vApplicationIdleHook():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:208
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook(void) {
6000307c:	ff010113          	addi	sp,sp,-16
60003080:	00812623          	sw	s0,12(sp)
60003084:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:219
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
60003088:	00000013          	nop
6000308c:	00c12403          	lw	s0,12(sp)
60003090:	01010113          	addi	sp,sp,16
60003094:	00008067          	ret

60003098 <vLEDTestTask1>:
vLEDTestTask1():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:238
}


/*-----------------------------------------------------------*/

static void vLEDTestTask1(void *pvParameters) {
60003098:	fe010113          	addi	sp,sp,-32
6000309c:	00112e23          	sw	ra,28(sp)
600030a0:	00812c23          	sw	s0,24(sp)
600030a4:	02010413          	addi	s0,sp,32
600030a8:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:243 (discriminator 1)

	(void) pvParameters;

	for(;;)	{
	  setLED2_GREEN();
600030ac:	cadff0ef          	jal	ra,60002d58 <setLED2_GREEN>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:244 (discriminator 1)
	  vTaskDelay(13);
600030b0:	00d00513          	li	a0,13
600030b4:	9b8ff0ef          	jal	ra,6000226c <vTaskDelay>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:245 (discriminator 1)
	  clearLED2_GREEN();
600030b8:	cd5ff0ef          	jal	ra,60002d8c <clearLED2_GREEN>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:246 (discriminator 1)
	  vTaskDelay(13);
600030bc:	00d00513          	li	a0,13
600030c0:	9acff0ef          	jal	ra,6000226c <vTaskDelay>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\Custom Core from HDL\Creative_MiV_FreeRTOS_Demo_old\Debug/../main.c:243 (discriminator 1)
	  setLED2_GREEN();
600030c4:	fe9ff06f          	j	600030ac <vLEDTestTask1+0x14>

600030c8 <siprintf>:
sprintf():
600030c8:	f6010113          	addi	sp,sp,-160
600030cc:	08f12a23          	sw	a5,148(sp)
600030d0:	800007b7          	lui	a5,0x80000
600030d4:	fff7c793          	not	a5,a5
600030d8:	00f12e23          	sw	a5,28(sp)
600030dc:	00f12823          	sw	a5,16(sp)
600030e0:	ffff07b7          	lui	a5,0xffff0
600030e4:	20878793          	addi	a5,a5,520 # ffff0208 <__stack_top+0x7ffd4fb8>
600030e8:	08c12423          	sw	a2,136(sp)
600030ec:	08d12623          	sw	a3,140(sp)
600030f0:	08e12823          	sw	a4,144(sp)
600030f4:	09012c23          	sw	a6,152(sp)
600030f8:	09112e23          	sw	a7,156(sp)
600030fc:	00f12a23          	sw	a5,20(sp)
60003100:	81818793          	addi	a5,gp,-2024 # 80000018 <_impure_ptr>
60003104:	00a12423          	sw	a0,8(sp)
60003108:	00a12c23          	sw	a0,24(sp)
6000310c:	0007a503          	lw	a0,0(a5)
60003110:	08810693          	addi	a3,sp,136
60003114:	00058613          	mv	a2,a1
60003118:	00810593          	addi	a1,sp,8
6000311c:	06112e23          	sw	ra,124(sp)
60003120:	00d12223          	sw	a3,4(sp)
60003124:	180000ef          	jal	ra,600032a4 <_svfiprintf_r>
60003128:	00812783          	lw	a5,8(sp)
6000312c:	00078023          	sb	zero,0(a5)
60003130:	07c12083          	lw	ra,124(sp)
60003134:	0a010113          	addi	sp,sp,160
60003138:	00008067          	ret

6000313c <__ssputs_r>:
__ssputs_r():
6000313c:	fe010113          	addi	sp,sp,-32
60003140:	01212823          	sw	s2,16(sp)
60003144:	0085a903          	lw	s2,8(a1)
60003148:	00812c23          	sw	s0,24(sp)
6000314c:	01412423          	sw	s4,8(sp)
60003150:	01612023          	sw	s6,0(sp)
60003154:	00112e23          	sw	ra,28(sp)
60003158:	00912a23          	sw	s1,20(sp)
6000315c:	01312623          	sw	s3,12(sp)
60003160:	01512223          	sw	s5,4(sp)
60003164:	00058413          	mv	s0,a1
60003168:	00060b13          	mv	s6,a2
6000316c:	00068a13          	mv	s4,a3
60003170:	0d26ee63          	bltu	a3,s2,6000324c <__ssputs_r+0x110>
60003174:	00c5d783          	lhu	a5,12(a1)
60003178:	4807f713          	andi	a4,a5,1152
6000317c:	0c070663          	beqz	a4,60003248 <__ssputs_r+0x10c>
60003180:	00042483          	lw	s1,0(s0)
60003184:	0105a583          	lw	a1,16(a1)
60003188:	01442703          	lw	a4,20(s0)
6000318c:	00050a93          	mv	s5,a0
60003190:	40b489b3          	sub	s3,s1,a1
60003194:	00300493          	li	s1,3
60003198:	02e484b3          	mul	s1,s1,a4
6000319c:	00200713          	li	a4,2
600031a0:	02e4c4b3          	div	s1,s1,a4
600031a4:	00168713          	addi	a4,a3,1
600031a8:	01370733          	add	a4,a4,s3
600031ac:	00e4f463          	bgeu	s1,a4,600031b4 <__ssputs_r+0x78>
600031b0:	00070493          	mv	s1,a4
600031b4:	4007f793          	andi	a5,a5,1024
600031b8:	0c078463          	beqz	a5,60003280 <__ssputs_r+0x144>
600031bc:	00048593          	mv	a1,s1
600031c0:	000a8513          	mv	a0,s5
600031c4:	37d000ef          	jal	ra,60003d40 <_malloc_r>
600031c8:	00050913          	mv	s2,a0
600031cc:	04051263          	bnez	a0,60003210 <__ssputs_r+0xd4>
600031d0:	00c00793          	li	a5,12
600031d4:	00faa023          	sw	a5,0(s5)
600031d8:	00c45783          	lhu	a5,12(s0)
600031dc:	fff00513          	li	a0,-1
600031e0:	0407e793          	ori	a5,a5,64
600031e4:	00f41623          	sh	a5,12(s0)
600031e8:	01c12083          	lw	ra,28(sp)
600031ec:	01812403          	lw	s0,24(sp)
600031f0:	01412483          	lw	s1,20(sp)
600031f4:	01012903          	lw	s2,16(sp)
600031f8:	00c12983          	lw	s3,12(sp)
600031fc:	00812a03          	lw	s4,8(sp)
60003200:	00412a83          	lw	s5,4(sp)
60003204:	00012b03          	lw	s6,0(sp)
60003208:	02010113          	addi	sp,sp,32
6000320c:	00008067          	ret
60003210:	01042583          	lw	a1,16(s0)
60003214:	00098613          	mv	a2,s3
60003218:	c85fe0ef          	jal	ra,60001e9c <memcpy>
6000321c:	00c45783          	lhu	a5,12(s0)
60003220:	b7f7f793          	andi	a5,a5,-1153
60003224:	0807e793          	ori	a5,a5,128
60003228:	00f41623          	sh	a5,12(s0)
6000322c:	01242823          	sw	s2,16(s0)
60003230:	00942a23          	sw	s1,20(s0)
60003234:	01390933          	add	s2,s2,s3
60003238:	413484b3          	sub	s1,s1,s3
6000323c:	01242023          	sw	s2,0(s0)
60003240:	00942423          	sw	s1,8(s0)
60003244:	000a0913          	mv	s2,s4
60003248:	012a7463          	bgeu	s4,s2,60003250 <__ssputs_r+0x114>
6000324c:	000a0913          	mv	s2,s4
60003250:	00042503          	lw	a0,0(s0)
60003254:	00090613          	mv	a2,s2
60003258:	000b0593          	mv	a1,s6
6000325c:	185000ef          	jal	ra,60003be0 <memmove>
60003260:	00842783          	lw	a5,8(s0)
60003264:	00000513          	li	a0,0
60003268:	412787b3          	sub	a5,a5,s2
6000326c:	00f42423          	sw	a5,8(s0)
60003270:	00042783          	lw	a5,0(s0)
60003274:	01278933          	add	s2,a5,s2
60003278:	01242023          	sw	s2,0(s0)
6000327c:	f6dff06f          	j	600031e8 <__ssputs_r+0xac>
60003280:	00048613          	mv	a2,s1
60003284:	000a8513          	mv	a0,s5
60003288:	405000ef          	jal	ra,60003e8c <_realloc_r>
6000328c:	00050913          	mv	s2,a0
60003290:	f8051ee3          	bnez	a0,6000322c <__ssputs_r+0xf0>
60003294:	01042583          	lw	a1,16(s0)
60003298:	000a8513          	mv	a0,s5
6000329c:	1a1000ef          	jal	ra,60003c3c <_free_r>
600032a0:	f31ff06f          	j	600031d0 <__ssputs_r+0x94>

600032a4 <_svfiprintf_r>:
_svfprintf_r():
600032a4:	00c5d783          	lhu	a5,12(a1)
600032a8:	f5010113          	addi	sp,sp,-176
600032ac:	0a912223          	sw	s1,164(sp)
600032b0:	0b212023          	sw	s2,160(sp)
600032b4:	09312e23          	sw	s3,156(sp)
600032b8:	0a112623          	sw	ra,172(sp)
600032bc:	0a812423          	sw	s0,168(sp)
600032c0:	09412c23          	sw	s4,152(sp)
600032c4:	09512a23          	sw	s5,148(sp)
600032c8:	09612823          	sw	s6,144(sp)
600032cc:	09712623          	sw	s7,140(sp)
600032d0:	09812423          	sw	s8,136(sp)
600032d4:	09912223          	sw	s9,132(sp)
600032d8:	0807f793          	andi	a5,a5,128
600032dc:	00050993          	mv	s3,a0
600032e0:	00058913          	mv	s2,a1
600032e4:	00060493          	mv	s1,a2
600032e8:	06078863          	beqz	a5,60003358 <_svfiprintf_r+0xb4>
600032ec:	0105a783          	lw	a5,16(a1)
600032f0:	06079463          	bnez	a5,60003358 <_svfiprintf_r+0xb4>
600032f4:	04000593          	li	a1,64
600032f8:	00d12623          	sw	a3,12(sp)
600032fc:	245000ef          	jal	ra,60003d40 <_malloc_r>
60003300:	00a92023          	sw	a0,0(s2)
60003304:	00a92823          	sw	a0,16(s2)
60003308:	00c12683          	lw	a3,12(sp)
6000330c:	04051263          	bnez	a0,60003350 <_svfiprintf_r+0xac>
60003310:	00c00793          	li	a5,12
60003314:	00f9a023          	sw	a5,0(s3)
60003318:	fff00513          	li	a0,-1
6000331c:	0ac12083          	lw	ra,172(sp)
60003320:	0a812403          	lw	s0,168(sp)
60003324:	0a412483          	lw	s1,164(sp)
60003328:	0a012903          	lw	s2,160(sp)
6000332c:	09c12983          	lw	s3,156(sp)
60003330:	09812a03          	lw	s4,152(sp)
60003334:	09412a83          	lw	s5,148(sp)
60003338:	09012b03          	lw	s6,144(sp)
6000333c:	08c12b83          	lw	s7,140(sp)
60003340:	08812c03          	lw	s8,136(sp)
60003344:	08412c83          	lw	s9,132(sp)
60003348:	0b010113          	addi	sp,sp,176
6000334c:	00008067          	ret
60003350:	04000793          	li	a5,64
60003354:	00f92a23          	sw	a5,20(s2)
60003358:	02000793          	li	a5,32
6000335c:	02f10ca3          	sb	a5,57(sp)
60003360:	03000793          	li	a5,48
60003364:	02012a23          	sw	zero,52(sp)
60003368:	02f10d23          	sb	a5,58(sp)
6000336c:	00d12e23          	sw	a3,28(sp)
60003370:	02500b93          	li	s7,37
60003374:	00001a97          	auipc	s5,0x1
60003378:	d40a8a93          	addi	s5,s5,-704 # 600040b4 <_malloc_usable_size_r+0x13c>
6000337c:	00100c13          	li	s8,1
60003380:	00a00b13          	li	s6,10
60003384:	00048413          	mv	s0,s1
60003388:	00044783          	lbu	a5,0(s0)
6000338c:	00078463          	beqz	a5,60003394 <_svfiprintf_r+0xf0>
60003390:	0d779863          	bne	a5,s7,60003460 <_svfiprintf_r+0x1bc>
60003394:	40940cb3          	sub	s9,s0,s1
60003398:	020c8663          	beqz	s9,600033c4 <_svfiprintf_r+0x120>
6000339c:	000c8693          	mv	a3,s9
600033a0:	00048613          	mv	a2,s1
600033a4:	00090593          	mv	a1,s2
600033a8:	00098513          	mv	a0,s3
600033ac:	d91ff0ef          	jal	ra,6000313c <__ssputs_r>
600033b0:	fff00793          	li	a5,-1
600033b4:	24f50a63          	beq	a0,a5,60003608 <_svfiprintf_r+0x364>
600033b8:	03412683          	lw	a3,52(sp)
600033bc:	019686b3          	add	a3,a3,s9
600033c0:	02d12a23          	sw	a3,52(sp)
600033c4:	00044783          	lbu	a5,0(s0)
600033c8:	24078063          	beqz	a5,60003608 <_svfiprintf_r+0x364>
600033cc:	fff00793          	li	a5,-1
600033d0:	00140493          	addi	s1,s0,1
600033d4:	02012023          	sw	zero,32(sp)
600033d8:	02012623          	sw	zero,44(sp)
600033dc:	02f12223          	sw	a5,36(sp)
600033e0:	02012423          	sw	zero,40(sp)
600033e4:	060101a3          	sb	zero,99(sp)
600033e8:	06012c23          	sw	zero,120(sp)
600033ec:	0004c583          	lbu	a1,0(s1)
600033f0:	00500613          	li	a2,5
600033f4:	000a8513          	mv	a0,s5
600033f8:	7c4000ef          	jal	ra,60003bbc <memchr>
600033fc:	00148413          	addi	s0,s1,1
60003400:	02012783          	lw	a5,32(sp)
60003404:	06051263          	bnez	a0,60003468 <_svfiprintf_r+0x1c4>
60003408:	0107f713          	andi	a4,a5,16
6000340c:	00070663          	beqz	a4,60003418 <_svfiprintf_r+0x174>
60003410:	02000713          	li	a4,32
60003414:	06e101a3          	sb	a4,99(sp)
60003418:	0087f713          	andi	a4,a5,8
6000341c:	00070663          	beqz	a4,60003428 <_svfiprintf_r+0x184>
60003420:	02b00713          	li	a4,43
60003424:	06e101a3          	sb	a4,99(sp)
60003428:	0004c683          	lbu	a3,0(s1)
6000342c:	02a00713          	li	a4,42
60003430:	04e68863          	beq	a3,a4,60003480 <_svfiprintf_r+0x1dc>
60003434:	02c12783          	lw	a5,44(sp)
60003438:	00048413          	mv	s0,s1
6000343c:	00000693          	li	a3,0
60003440:	00900613          	li	a2,9
60003444:	00044703          	lbu	a4,0(s0)
60003448:	00140593          	addi	a1,s0,1
6000344c:	fd070713          	addi	a4,a4,-48 # 3fffffd0 <RAM_SIZE+0x3fefffd0>
60003450:	08e67a63          	bgeu	a2,a4,600034e4 <_svfiprintf_r+0x240>
60003454:	04068263          	beqz	a3,60003498 <_svfiprintf_r+0x1f4>
60003458:	02f12623          	sw	a5,44(sp)
6000345c:	03c0006f          	j	60003498 <_svfiprintf_r+0x1f4>
60003460:	00140413          	addi	s0,s0,1
60003464:	f25ff06f          	j	60003388 <_svfiprintf_r+0xe4>
60003468:	41550533          	sub	a0,a0,s5
6000346c:	00ac1533          	sll	a0,s8,a0
60003470:	00a7e7b3          	or	a5,a5,a0
60003474:	02f12023          	sw	a5,32(sp)
60003478:	00040493          	mv	s1,s0
6000347c:	f71ff06f          	j	600033ec <_svfiprintf_r+0x148>
60003480:	01c12703          	lw	a4,28(sp)
60003484:	00470693          	addi	a3,a4,4
60003488:	00072703          	lw	a4,0(a4)
6000348c:	00d12e23          	sw	a3,28(sp)
60003490:	04074063          	bltz	a4,600034d0 <_svfiprintf_r+0x22c>
60003494:	02e12623          	sw	a4,44(sp)
60003498:	00044703          	lbu	a4,0(s0)
6000349c:	02e00793          	li	a5,46
600034a0:	08f71463          	bne	a4,a5,60003528 <_svfiprintf_r+0x284>
600034a4:	00144703          	lbu	a4,1(s0)
600034a8:	02a00793          	li	a5,42
600034ac:	04f71a63          	bne	a4,a5,60003500 <_svfiprintf_r+0x25c>
600034b0:	01c12783          	lw	a5,28(sp)
600034b4:	00240413          	addi	s0,s0,2
600034b8:	00478713          	addi	a4,a5,4
600034bc:	0007a783          	lw	a5,0(a5)
600034c0:	00e12e23          	sw	a4,28(sp)
600034c4:	0207ca63          	bltz	a5,600034f8 <_svfiprintf_r+0x254>
600034c8:	02f12223          	sw	a5,36(sp)
600034cc:	05c0006f          	j	60003528 <_svfiprintf_r+0x284>
600034d0:	40e00733          	neg	a4,a4
600034d4:	0027e793          	ori	a5,a5,2
600034d8:	02e12623          	sw	a4,44(sp)
600034dc:	02f12023          	sw	a5,32(sp)
600034e0:	fb9ff06f          	j	60003498 <_svfiprintf_r+0x1f4>
600034e4:	036787b3          	mul	a5,a5,s6
600034e8:	00100693          	li	a3,1
600034ec:	00058413          	mv	s0,a1
600034f0:	00e787b3          	add	a5,a5,a4
600034f4:	f51ff06f          	j	60003444 <_svfiprintf_r+0x1a0>
600034f8:	fff00793          	li	a5,-1
600034fc:	fcdff06f          	j	600034c8 <_svfiprintf_r+0x224>
60003500:	00140413          	addi	s0,s0,1
60003504:	02012223          	sw	zero,36(sp)
60003508:	00000693          	li	a3,0
6000350c:	00000793          	li	a5,0
60003510:	00900613          	li	a2,9
60003514:	00044703          	lbu	a4,0(s0)
60003518:	00140593          	addi	a1,s0,1
6000351c:	fd070713          	addi	a4,a4,-48
60003520:	08e67c63          	bgeu	a2,a4,600035b8 <_svfiprintf_r+0x314>
60003524:	fa0692e3          	bnez	a3,600034c8 <_svfiprintf_r+0x224>
60003528:	00044583          	lbu	a1,0(s0)
6000352c:	00300613          	li	a2,3
60003530:	00001517          	auipc	a0,0x1
60003534:	b8c50513          	addi	a0,a0,-1140 # 600040bc <_malloc_usable_size_r+0x144>
60003538:	684000ef          	jal	ra,60003bbc <memchr>
6000353c:	02050463          	beqz	a0,60003564 <_svfiprintf_r+0x2c0>
60003540:	00001797          	auipc	a5,0x1
60003544:	b7c78793          	addi	a5,a5,-1156 # 600040bc <_malloc_usable_size_r+0x144>
60003548:	40f50533          	sub	a0,a0,a5
6000354c:	04000793          	li	a5,64
60003550:	00a797b3          	sll	a5,a5,a0
60003554:	02012503          	lw	a0,32(sp)
60003558:	00140413          	addi	s0,s0,1
6000355c:	00f56533          	or	a0,a0,a5
60003560:	02a12023          	sw	a0,32(sp)
60003564:	00044583          	lbu	a1,0(s0)
60003568:	00600613          	li	a2,6
6000356c:	00001517          	auipc	a0,0x1
60003570:	b5450513          	addi	a0,a0,-1196 # 600040c0 <_malloc_usable_size_r+0x148>
60003574:	00140493          	addi	s1,s0,1
60003578:	02b10c23          	sb	a1,56(sp)
6000357c:	640000ef          	jal	ra,60003bbc <memchr>
60003580:	0a050063          	beqz	a0,60003620 <_svfiprintf_r+0x37c>
60003584:	9fffd797          	auipc	a5,0x9fffd
60003588:	a7c78793          	addi	a5,a5,-1412 # 0 <HEAP_SIZE-0x1000>
6000358c:	04079863          	bnez	a5,600035dc <_svfiprintf_r+0x338>
60003590:	02012703          	lw	a4,32(sp)
60003594:	01c12783          	lw	a5,28(sp)
60003598:	10077713          	andi	a4,a4,256
6000359c:	02070863          	beqz	a4,600035cc <_svfiprintf_r+0x328>
600035a0:	00478793          	addi	a5,a5,4
600035a4:	00f12e23          	sw	a5,28(sp)
600035a8:	03412783          	lw	a5,52(sp)
600035ac:	014787b3          	add	a5,a5,s4
600035b0:	02f12a23          	sw	a5,52(sp)
600035b4:	dd1ff06f          	j	60003384 <_svfiprintf_r+0xe0>
600035b8:	036787b3          	mul	a5,a5,s6
600035bc:	00100693          	li	a3,1
600035c0:	00058413          	mv	s0,a1
600035c4:	00e787b3          	add	a5,a5,a4
600035c8:	f4dff06f          	j	60003514 <_svfiprintf_r+0x270>
600035cc:	00778793          	addi	a5,a5,7
600035d0:	ff87f793          	andi	a5,a5,-8
600035d4:	00878793          	addi	a5,a5,8
600035d8:	fcdff06f          	j	600035a4 <_svfiprintf_r+0x300>
600035dc:	01c10713          	addi	a4,sp,28
600035e0:	00000697          	auipc	a3,0x0
600035e4:	b5c68693          	addi	a3,a3,-1188 # 6000313c <__ssputs_r>
600035e8:	00090613          	mv	a2,s2
600035ec:	02010593          	addi	a1,sp,32
600035f0:	00098513          	mv	a0,s3
600035f4:	00000097          	auipc	ra,0x0
600035f8:	000000e7          	jalr	zero # 0 <HEAP_SIZE-0x1000>
600035fc:	fff00793          	li	a5,-1
60003600:	00050a13          	mv	s4,a0
60003604:	faf512e3          	bne	a0,a5,600035a8 <_svfiprintf_r+0x304>
60003608:	00c95783          	lhu	a5,12(s2)
6000360c:	fff00513          	li	a0,-1
60003610:	0407f793          	andi	a5,a5,64
60003614:	d00794e3          	bnez	a5,6000331c <_svfiprintf_r+0x78>
60003618:	03412503          	lw	a0,52(sp)
6000361c:	d01ff06f          	j	6000331c <_svfiprintf_r+0x78>
60003620:	01c10713          	addi	a4,sp,28
60003624:	00000697          	auipc	a3,0x0
60003628:	b1868693          	addi	a3,a3,-1256 # 6000313c <__ssputs_r>
6000362c:	00090613          	mv	a2,s2
60003630:	02010593          	addi	a1,sp,32
60003634:	00098513          	mv	a0,s3
60003638:	1b8000ef          	jal	ra,600037f0 <_printf_i>
6000363c:	fc1ff06f          	j	600035fc <_svfiprintf_r+0x358>

60003640 <_printf_common>:
_printf_common():
60003640:	fd010113          	addi	sp,sp,-48
60003644:	01512a23          	sw	s5,20(sp)
60003648:	0105a783          	lw	a5,16(a1)
6000364c:	00070a93          	mv	s5,a4
60003650:	0085a703          	lw	a4,8(a1)
60003654:	02812423          	sw	s0,40(sp)
60003658:	02912223          	sw	s1,36(sp)
6000365c:	01312e23          	sw	s3,28(sp)
60003660:	01412c23          	sw	s4,24(sp)
60003664:	02112623          	sw	ra,44(sp)
60003668:	03212023          	sw	s2,32(sp)
6000366c:	01612823          	sw	s6,16(sp)
60003670:	01712623          	sw	s7,12(sp)
60003674:	00050993          	mv	s3,a0
60003678:	00058413          	mv	s0,a1
6000367c:	00060493          	mv	s1,a2
60003680:	00068a13          	mv	s4,a3
60003684:	00e7d463          	bge	a5,a4,6000368c <_printf_common+0x4c>
60003688:	00070793          	mv	a5,a4
6000368c:	00f4a023          	sw	a5,0(s1)
60003690:	04344703          	lbu	a4,67(s0)
60003694:	00070663          	beqz	a4,600036a0 <_printf_common+0x60>
60003698:	00178793          	addi	a5,a5,1
6000369c:	00f4a023          	sw	a5,0(s1)
600036a0:	00042783          	lw	a5,0(s0)
600036a4:	0207f793          	andi	a5,a5,32
600036a8:	00078863          	beqz	a5,600036b8 <_printf_common+0x78>
600036ac:	0004a783          	lw	a5,0(s1)
600036b0:	00278793          	addi	a5,a5,2
600036b4:	00f4a023          	sw	a5,0(s1)
600036b8:	00042903          	lw	s2,0(s0)
600036bc:	00697913          	andi	s2,s2,6
600036c0:	00091e63          	bnez	s2,600036dc <_printf_common+0x9c>
600036c4:	01940b13          	addi	s6,s0,25
600036c8:	fff00b93          	li	s7,-1
600036cc:	00c42783          	lw	a5,12(s0)
600036d0:	0004a703          	lw	a4,0(s1)
600036d4:	40e787b3          	sub	a5,a5,a4
600036d8:	08f94263          	blt	s2,a5,6000375c <_printf_common+0x11c>
600036dc:	00042783          	lw	a5,0(s0)
600036e0:	04344683          	lbu	a3,67(s0)
600036e4:	0207f793          	andi	a5,a5,32
600036e8:	00d036b3          	snez	a3,a3
600036ec:	0c079063          	bnez	a5,600037ac <_printf_common+0x16c>
600036f0:	04340613          	addi	a2,s0,67
600036f4:	000a0593          	mv	a1,s4
600036f8:	00098513          	mv	a0,s3
600036fc:	000a80e7          	jalr	s5
60003700:	fff00793          	li	a5,-1
60003704:	06f50863          	beq	a0,a5,60003774 <_printf_common+0x134>
60003708:	00042783          	lw	a5,0(s0)
6000370c:	00400613          	li	a2,4
60003710:	0004a703          	lw	a4,0(s1)
60003714:	0067f793          	andi	a5,a5,6
60003718:	00c42683          	lw	a3,12(s0)
6000371c:	00000493          	li	s1,0
60003720:	00c79863          	bne	a5,a2,60003730 <_printf_common+0xf0>
60003724:	40e684b3          	sub	s1,a3,a4
60003728:	0004d463          	bgez	s1,60003730 <_printf_common+0xf0>
6000372c:	00000493          	li	s1,0
60003730:	00842783          	lw	a5,8(s0)
60003734:	01042703          	lw	a4,16(s0)
60003738:	00f75663          	bge	a4,a5,60003744 <_printf_common+0x104>
6000373c:	40e787b3          	sub	a5,a5,a4
60003740:	00f484b3          	add	s1,s1,a5
60003744:	00000913          	li	s2,0
60003748:	01a40413          	addi	s0,s0,26
6000374c:	fff00b13          	li	s6,-1
60003750:	09249063          	bne	s1,s2,600037d0 <_printf_common+0x190>
60003754:	00000513          	li	a0,0
60003758:	0200006f          	j	60003778 <_printf_common+0x138>
6000375c:	00100693          	li	a3,1
60003760:	000b0613          	mv	a2,s6
60003764:	000a0593          	mv	a1,s4
60003768:	00098513          	mv	a0,s3
6000376c:	000a80e7          	jalr	s5
60003770:	03751a63          	bne	a0,s7,600037a4 <_printf_common+0x164>
60003774:	fff00513          	li	a0,-1
60003778:	02c12083          	lw	ra,44(sp)
6000377c:	02812403          	lw	s0,40(sp)
60003780:	02412483          	lw	s1,36(sp)
60003784:	02012903          	lw	s2,32(sp)
60003788:	01c12983          	lw	s3,28(sp)
6000378c:	01812a03          	lw	s4,24(sp)
60003790:	01412a83          	lw	s5,20(sp)
60003794:	01012b03          	lw	s6,16(sp)
60003798:	00c12b83          	lw	s7,12(sp)
6000379c:	03010113          	addi	sp,sp,48
600037a0:	00008067          	ret
600037a4:	00190913          	addi	s2,s2,1
600037a8:	f25ff06f          	j	600036cc <_printf_common+0x8c>
600037ac:	00d40733          	add	a4,s0,a3
600037b0:	03000613          	li	a2,48
600037b4:	04c701a3          	sb	a2,67(a4)
600037b8:	04544703          	lbu	a4,69(s0)
600037bc:	00168793          	addi	a5,a3,1
600037c0:	00f407b3          	add	a5,s0,a5
600037c4:	00268693          	addi	a3,a3,2
600037c8:	04e781a3          	sb	a4,67(a5)
600037cc:	f25ff06f          	j	600036f0 <_printf_common+0xb0>
600037d0:	00100693          	li	a3,1
600037d4:	00040613          	mv	a2,s0
600037d8:	000a0593          	mv	a1,s4
600037dc:	00098513          	mv	a0,s3
600037e0:	000a80e7          	jalr	s5
600037e4:	f96508e3          	beq	a0,s6,60003774 <_printf_common+0x134>
600037e8:	00190913          	addi	s2,s2,1
600037ec:	f65ff06f          	j	60003750 <_printf_common+0x110>

600037f0 <_printf_i>:
_printf_i():
600037f0:	fd010113          	addi	sp,sp,-48
600037f4:	02812423          	sw	s0,40(sp)
600037f8:	02912223          	sw	s1,36(sp)
600037fc:	03212023          	sw	s2,32(sp)
60003800:	01312e23          	sw	s3,28(sp)
60003804:	02112623          	sw	ra,44(sp)
60003808:	01412c23          	sw	s4,24(sp)
6000380c:	01512a23          	sw	s5,20(sp)
60003810:	01612823          	sw	s6,16(sp)
60003814:	00068993          	mv	s3,a3
60003818:	0185c683          	lbu	a3,24(a1)
6000381c:	06e00793          	li	a5,110
60003820:	00060913          	mv	s2,a2
60003824:	00050493          	mv	s1,a0
60003828:	00058413          	mv	s0,a1
6000382c:	04358613          	addi	a2,a1,67
60003830:	28f68863          	beq	a3,a5,60003ac0 <_printf_i+0x2d0>
60003834:	06d7ea63          	bltu	a5,a3,600038a8 <_printf_i+0xb8>
60003838:	06300793          	li	a5,99
6000383c:	0af68e63          	beq	a3,a5,600038f8 <_printf_i+0x108>
60003840:	00d7ee63          	bltu	a5,a3,6000385c <_printf_i+0x6c>
60003844:	2a068c63          	beqz	a3,60003afc <_printf_i+0x30c>
60003848:	05800793          	li	a5,88
6000384c:	1ef68a63          	beq	a3,a5,60003a40 <_printf_i+0x250>
60003850:	04240a93          	addi	s5,s0,66
60003854:	04d40123          	sb	a3,66(s0)
60003858:	0b80006f          	j	60003910 <_printf_i+0x120>
6000385c:	06400793          	li	a5,100
60003860:	00f68663          	beq	a3,a5,6000386c <_printf_i+0x7c>
60003864:	06900793          	li	a5,105
60003868:	fef694e3          	bne	a3,a5,60003850 <_printf_i+0x60>
6000386c:	00042783          	lw	a5,0(s0)
60003870:	00072503          	lw	a0,0(a4)
60003874:	0807f693          	andi	a3,a5,128
60003878:	00450593          	addi	a1,a0,4
6000387c:	08068e63          	beqz	a3,60003918 <_printf_i+0x128>
60003880:	00052783          	lw	a5,0(a0)
60003884:	00b72023          	sw	a1,0(a4)
60003888:	0007d863          	bgez	a5,60003898 <_printf_i+0xa8>
6000388c:	02d00713          	li	a4,45
60003890:	40f007b3          	neg	a5,a5
60003894:	04e401a3          	sb	a4,67(s0)
60003898:	00001697          	auipc	a3,0x1
6000389c:	83068693          	addi	a3,a3,-2000 # 600040c8 <_malloc_usable_size_r+0x150>
600038a0:	00a00713          	li	a4,10
600038a4:	0d80006f          	j	6000397c <_printf_i+0x18c>
600038a8:	07300793          	li	a5,115
600038ac:	24f68e63          	beq	a3,a5,60003b08 <_printf_i+0x318>
600038b0:	02d7e263          	bltu	a5,a3,600038d4 <_printf_i+0xe4>
600038b4:	06f00793          	li	a5,111
600038b8:	06f68e63          	beq	a3,a5,60003934 <_printf_i+0x144>
600038bc:	07000793          	li	a5,112
600038c0:	f8f698e3          	bne	a3,a5,60003850 <_printf_i+0x60>
600038c4:	0005a783          	lw	a5,0(a1)
600038c8:	0207e793          	ori	a5,a5,32
600038cc:	00f5a023          	sw	a5,0(a1)
600038d0:	0140006f          	j	600038e4 <_printf_i+0xf4>
600038d4:	07500793          	li	a5,117
600038d8:	04f68e63          	beq	a3,a5,60003934 <_printf_i+0x144>
600038dc:	07800793          	li	a5,120
600038e0:	f6f698e3          	bne	a3,a5,60003850 <_printf_i+0x60>
600038e4:	07800793          	li	a5,120
600038e8:	04f402a3          	sb	a5,69(s0)
600038ec:	00000697          	auipc	a3,0x0
600038f0:	7f068693          	addi	a3,a3,2032 # 600040dc <_malloc_usable_size_r+0x164>
600038f4:	1580006f          	j	60003a4c <_printf_i+0x25c>
600038f8:	00072783          	lw	a5,0(a4)
600038fc:	04258a93          	addi	s5,a1,66
60003900:	00478693          	addi	a3,a5,4
60003904:	0007a783          	lw	a5,0(a5)
60003908:	00d72023          	sw	a3,0(a4)
6000390c:	04f58123          	sb	a5,66(a1)
60003910:	00100793          	li	a5,1
60003914:	2240006f          	j	60003b38 <_printf_i+0x348>
60003918:	0407f693          	andi	a3,a5,64
6000391c:	00052783          	lw	a5,0(a0)
60003920:	00b72023          	sw	a1,0(a4)
60003924:	f60682e3          	beqz	a3,60003888 <_printf_i+0x98>
60003928:	01079793          	slli	a5,a5,0x10
6000392c:	4107d793          	srai	a5,a5,0x10
60003930:	f59ff06f          	j	60003888 <_printf_i+0x98>
60003934:	00042583          	lw	a1,0(s0)
60003938:	00072783          	lw	a5,0(a4)
6000393c:	0805f813          	andi	a6,a1,128
60003940:	00478513          	addi	a0,a5,4
60003944:	00080863          	beqz	a6,60003954 <_printf_i+0x164>
60003948:	00a72023          	sw	a0,0(a4)
6000394c:	0007a783          	lw	a5,0(a5)
60003950:	0140006f          	j	60003964 <_printf_i+0x174>
60003954:	0405f593          	andi	a1,a1,64
60003958:	00a72023          	sw	a0,0(a4)
6000395c:	fe0588e3          	beqz	a1,6000394c <_printf_i+0x15c>
60003960:	0007d783          	lhu	a5,0(a5)
60003964:	06f00713          	li	a4,111
60003968:	14e68063          	beq	a3,a4,60003aa8 <_printf_i+0x2b8>
6000396c:	00000697          	auipc	a3,0x0
60003970:	75c68693          	addi	a3,a3,1884 # 600040c8 <_malloc_usable_size_r+0x150>
60003974:	00a00713          	li	a4,10
60003978:	040401a3          	sb	zero,67(s0)
6000397c:	00442583          	lw	a1,4(s0)
60003980:	00b42423          	sw	a1,8(s0)
60003984:	0005c863          	bltz	a1,60003994 <_printf_i+0x1a4>
60003988:	00042503          	lw	a0,0(s0)
6000398c:	ffb57513          	andi	a0,a0,-5
60003990:	00a42023          	sw	a0,0(s0)
60003994:	00079663          	bnez	a5,600039a0 <_printf_i+0x1b0>
60003998:	00060a93          	mv	s5,a2
6000399c:	02058263          	beqz	a1,600039c0 <_printf_i+0x1d0>
600039a0:	00060a93          	mv	s5,a2
600039a4:	02e7f5b3          	remu	a1,a5,a4
600039a8:	fffa8a93          	addi	s5,s5,-1
600039ac:	00b685b3          	add	a1,a3,a1
600039b0:	0005c583          	lbu	a1,0(a1)
600039b4:	00ba8023          	sb	a1,0(s5)
600039b8:	02e7d5b3          	divu	a1,a5,a4
600039bc:	0ee7fe63          	bgeu	a5,a4,60003ab8 <_printf_i+0x2c8>
600039c0:	00800793          	li	a5,8
600039c4:	02f71463          	bne	a4,a5,600039ec <_printf_i+0x1fc>
600039c8:	00042783          	lw	a5,0(s0)
600039cc:	0017f793          	andi	a5,a5,1
600039d0:	00078e63          	beqz	a5,600039ec <_printf_i+0x1fc>
600039d4:	00442703          	lw	a4,4(s0)
600039d8:	01042783          	lw	a5,16(s0)
600039dc:	00e7c863          	blt	a5,a4,600039ec <_printf_i+0x1fc>
600039e0:	03000793          	li	a5,48
600039e4:	fefa8fa3          	sb	a5,-1(s5)
600039e8:	fffa8a93          	addi	s5,s5,-1
600039ec:	41560633          	sub	a2,a2,s5
600039f0:	00c42823          	sw	a2,16(s0)
600039f4:	00098713          	mv	a4,s3
600039f8:	00090693          	mv	a3,s2
600039fc:	00c10613          	addi	a2,sp,12
60003a00:	00040593          	mv	a1,s0
60003a04:	00048513          	mv	a0,s1
60003a08:	c39ff0ef          	jal	ra,60003640 <_printf_common>
60003a0c:	fff00a13          	li	s4,-1
60003a10:	13451a63          	bne	a0,s4,60003b44 <_printf_i+0x354>
60003a14:	fff00513          	li	a0,-1
60003a18:	02c12083          	lw	ra,44(sp)
60003a1c:	02812403          	lw	s0,40(sp)
60003a20:	02412483          	lw	s1,36(sp)
60003a24:	02012903          	lw	s2,32(sp)
60003a28:	01c12983          	lw	s3,28(sp)
60003a2c:	01812a03          	lw	s4,24(sp)
60003a30:	01412a83          	lw	s5,20(sp)
60003a34:	01012b03          	lw	s6,16(sp)
60003a38:	03010113          	addi	sp,sp,48
60003a3c:	00008067          	ret
60003a40:	04d582a3          	sb	a3,69(a1)
60003a44:	00000697          	auipc	a3,0x0
60003a48:	68468693          	addi	a3,a3,1668 # 600040c8 <_malloc_usable_size_r+0x150>
60003a4c:	00042583          	lw	a1,0(s0)
60003a50:	00072503          	lw	a0,0(a4)
60003a54:	0805f813          	andi	a6,a1,128
60003a58:	00052783          	lw	a5,0(a0)
60003a5c:	00450513          	addi	a0,a0,4
60003a60:	02080863          	beqz	a6,60003a90 <_printf_i+0x2a0>
60003a64:	00a72023          	sw	a0,0(a4)
60003a68:	0015f713          	andi	a4,a1,1
60003a6c:	00070663          	beqz	a4,60003a78 <_printf_i+0x288>
60003a70:	0205e593          	ori	a1,a1,32
60003a74:	00b42023          	sw	a1,0(s0)
60003a78:	01000713          	li	a4,16
60003a7c:	ee079ee3          	bnez	a5,60003978 <_printf_i+0x188>
60003a80:	00042583          	lw	a1,0(s0)
60003a84:	fdf5f593          	andi	a1,a1,-33
60003a88:	00b42023          	sw	a1,0(s0)
60003a8c:	eedff06f          	j	60003978 <_printf_i+0x188>
60003a90:	0405f813          	andi	a6,a1,64
60003a94:	00a72023          	sw	a0,0(a4)
60003a98:	fc0808e3          	beqz	a6,60003a68 <_printf_i+0x278>
60003a9c:	01079793          	slli	a5,a5,0x10
60003aa0:	0107d793          	srli	a5,a5,0x10
60003aa4:	fc5ff06f          	j	60003a68 <_printf_i+0x278>
60003aa8:	00000697          	auipc	a3,0x0
60003aac:	62068693          	addi	a3,a3,1568 # 600040c8 <_malloc_usable_size_r+0x150>
60003ab0:	00800713          	li	a4,8
60003ab4:	ec5ff06f          	j	60003978 <_printf_i+0x188>
60003ab8:	00058793          	mv	a5,a1
60003abc:	ee9ff06f          	j	600039a4 <_printf_i+0x1b4>
60003ac0:	0005a683          	lw	a3,0(a1)
60003ac4:	00072783          	lw	a5,0(a4)
60003ac8:	0145a583          	lw	a1,20(a1)
60003acc:	0806f813          	andi	a6,a3,128
60003ad0:	00478513          	addi	a0,a5,4
60003ad4:	00080a63          	beqz	a6,60003ae8 <_printf_i+0x2f8>
60003ad8:	00a72023          	sw	a0,0(a4)
60003adc:	0007a783          	lw	a5,0(a5)
60003ae0:	00b7a023          	sw	a1,0(a5)
60003ae4:	0180006f          	j	60003afc <_printf_i+0x30c>
60003ae8:	00a72023          	sw	a0,0(a4)
60003aec:	0406f693          	andi	a3,a3,64
60003af0:	0007a783          	lw	a5,0(a5)
60003af4:	fe0686e3          	beqz	a3,60003ae0 <_printf_i+0x2f0>
60003af8:	00b79023          	sh	a1,0(a5)
60003afc:	00042823          	sw	zero,16(s0)
60003b00:	00060a93          	mv	s5,a2
60003b04:	ef1ff06f          	j	600039f4 <_printf_i+0x204>
60003b08:	00072783          	lw	a5,0(a4)
60003b0c:	0045a603          	lw	a2,4(a1)
60003b10:	00000593          	li	a1,0
60003b14:	00478693          	addi	a3,a5,4
60003b18:	00d72023          	sw	a3,0(a4)
60003b1c:	0007aa83          	lw	s5,0(a5)
60003b20:	000a8513          	mv	a0,s5
60003b24:	098000ef          	jal	ra,60003bbc <memchr>
60003b28:	00050663          	beqz	a0,60003b34 <_printf_i+0x344>
60003b2c:	41550533          	sub	a0,a0,s5
60003b30:	00a42223          	sw	a0,4(s0)
60003b34:	00442783          	lw	a5,4(s0)
60003b38:	00f42823          	sw	a5,16(s0)
60003b3c:	040401a3          	sb	zero,67(s0)
60003b40:	eb5ff06f          	j	600039f4 <_printf_i+0x204>
60003b44:	01042683          	lw	a3,16(s0)
60003b48:	000a8613          	mv	a2,s5
60003b4c:	00090593          	mv	a1,s2
60003b50:	00048513          	mv	a0,s1
60003b54:	000980e7          	jalr	s3
60003b58:	eb450ee3          	beq	a0,s4,60003a14 <_printf_i+0x224>
60003b5c:	00042783          	lw	a5,0(s0)
60003b60:	0027f793          	andi	a5,a5,2
60003b64:	04079463          	bnez	a5,60003bac <_printf_i+0x3bc>
60003b68:	00c12783          	lw	a5,12(sp)
60003b6c:	00c42503          	lw	a0,12(s0)
60003b70:	eaf554e3          	bge	a0,a5,60003a18 <_printf_i+0x228>
60003b74:	00078513          	mv	a0,a5
60003b78:	ea1ff06f          	j	60003a18 <_printf_i+0x228>
60003b7c:	00100693          	li	a3,1
60003b80:	000a8613          	mv	a2,s5
60003b84:	00090593          	mv	a1,s2
60003b88:	00048513          	mv	a0,s1
60003b8c:	000980e7          	jalr	s3
60003b90:	e96502e3          	beq	a0,s6,60003a14 <_printf_i+0x224>
60003b94:	001a0a13          	addi	s4,s4,1
60003b98:	00c42783          	lw	a5,12(s0)
60003b9c:	00c12703          	lw	a4,12(sp)
60003ba0:	40e787b3          	sub	a5,a5,a4
60003ba4:	fcfa4ce3          	blt	s4,a5,60003b7c <_printf_i+0x38c>
60003ba8:	fc1ff06f          	j	60003b68 <_printf_i+0x378>
60003bac:	00000a13          	li	s4,0
60003bb0:	01940a93          	addi	s5,s0,25
60003bb4:	fff00b13          	li	s6,-1
60003bb8:	fe1ff06f          	j	60003b98 <_printf_i+0x3a8>

60003bbc <memchr>:
memchr():
60003bbc:	0ff5f593          	andi	a1,a1,255
60003bc0:	00c50633          	add	a2,a0,a2
60003bc4:	00c51663          	bne	a0,a2,60003bd0 <memchr+0x14>
60003bc8:	00000513          	li	a0,0
60003bcc:	00008067          	ret
60003bd0:	00054783          	lbu	a5,0(a0)
60003bd4:	feb78ce3          	beq	a5,a1,60003bcc <memchr+0x10>
60003bd8:	00150513          	addi	a0,a0,1
60003bdc:	fe9ff06f          	j	60003bc4 <memchr+0x8>

60003be0 <memmove>:
memmove():
60003be0:	04a5fa63          	bgeu	a1,a0,60003c34 <memmove+0x54>
60003be4:	00c586b3          	add	a3,a1,a2
60003be8:	04d57663          	bgeu	a0,a3,60003c34 <memmove+0x54>
60003bec:	fff64593          	not	a1,a2
60003bf0:	00000793          	li	a5,0
60003bf4:	fff78793          	addi	a5,a5,-1
60003bf8:	00f59463          	bne	a1,a5,60003c00 <memmove+0x20>
60003bfc:	00008067          	ret
60003c00:	00f68733          	add	a4,a3,a5
60003c04:	00074803          	lbu	a6,0(a4)
60003c08:	00c78733          	add	a4,a5,a2
60003c0c:	00e50733          	add	a4,a0,a4
60003c10:	01070023          	sb	a6,0(a4)
60003c14:	fe1ff06f          	j	60003bf4 <memmove+0x14>
60003c18:	00f58733          	add	a4,a1,a5
60003c1c:	00074683          	lbu	a3,0(a4)
60003c20:	00f50733          	add	a4,a0,a5
60003c24:	00178793          	addi	a5,a5,1
60003c28:	00d70023          	sb	a3,0(a4)
60003c2c:	fef616e3          	bne	a2,a5,60003c18 <memmove+0x38>
60003c30:	00008067          	ret
60003c34:	00000793          	li	a5,0
60003c38:	ff5ff06f          	j	60003c2c <memmove+0x4c>

60003c3c <_free_r>:
_free_r():
60003c3c:	10058063          	beqz	a1,60003d3c <_free_r+0x100>
60003c40:	ffc5a783          	lw	a5,-4(a1)
60003c44:	ff010113          	addi	sp,sp,-16
60003c48:	00812423          	sw	s0,8(sp)
60003c4c:	00112623          	sw	ra,12(sp)
60003c50:	00912223          	sw	s1,4(sp)
60003c54:	ffc58413          	addi	s0,a1,-4
60003c58:	0007d463          	bgez	a5,60003c60 <_free_r+0x24>
60003c5c:	00f40433          	add	s0,s0,a5
60003c60:	00050493          	mv	s1,a0
60003c64:	30c000ef          	jal	ra,60003f70 <__malloc_lock>
60003c68:	97418793          	addi	a5,gp,-1676 # 80000174 <__malloc_free_list>
60003c6c:	0007a783          	lw	a5,0(a5)
60003c70:	02079263          	bnez	a5,60003c94 <_free_r+0x58>
60003c74:	00042223          	sw	zero,4(s0)
60003c78:	9681aa23          	sw	s0,-1676(gp) # 80000174 <__malloc_free_list>
60003c7c:	00812403          	lw	s0,8(sp)
60003c80:	00c12083          	lw	ra,12(sp)
60003c84:	00048513          	mv	a0,s1
60003c88:	00412483          	lw	s1,4(sp)
60003c8c:	01010113          	addi	sp,sp,16
60003c90:	2e40006f          	j	60003f74 <__malloc_unlock>
60003c94:	02f47663          	bgeu	s0,a5,60003cc0 <_free_r+0x84>
60003c98:	00042683          	lw	a3,0(s0)
60003c9c:	00d40733          	add	a4,s0,a3
60003ca0:	00e79a63          	bne	a5,a4,60003cb4 <_free_r+0x78>
60003ca4:	0007a703          	lw	a4,0(a5)
60003ca8:	0047a783          	lw	a5,4(a5)
60003cac:	00d70733          	add	a4,a4,a3
60003cb0:	00e42023          	sw	a4,0(s0)
60003cb4:	00f42223          	sw	a5,4(s0)
60003cb8:	fc1ff06f          	j	60003c78 <_free_r+0x3c>
60003cbc:	00070793          	mv	a5,a4
60003cc0:	0047a703          	lw	a4,4(a5)
60003cc4:	00070463          	beqz	a4,60003ccc <_free_r+0x90>
60003cc8:	fee47ae3          	bgeu	s0,a4,60003cbc <_free_r+0x80>
60003ccc:	0007a683          	lw	a3,0(a5)
60003cd0:	00d78633          	add	a2,a5,a3
60003cd4:	02861863          	bne	a2,s0,60003d04 <_free_r+0xc8>
60003cd8:	00042603          	lw	a2,0(s0)
60003cdc:	00c686b3          	add	a3,a3,a2
60003ce0:	00d7a023          	sw	a3,0(a5)
60003ce4:	00d78633          	add	a2,a5,a3
60003ce8:	f8c71ae3          	bne	a4,a2,60003c7c <_free_r+0x40>
60003cec:	00072603          	lw	a2,0(a4)
60003cf0:	00472703          	lw	a4,4(a4)
60003cf4:	00d606b3          	add	a3,a2,a3
60003cf8:	00d7a023          	sw	a3,0(a5)
60003cfc:	00e7a223          	sw	a4,4(a5)
60003d00:	f7dff06f          	j	60003c7c <_free_r+0x40>
60003d04:	00c47863          	bgeu	s0,a2,60003d14 <_free_r+0xd8>
60003d08:	00c00793          	li	a5,12
60003d0c:	00f4a023          	sw	a5,0(s1)
60003d10:	f6dff06f          	j	60003c7c <_free_r+0x40>
60003d14:	00042603          	lw	a2,0(s0)
60003d18:	00c406b3          	add	a3,s0,a2
60003d1c:	00d71a63          	bne	a4,a3,60003d30 <_free_r+0xf4>
60003d20:	00072683          	lw	a3,0(a4)
60003d24:	00472703          	lw	a4,4(a4)
60003d28:	00c686b3          	add	a3,a3,a2
60003d2c:	00d42023          	sw	a3,0(s0)
60003d30:	00e42223          	sw	a4,4(s0)
60003d34:	0087a223          	sw	s0,4(a5)
60003d38:	f45ff06f          	j	60003c7c <_free_r+0x40>
60003d3c:	00008067          	ret

60003d40 <_malloc_r>:
_malloc_r():
60003d40:	fe010113          	addi	sp,sp,-32
60003d44:	00912a23          	sw	s1,20(sp)
60003d48:	00358493          	addi	s1,a1,3
60003d4c:	ffc4f493          	andi	s1,s1,-4
60003d50:	00112e23          	sw	ra,28(sp)
60003d54:	00812c23          	sw	s0,24(sp)
60003d58:	01212823          	sw	s2,16(sp)
60003d5c:	01312623          	sw	s3,12(sp)
60003d60:	00848493          	addi	s1,s1,8
60003d64:	00c00793          	li	a5,12
60003d68:	06f4f463          	bgeu	s1,a5,60003dd0 <_malloc_r+0x90>
60003d6c:	00c00493          	li	s1,12
60003d70:	06b4e263          	bltu	s1,a1,60003dd4 <_malloc_r+0x94>
60003d74:	00050913          	mv	s2,a0
60003d78:	1f8000ef          	jal	ra,60003f70 <__malloc_lock>
60003d7c:	97418793          	addi	a5,gp,-1676 # 80000174 <__malloc_free_list>
60003d80:	0007a703          	lw	a4,0(a5)
60003d84:	00070413          	mv	s0,a4
60003d88:	06041a63          	bnez	s0,60003dfc <_malloc_r+0xbc>
60003d8c:	97818793          	addi	a5,gp,-1672 # 80000178 <__malloc_sbrk_start>
60003d90:	0007a783          	lw	a5,0(a5)
60003d94:	00079a63          	bnez	a5,60003da8 <_malloc_r+0x68>
60003d98:	00000593          	li	a1,0
60003d9c:	00090513          	mv	a0,s2
60003da0:	184000ef          	jal	ra,60003f24 <_sbrk_r>
60003da4:	96a1ac23          	sw	a0,-1672(gp) # 80000178 <__malloc_sbrk_start>
60003da8:	00048593          	mv	a1,s1
60003dac:	00090513          	mv	a0,s2
60003db0:	174000ef          	jal	ra,60003f24 <_sbrk_r>
60003db4:	fff00993          	li	s3,-1
60003db8:	0b351a63          	bne	a0,s3,60003e6c <_malloc_r+0x12c>
60003dbc:	00c00793          	li	a5,12
60003dc0:	00f92023          	sw	a5,0(s2)
60003dc4:	00090513          	mv	a0,s2
60003dc8:	1ac000ef          	jal	ra,60003f74 <__malloc_unlock>
60003dcc:	0100006f          	j	60003ddc <_malloc_r+0x9c>
60003dd0:	fa04d0e3          	bgez	s1,60003d70 <_malloc_r+0x30>
60003dd4:	00c00793          	li	a5,12
60003dd8:	00f52023          	sw	a5,0(a0)
60003ddc:	00000513          	li	a0,0
60003de0:	01c12083          	lw	ra,28(sp)
60003de4:	01812403          	lw	s0,24(sp)
60003de8:	01412483          	lw	s1,20(sp)
60003dec:	01012903          	lw	s2,16(sp)
60003df0:	00c12983          	lw	s3,12(sp)
60003df4:	02010113          	addi	sp,sp,32
60003df8:	00008067          	ret
60003dfc:	00042783          	lw	a5,0(s0)
60003e00:	409787b3          	sub	a5,a5,s1
60003e04:	0407ce63          	bltz	a5,60003e60 <_malloc_r+0x120>
60003e08:	00b00693          	li	a3,11
60003e0c:	00f6fa63          	bgeu	a3,a5,60003e20 <_malloc_r+0xe0>
60003e10:	00f42023          	sw	a5,0(s0)
60003e14:	00f40433          	add	s0,s0,a5
60003e18:	00942023          	sw	s1,0(s0)
60003e1c:	0100006f          	j	60003e2c <_malloc_r+0xec>
60003e20:	00442783          	lw	a5,4(s0)
60003e24:	02871a63          	bne	a4,s0,60003e58 <_malloc_r+0x118>
60003e28:	96f1aa23          	sw	a5,-1676(gp) # 80000174 <__malloc_free_list>
60003e2c:	00090513          	mv	a0,s2
60003e30:	144000ef          	jal	ra,60003f74 <__malloc_unlock>
60003e34:	00b40513          	addi	a0,s0,11
60003e38:	00440793          	addi	a5,s0,4
60003e3c:	ff857513          	andi	a0,a0,-8
60003e40:	40f50733          	sub	a4,a0,a5
60003e44:	f8070ee3          	beqz	a4,60003de0 <_malloc_r+0xa0>
60003e48:	00e40433          	add	s0,s0,a4
60003e4c:	40a787b3          	sub	a5,a5,a0
60003e50:	00f42023          	sw	a5,0(s0)
60003e54:	f8dff06f          	j	60003de0 <_malloc_r+0xa0>
60003e58:	00f72223          	sw	a5,4(a4)
60003e5c:	fd1ff06f          	j	60003e2c <_malloc_r+0xec>
60003e60:	00040713          	mv	a4,s0
60003e64:	00442403          	lw	s0,4(s0)
60003e68:	f21ff06f          	j	60003d88 <_malloc_r+0x48>
60003e6c:	00350413          	addi	s0,a0,3
60003e70:	ffc47413          	andi	s0,s0,-4
60003e74:	fa8502e3          	beq	a0,s0,60003e18 <_malloc_r+0xd8>
60003e78:	40a405b3          	sub	a1,s0,a0
60003e7c:	00090513          	mv	a0,s2
60003e80:	0a4000ef          	jal	ra,60003f24 <_sbrk_r>
60003e84:	f9351ae3          	bne	a0,s3,60003e18 <_malloc_r+0xd8>
60003e88:	f35ff06f          	j	60003dbc <_malloc_r+0x7c>

60003e8c <_realloc_r>:
_realloc_r():
60003e8c:	00059663          	bnez	a1,60003e98 <_realloc_r+0xc>
60003e90:	00060593          	mv	a1,a2
60003e94:	eadff06f          	j	60003d40 <_malloc_r>
60003e98:	fe010113          	addi	sp,sp,-32
60003e9c:	00812c23          	sw	s0,24(sp)
60003ea0:	00112e23          	sw	ra,28(sp)
60003ea4:	00912a23          	sw	s1,20(sp)
60003ea8:	01212823          	sw	s2,16(sp)
60003eac:	01312623          	sw	s3,12(sp)
60003eb0:	00060413          	mv	s0,a2
60003eb4:	02061663          	bnez	a2,60003ee0 <_realloc_r+0x54>
60003eb8:	d85ff0ef          	jal	ra,60003c3c <_free_r>
60003ebc:	00000913          	li	s2,0
60003ec0:	01c12083          	lw	ra,28(sp)
60003ec4:	01812403          	lw	s0,24(sp)
60003ec8:	00090513          	mv	a0,s2
60003ecc:	01412483          	lw	s1,20(sp)
60003ed0:	01012903          	lw	s2,16(sp)
60003ed4:	00c12983          	lw	s3,12(sp)
60003ed8:	02010113          	addi	sp,sp,32
60003edc:	00008067          	ret
60003ee0:	00058493          	mv	s1,a1
60003ee4:	00050993          	mv	s3,a0
60003ee8:	090000ef          	jal	ra,60003f78 <_malloc_usable_size_r>
60003eec:	00048913          	mv	s2,s1
60003ef0:	fc8578e3          	bgeu	a0,s0,60003ec0 <_realloc_r+0x34>
60003ef4:	00040593          	mv	a1,s0
60003ef8:	00098513          	mv	a0,s3
60003efc:	e45ff0ef          	jal	ra,60003d40 <_malloc_r>
60003f00:	00050913          	mv	s2,a0
60003f04:	fa050ee3          	beqz	a0,60003ec0 <_realloc_r+0x34>
60003f08:	00048593          	mv	a1,s1
60003f0c:	00040613          	mv	a2,s0
60003f10:	f8dfd0ef          	jal	ra,60001e9c <memcpy>
60003f14:	00048593          	mv	a1,s1
60003f18:	00098513          	mv	a0,s3
60003f1c:	d21ff0ef          	jal	ra,60003c3c <_free_r>
60003f20:	fa1ff06f          	j	60003ec0 <_realloc_r+0x34>

60003f24 <_sbrk_r>:
_sbrk_r():
60003f24:	ff010113          	addi	sp,sp,-16
60003f28:	00812423          	sw	s0,8(sp)
60003f2c:	00050413          	mv	s0,a0
60003f30:	00058513          	mv	a0,a1
60003f34:	20015797          	auipc	a5,0x20015
60003f38:	3007aa23          	sw	zero,788(a5) # 80019248 <errno>
60003f3c:	00112623          	sw	ra,12(sp)
60003f40:	ad5fc0ef          	jal	ra,60000a14 <_sbrk>
60003f44:	fff00793          	li	a5,-1
60003f48:	00f51c63          	bne	a0,a5,60003f60 <_sbrk_r+0x3c>
60003f4c:	20015797          	auipc	a5,0x20015
60003f50:	2fc78793          	addi	a5,a5,764 # 80019248 <errno>
60003f54:	0007a783          	lw	a5,0(a5)
60003f58:	00078463          	beqz	a5,60003f60 <_sbrk_r+0x3c>
60003f5c:	00f42023          	sw	a5,0(s0)
60003f60:	00c12083          	lw	ra,12(sp)
60003f64:	00812403          	lw	s0,8(sp)
60003f68:	01010113          	addi	sp,sp,16
60003f6c:	00008067          	ret

60003f70 <__malloc_lock>:
__malloc_lock():
60003f70:	00008067          	ret

60003f74 <__malloc_unlock>:
__malloc_unlock():
60003f74:	00008067          	ret

60003f78 <_malloc_usable_size_r>:
_malloc_usable_size_r():
60003f78:	ffc5a783          	lw	a5,-4(a1)
60003f7c:	ffc78513          	addi	a0,a5,-4
60003f80:	0007d863          	bgez	a5,60003f90 <_malloc_usable_size_r+0x18>
60003f84:	00a585b3          	add	a1,a1,a0
60003f88:	0005a783          	lw	a5,0(a1)
60003f8c:	00f50533          	add	a0,a0,a5
60003f90:	00008067          	ret
	...
60003fa0:	6568                	flw	fa0,76(a0)
60003fa2:	6c6c                	flw	fa1,92(s0)
60003fa4:	0000006f          	j	60003fa4 <_malloc_usable_size_r+0x2c>
60003fa8:	4449                	li	s0,18
60003faa:	454c                	lw	a1,12(a0)
60003fac:	0000                	unimp
60003fae:	0000                	unimp
60003fb0:	0d0a                	slli	s10,s10,0x2
60003fb2:	4328                	lw	a0,64(a4)
60003fb4:	2029                	jal	60003fbe <_malloc_usable_size_r+0x46>
60003fb6:	79706f43          	fmadd.s	ft10,ft0,fs7,fa5,unknown
60003fba:	6972                	flw	fs2,28(sp)
60003fbc:	20746867          	0x20746867
60003fc0:	3032                	fld	ft0,296(sp)
60003fc2:	3931                	jal	60003bde <memchr+0x22>
60003fc4:	4620                	lw	s0,72(a2)
60003fc6:	7475                	lui	s0,0xffffd
60003fc8:	7275                	lui	tp,0xffffd
60003fca:	2065                	jal	60004072 <_malloc_usable_size_r+0xfa>
60003fcc:	6c45                	lui	s8,0x11
60003fce:	6365                	lui	t1,0x19
60003fd0:	7274                	flw	fa3,100(a2)
60003fd2:	63696e6f          	jal	t3,6009a608 <__data_load+0x964f8>
60003fd6:	202d2073          	csrs	hedeleg,s10
60003fda:	61657243          	fmadd.s	ft4,fa0,fs6,fa2
60003fde:	6974                	flw	fa3,84(a0)
60003fe0:	6576                	flw	fa0,92(sp)
60003fe2:	4220                	lw	s0,64(a2)
60003fe4:	6472616f          	jal	sp,6002ae2a <__data_load+0x26d1a>
60003fe8:	0d0a                	slli	s10,s10,0x2
60003fea:	0000                	unimp
60003fec:	0d0a                	slli	s10,s10,0x2
60003fee:	7246                	flw	ft4,112(sp)
60003ff0:	6565                	lui	a0,0x19
60003ff2:	5452                	lw	s0,52(sp)
60003ff4:	5320534f          	fnmadd.d	ft6,ft0,fs2,fa0,unknown
60003ff8:	6d69                	lui	s10,0x1a
60003ffa:	6c70                	flw	fa2,92(s0)
60003ffc:	2065                	jal	600040a4 <_malloc_usable_size_r+0x12c>
60003ffe:	6544                	flw	fs1,12(a0)
60004000:	6f6d                	lui	t5,0x1b
60004002:	0d0a                	slli	s10,s10,0x2
60004004:	2020                	fld	fs0,64(s0)
60004006:	6854                	flw	fa3,20(s0)
60004008:	7369                	lui	t1,0xffffa
6000400a:	6420                	flw	fs0,72(s0)
6000400c:	6d65                	lui	s10,0x19
6000400e:	7263206f          	j	60036734 <__data_load+0x32624>
60004012:	6165                	addi	sp,sp,112
60004014:	6574                	flw	fa3,76(a0)
60004016:	20332073          	csrs	hideleg,t1
6000401a:	6c62                	flw	fs8,24(sp)
6000401c:	6e69                	lui	t3,0x1a
6000401e:	676e696b          	0x676e696b
60004022:	4c20                	lw	s0,88(s0)
60004024:	4445                	li	s0,17
60004026:	7420                	flw	fs0,104(s0)
60004028:	7361                	lui	t1,0xffff8
6000402a:	6120736b          	0x6120736b
6000402e:	646e                	flw	fs0,216(sp)
60004030:	6120                	flw	fs0,64(a0)
60004032:	76697463          	bgeu	s2,t1,6000479a <__data_load+0x68a>
60004036:	7461                	lui	s0,0xffff8
60004038:	2065                	jal	600040e0 <_malloc_usable_size_r+0x168>
6000403a:	6874                	flw	fa3,84(s0)
6000403c:	2065                	jal	600040e4 <_malloc_usable_size_r+0x16c>
6000403e:	7246                	flw	ft4,112(sp)
60004040:	6565                	lui	a0,0x19
60004042:	5452                	lw	s0,52(sp)
60004044:	0d0a534f          	0xd0a534f
60004048:	2020                	fld	fs0,64(s0)
6000404a:	65686373          	csrrsi	t1,0x656,16
6000404e:	7564                	flw	fs1,108(a0)
60004050:	656c                	flw	fa1,76(a0)
60004052:	2e72                	fld	ft8,280(sp)
60004054:	4c20                	lw	s0,88(s0)
60004056:	4445                	li	s0,17
60004058:	2031                	jal	60004064 <_malloc_usable_size_r+0xec>
6000405a:	6552                	flw	fa0,20(sp)
6000405c:	2c64                	fld	fs1,216(s0)
6000405e:	4c20                	lw	s0,88(s0)
60004060:	4445                	li	s0,17
60004062:	2032                	fld	ft0,264(sp)
60004064:	65657247          	0x65657247
60004068:	206e                	fld	ft0,216(sp)
6000406a:	6e61                	lui	t3,0x18
6000406c:	2064                	fld	fs1,192(s0)
6000406e:	6552                	flw	fa0,20(sp)
60004070:	2064                	fld	fs1,192(s0)
60004072:	756f6873          	csrrsi	a6,0x756,30
60004076:	646c                	flw	fa1,76(s0)
60004078:	7320                	flw	fs0,96(a4)
6000407a:	6174                	flw	fa3,68(a0)
6000407c:	7472                	flw	fs0,60(sp)
6000407e:	6220                	flw	fs0,64(a2)
60004080:	696c                	flw	fa1,84(a0)
60004082:	6b6e                	flw	fs6,216(sp)
60004084:	6e69                	lui	t3,0x1a
60004086:	0d0a2e67          	0xd0a2e67
6000408a:	0000                	unimp
6000408c:	63656843          	fmadd.d	fa6,fa0,fs6,fa2,unknown
60004090:	676e696b          	0x676e696b
60004094:	2e2e                	fld	ft8,200(sp)
60004096:	0a2e                	slli	s4,s4,0xb
60004098:	000d                	c.nop	3
6000409a:	0000                	unimp
6000409c:	454c                	lw	a1,12(a0)
6000409e:	3144                	fld	fs1,160(a0)
600040a0:	0000                	unimp
600040a2:	0000                	unimp
600040a4:	6425                	lui	s0,0x9
600040a6:	2b20                	fld	fs0,80(a4)
600040a8:	2520                	fld	fs0,72(a0)
600040aa:	2064                	fld	fs1,192(s0)
600040ac:	203d                	jal	600040da <_malloc_usable_size_r+0x162>
600040ae:	6425                	lui	s0,0x9
600040b0:	0d0a                	slli	s10,s10,0x2
600040b2:	0000                	unimp
600040b4:	2b302d23          	sw	s3,698(zero) # 2ba <HEAP_SIZE-0xd46>
600040b8:	0020                	addi	s0,sp,8
600040ba:	0000                	unimp
600040bc:	6c68                	flw	fa0,92(s0)
600040be:	004c                	addi	a1,sp,4
600040c0:	6665                	lui	a2,0x19
600040c2:	47464567          	0x47464567
600040c6:	0000                	unimp
600040c8:	3130                	fld	fa2,96(a0)
600040ca:	3332                	fld	ft6,296(sp)
600040cc:	3534                	fld	fa3,104(a0)
600040ce:	3736                	fld	fa4,360(sp)
600040d0:	3938                	fld	fa4,112(a0)
600040d2:	4241                	li	tp,16
600040d4:	46454443          	fmadd.q	fs0,fa0,ft4,fs0,rmm
600040d8:	0000                	unimp
600040da:	0000                	unimp
600040dc:	3130                	fld	fa2,96(a0)
600040de:	3332                	fld	ft6,296(sp)
600040e0:	3534                	fld	fa3,104(a0)
600040e2:	3736                	fld	fa4,360(sp)
600040e4:	3938                	fld	fa4,112(a0)
600040e6:	6261                	lui	tp,0x18
600040e8:	66656463          	bltu	a0,t1,60004750 <__data_load+0x640>
600040ec:	0000                	unimp
	...
