
Creative_MiV_FreeRTOS_Demo.elf:     file format elf32-littleriscv
Creative_MiV_FreeRTOS_Demo.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x60000000

Program Header:
    LOAD off    0x00001000 vaddr 0x60000000 paddr 0x60000000 align 2**12
         filesz 0x00004050 memsz 0x00004050 flags r-x
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x60004050 align 2**12
         filesz 0x00000100 memsz 0x00000180 flags rw-
    LOAD off    0x00006180 vaddr 0x80000180 paddr 0x60004150 align 2**12
         filesz 0x00000000 memsz 0x000190d0 flags rw-
    LOAD off    0x00006250 vaddr 0x80019250 paddr 0x60004150 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00006250 vaddr 0x8001a250 paddr 0x60004150 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .text             00004050  60000000  60000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata            00000020  80000000  60004050  00006000  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data             000000e0  80000020  60004070  00006020  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss             00000080  80000100  60004150  00006100  2**4  ALLOC
  4 .bss              000190d0  80000180  60004150  00006180  2**4  ALLOC
  5 .heap             00001000  80019250  60004150  00006250  2**4  ALLOC
  6 .stack            00001000  8001a250  60004150  00006250  2**4  ALLOC
  7 .riscv.attributes 0000001f  00000000  00000000  00006100  2**0  CONTENTS, READONLY
  8 .comment          00000043  00000000  00000000  0000611f  2**0  CONTENTS, READONLY
  9 .debug_line       00008e0c  00000000  00000000  00006162  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info       00009c46  00000000  00000000  0000ef6e  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev     00001e38  00000000  00000000  00018bb4  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges    00000788  00000000  00000000  0001a9f0  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000129b3  00000000  00000000  0001b178  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges     00000678  00000000  00000000  0002db2b  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro      00004ef7  00000000  00000000  0002e1a3  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame      00001e44  00000000  00000000  0003309c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
60000000 l    d  .text	00000000 .text
80000000 l    d  .sdata	00000000 .sdata
80000020 l    d  .data	00000000 .data
80000100 l    d  .sbss	00000000 .sbss
80000180 l    d  .bss	00000000 .bss
80019250 l    d  .heap	00000000 .heap
8001a250 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
6000000c l       .text	00000000 handle_reset
60000004 l       .text	00000000 nmi_vector
60000008 l       .text	00000000 trap_vector
60000034 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
60000160 l     F .text	00000060 copy_section
600001c0 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
600002c4 l     F .text	000000b8 PLIC_DisableIRQ
6000037c l     F .text	00000044 PLIC_ClaimIRQ
600003c0 l     F .text	0000004c PLIC_CompleteIRQ
80000100 l     O .sbss	00000008 g_systick_increment
60000430 l     F .text	000000a8 handle_m_timer_interrupt
600004d8 l     F .text	00000070 handle_m_ext_interrupt
60000548 l     F .text	00000030 handle_m_soft_interrupt
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80000000 l     O .sdata	00000004 curbrk.3729
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 core_gpio.c
00000000 l    df *ABS*	00000000 heap_2.c
80000180 l     O .bss	00019000 ucHeap
80000108 l     O .sbss	00000008 xStart
80000110 l     O .sbss	00000008 xEnd
80000004 l     O .sdata	00000004 xFreeBytesRemaining
80000118 l     O .sbss	00000004 xHeapHasBeenInitialised.2779
60001638 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
600016ac l     F .text	0000004c raise_soft_interrupt
80000008 l     O .sdata	00000004 uxCriticalNesting
8000000c l     O .sdata	00000004 mtime
80000010 l     O .sdata	00000004 mtimecmp
6000176c l     F .text	000000cc prvSetNextTimerInterrupt
60001904 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80019180 l     O .bss	00000064 pxReadyTasksLists
800191e4 l     O .bss	00000014 xDelayedTaskList1
800191f8 l     O .bss	00000014 xDelayedTaskList2
80000124 l     O .sbss	00000004 pxDelayedTaskList
80000128 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001920c l     O .bss	00000014 xPendingReadyList
80019220 l     O .bss	00000014 xTasksWaitingTermination
8000012c l     O .sbss	00000004 uxTasksDeleted
80019234 l     O .bss	00000014 xSuspendedTaskList
80000130 l     O .sbss	00000004 uxCurrentNumberOfTasks
80000134 l     O .sbss	00000004 xTickCount
80000138 l     O .sbss	00000004 uxTopReadyPriority
8000013c l     O .sbss	00000004 xSchedulerRunning
80000140 l     O .sbss	00000004 uxPendedTicks
80000144 l     O .sbss	00000004 xYieldPending
80000148 l     O .sbss	00000004 xNumOfOverflows
8000014c l     O .sbss	00000004 uxTaskNumber
80000150 l     O .sbss	00000004 xNextTaskUnblockTime
80000154 l     O .sbss	00000004 uxSchedulerSuspended
60002b00 l     F .text	000000c0 prvAllocateTCBAndStack
600027e0 l     F .text	00000138 prvInitialiseTCBVariables
60002918 l     F .text	000000c0 prvInitialiseTaskLists
60002c00 l     F .text	00000060 prvResetNextTaskUnblockTime
60002a78 l     F .text	00000088 prvAddCurrentTaskToDelayedList
600027ac l     F .text	00000034 prvIdleTask
600029d8 l     F .text	000000a0 prvCheckTasksWaitingTermination
60002bc0 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 BasicIO.c
80000158 l     O .sbss	00000008 g_gpio_in_PBs
80000160 l     O .sbss	00000008 g_gpio_out_LEDs
80000168 l     O .sbss	00000008 g_uart_term
00000000 l    df *ABS*	00000000 main.c
60002d80 l     F .text	000000d0 PLIC_init
80000170 l     O .sbss	00000008 g_gpio
60002f58 l     F .text	000000a4 blinkingLED
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
800000a0 l     O .data	00000060 impure_data
60003eac g     F .text	0000001c _malloc_usable_size_r
6000172c g     F .text	00000040 vPortExitCritical
00001000 g       *ABS*	00000000 STACK_SIZE
600007d4  w    F .text	00000020 External_11_IRQHandler
80000800 g       .sdata	00000000 __global_pointer$
60003ea8 g     F .text	00000004 __malloc_unlock
60004070 g       *ABS*	00000000 __data_load
600019c4 g     F .text	000000cc SysTick_Handler
60000714  w    F .text	00000020 External_5_IRQHandler
60000b68 g       .text	00000000 HW_get_8bit_reg_field
60003b14 g     F .text	0000005c memmove
80000120 g     O .sbss	00000004 pxCurrentTCB
80000100 g       .sbss	00000000 __sbss_start
80019248 g     O .bss	00000004 errno
60000aa0 g       .text	00000000 HW_set_32bit_reg
60002c60 g     F .text	000000c4 BasicIO_Init
600008f4  w    F .text	00000020 External_20_IRQHandler
60001a90 g     F .text	00000044 xPortStartScheduler
6000040c g     F .text	00000024 __enable_irq
60001e68 g     F .text	000000cc memcpy
6000201c g     F .text	0000021c xTaskGenericCreate
600031d8 g     F .text	0000039c _svfprintf_r
80000000 g       .sdata	00000000 __sdata_start
6000156c g     F .text	000000cc vPortFree
60000b40 g       .text	00000000 HW_set_8bit_reg_field
600009b4  w    F .text	00000020 External_26_IRQHandler
60000578 g     F .text	000000fc handle_trap
60001c74 g     F .text	00000088 vListInsertEnd
00100000 g       *ABS*	00000000 RAM_SIZE
600007b4  w    F .text	00000020 External_10_IRQHandler
60003e58 g     F .text	0000004c _sbrk_r
60001c4c g     F .text	00000028 vListInitialiseItem
60002e6c g     F .text	0000001c External_30_IRQHandler
60000894  w    F .text	00000020 External_17_IRQHandler
8001a250 g       .heap	00000000 _heap_end
60003dc0 g     F .text	00000098 _realloc_r
80019250 g       .bss	00000000 __bss_end
60000a14 g     F .text	0000008c _sbrk
60001390 g     F .text	000001dc pvPortMalloc
60000210 g     F .text	00000098 _init
60001be8 g     F .text	00000064 vListInitialise
60000b30 g       .text	00000000 HW_set_8bit_reg
60000b38 g       .text	00000000 HW_get_8bit_reg
60001310 g     F .text	00000080 GPIO_enable_irq
80000180 g       .sbss	00000000 __sbss_end
60000ab0 g       .text	00000000 HW_set_32bit_reg_field
60002f28 g     F .text	00000014 vApplicationMallocFailedHook
60000994  w    F .text	00000020 External_25_IRQHandler
8001b250 g       .stack	00000000 __stack_top
60002e88 g     F .text	0000001c External_29_IRQHandler
60000d44 g     F .text	000000b0 UART_polled_tx_string
60003070 g     F .text	00000168 __ssputs_r
60000814  w    F .text	00000020 External_13_IRQHandler
600006b4  w    F .text	00000020 External_2_IRQHandler
00001000 g       *ABS*	00000000 HEAP_SIZE
600007f4  w    F .text	00000020 External_12_IRQHandler
60003af0 g     F .text	00000024 memchr
60003b70 g     F .text	00000104 _free_r
60000c90 g     F .text	000000b4 UART_send
60000000 g       .text	00000000 _start
6000234c g     F .text	00000028 vTaskSuspendAll
60001dd0 g     F .text	00000098 uxListRemove
60004050 g       *ABS*	00000000 __sdata_load
80000100 g       .data	00000000 __data_end
600026c0 g     F .text	000000ec vTaskSwitchContext
600008b4  w    F .text	00000020 External_18_IRQHandler
60000ad8 g       .text	00000000 HW_get_32bit_reg_field
60000df4 g     F .text	00000170 GPIO_init
60000934  w    F .text	00000020 External_22_IRQHandler
60000854  w    F .text	00000020 External_15_IRQHandler
60001bc0 g     F .text	00000028 vPortYield
60003ea4 g     F .text	00000004 __malloc_lock
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80000180 g       .bss	00000000 __bss_start
60000874  w    F .text	00000020 External_16_IRQHandler
60001f34 g     F .text	000000e8 memset
60002ea4 g     F .text	00000084 main
60001cfc g     F .text	000000d4 vListInsert
600009f4  w    F .text	00000020 External_28_IRQHandler
60000f64 g     F .text	00000174 GPIO_get_inputs
60003c74 g     F .text	0000014c _malloc_r
60000af0 g       .text	00000000 HW_get_16bit_reg
80000020 g       .sdata	00000000 __sdata_end
8001a250 g       .heap	00000000 __heap_end
60000834  w    F .text	00000020 External_14_IRQHandler
600002a8 g     F .text	0000001c _fini
60002d24 g     F .text	0000005c UART_Tx_Msg
60002374 g     F .text	00000160 xTaskResumeAll
60002ffc g     F .text	00000074 sprintf
600022bc g     F .text	00000090 vTaskStartScheduler
80000020 g     O .data	00000080 ext_irq_handler_table
60000af8 g       .text	00000000 HW_set_16bit_reg_field
60003574 g     F .text	000001b0 _printf_common
80000014 g     O .sdata	00000004 _impure_ptr
8001a250 g       .stack	00000000 __stack_bottom
60001ad4 g     F .text	000000ec Software_IRQHandler
600009d4  w    F .text	00000020 External_27_IRQHandler
600031d8 g     F .text	0000039c _svfiprintf_r
60000774  w    F .text	00000020 External_8_IRQHandler
60000794  w    F .text	00000020 External_9_IRQHandler
80019250 g       .heap	00000000 __heap_start
60000674  w    F .text	00000020 Invalid_IRQHandler
600006d4  w    F .text	00000020 External_3_IRQHandler
600024d4 g     F .text	000001ec xTaskIncrementTick
8000011c g     O .sbss	00000004 g_startscheduler
600008d4  w    F .text	00000020 External_19_IRQHandler
80019250 g       .bss	00000000 _end
60001838 g     F .text	000000cc vPortSetupTimer
60002238 g     F .text	00000084 vTaskDelay
60000b78 g     F .text	00000118 UART_init
60002ffc g     F .text	00000074 siprintf
60000aa8 g       .text	00000000 HW_get_32bit_reg
60000ae8 g       .text	00000000 HW_set_16bit_reg
60001930 g     F .text	00000094 pxPortInitialiseStack
60003724 g     F .text	000003cc _printf_i
60000694  w    F .text	00000020 External_1_IRQHandler
60000734  w    F .text	00000020 External_6_IRQHandler
8000017c g     O .sbss	00000004 __malloc_sbrk_start
60002e50 g     F .text	0000001c External_31_IRQHandler
600016f8 g     F .text	00000034 vPortEnterCritical
80000020 g       .data	00000000 __data_start
80000178 g     O .sbss	00000004 __malloc_free_list
60000914  w    F .text	00000020 External_21_IRQHandler
60000b20 g       .text	00000000 HW_get_16bit_reg_field
60000954  w    F .text	00000020 External_23_IRQHandler
60000974  w    F .text	00000020 External_24_IRQHandler
600010d8 g     F .text	00000238 GPIO_set_output
600006f4  w    F .text	00000020 External_4_IRQHandler
60000754  w    F .text	00000020 External_7_IRQHandler
60002f3c g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

60000000 <_start>:
_start():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
60000000:	00c0006f          	j	6000000c <handle_reset>

60000004 <nmi_vector>:
nmi_vector():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
60000004:	0000006f          	j	60000004 <nmi_vector>

60000008 <trap_vector>:
trap_vector():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
60000008:	02c0006f          	j	60000034 <trap_entry>

6000000c <handle_reset>:
handle_reset():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
6000000c:	00000297          	auipc	t0,0x0
60000010:	02828293          	addi	t0,t0,40 # 60000034 <trap_entry>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
60000014:	30529073          	csrw	mtvec,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
60000018:	30005073          	csrwi	mstatus,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
6000001c:	30405073          	csrwi	mie,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:64

# Ensure the instruction is not optimized, since gp is not yet set

.option norelax
  # initialize global pointer
  la gp, __global_pointer$
60000020:	20000197          	auipc	gp,0x20000
60000024:	7e018193          	addi	gp,gp,2016 # 80000800 <__global_pointer$>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:69

.option pop

  # initialize stack pointer
  la sp, __stack_top
60000028:	2001b117          	auipc	sp,0x2001b
6000002c:	22810113          	addi	sp,sp,552 # 8001b250 <__stack_top>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:72

  # perform the rest of initialization in C
  j _init
60000030:	1e00006f          	j	60000210 <_init>

60000034 <trap_entry>:
trap_entry():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:76


trap_entry:
  addi sp, sp, -32*REGBYTES
60000034:	f8010113          	addi	sp,sp,-128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:78

  SREG x1, 0 * REGBYTES(sp)
60000038:	00112023          	sw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:79
  SREG x2, 1 * REGBYTES(sp)
6000003c:	00212223          	sw	sp,4(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:80
  SREG x3, 2 * REGBYTES(sp)
60000040:	00312423          	sw	gp,8(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:81
  SREG x4, 3 * REGBYTES(sp)
60000044:	00412623          	sw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:82
  SREG x5, 4 * REGBYTES(sp)
60000048:	00512823          	sw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:83
  SREG x6, 5 * REGBYTES(sp)
6000004c:	00612a23          	sw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:84
  SREG x7, 6 * REGBYTES(sp)
60000050:	00712c23          	sw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:85
  SREG x8, 7 * REGBYTES(sp)
60000054:	00812e23          	sw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:86
  SREG x9, 8 * REGBYTES(sp)
60000058:	02912023          	sw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:87
  SREG x10, 9 * REGBYTES(sp)
6000005c:	02a12223          	sw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:88
  SREG x11, 10 * REGBYTES(sp)
60000060:	02b12423          	sw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:89
  SREG x12, 11 * REGBYTES(sp)
60000064:	02c12623          	sw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:90
  SREG x13, 12 * REGBYTES(sp)
60000068:	02d12823          	sw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:91
  SREG x14, 13 * REGBYTES(sp)
6000006c:	02e12a23          	sw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:92
  SREG x15, 14 * REGBYTES(sp)
60000070:	02f12c23          	sw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:93
  SREG x16, 15 * REGBYTES(sp)
60000074:	03012e23          	sw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:94
  SREG x17, 16 * REGBYTES(sp)
60000078:	05112023          	sw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:95
  SREG x18, 17 * REGBYTES(sp)
6000007c:	05212223          	sw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:96
  SREG x19, 18 * REGBYTES(sp)
60000080:	05312423          	sw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:97
  SREG x20, 19 * REGBYTES(sp)
60000084:	05412623          	sw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:98
  SREG x21, 20 * REGBYTES(sp)
60000088:	05512823          	sw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:99
  SREG x22, 21 * REGBYTES(sp)
6000008c:	05612a23          	sw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:100
  SREG x23, 22 * REGBYTES(sp)
60000090:	05712c23          	sw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:101
  SREG x24, 23 * REGBYTES(sp)
60000094:	05812e23          	sw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:102
  SREG x25, 24 * REGBYTES(sp)
60000098:	07912023          	sw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:103
  SREG x26, 25 * REGBYTES(sp)
6000009c:	07a12223          	sw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:104
  SREG x27, 26 * REGBYTES(sp)
600000a0:	07b12423          	sw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:105
  SREG x28, 27 * REGBYTES(sp)
600000a4:	07c12623          	sw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:106
  SREG x29, 28 * REGBYTES(sp)
600000a8:	07d12823          	sw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:107
  SREG x30, 29 * REGBYTES(sp)
600000ac:	07e12a23          	sw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:108
  SREG x31, 30 * REGBYTES(sp)
600000b0:	07f12c23          	sw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:111


  csrr t0, mepc
600000b4:	341022f3          	csrr	t0,mepc
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:112
  SREG t0, 31 * REGBYTES(sp)
600000b8:	06512e23          	sw	t0,124(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:114

  csrr a0, mcause
600000bc:	34202573          	csrr	a0,mcause
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:115
  csrr a1, mepc
600000c0:	341025f3          	csrr	a1,mepc
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:116
  mv a2, sp
600000c4:	00010613          	mv	a2,sp
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:117
  jal handle_trap
600000c8:	4b0000ef          	jal	ra,60000578 <handle_trap>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:118
  csrw mepc, a0
600000cc:	34151073          	csrw	mepc,a0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:121

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
600000d0:	000022b7          	lui	t0,0x2
600000d4:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE+0x800>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:122
  csrs mstatus, t0
600000d8:	3002a073          	csrs	mstatus,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:124

  LREG x1, 0 * REGBYTES(sp)
600000dc:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:125
  LREG x2, 1 * REGBYTES(sp)
600000e0:	00412103          	lw	sp,4(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:126
  LREG x3, 2 * REGBYTES(sp)
600000e4:	00812183          	lw	gp,8(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:127
  LREG x4, 3 * REGBYTES(sp)
600000e8:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:128
  LREG x5, 4 * REGBYTES(sp)
600000ec:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:129
  LREG x6, 5 * REGBYTES(sp)
600000f0:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:130
  LREG x7, 6 * REGBYTES(sp)
600000f4:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:131
  LREG x8, 7 * REGBYTES(sp)
600000f8:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:132
  LREG x9, 8 * REGBYTES(sp)
600000fc:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:133
  LREG x10, 9 * REGBYTES(sp)
60000100:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:134
  LREG x11, 10 * REGBYTES(sp)
60000104:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:135
  LREG x12, 11 * REGBYTES(sp)
60000108:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:136
  LREG x13, 12 * REGBYTES(sp)
6000010c:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:137
  LREG x14, 13 * REGBYTES(sp)
60000110:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:138
  LREG x15, 14 * REGBYTES(sp)
60000114:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:139
  LREG x16, 15 * REGBYTES(sp)
60000118:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:140
  LREG x17, 16 * REGBYTES(sp)
6000011c:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:141
  LREG x18, 17 * REGBYTES(sp)
60000120:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:142
  LREG x19, 18 * REGBYTES(sp)
60000124:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:143
  LREG x20, 19 * REGBYTES(sp)
60000128:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:144
  LREG x21, 20 * REGBYTES(sp)
6000012c:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:145
  LREG x22, 21 * REGBYTES(sp)
60000130:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:146
  LREG x23, 22 * REGBYTES(sp)
60000134:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:147
  LREG x24, 23 * REGBYTES(sp)
60000138:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:148
  LREG x25, 24 * REGBYTES(sp)
6000013c:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:149
  LREG x26, 25 * REGBYTES(sp)
60000140:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:150
  LREG x27, 26 * REGBYTES(sp)
60000144:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:151
  LREG x28, 27 * REGBYTES(sp)
60000148:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:152
  LREG x29, 28 * REGBYTES(sp)
6000014c:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:153
  LREG x30, 29 * REGBYTES(sp)
60000150:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:154
  LREG x31, 30 * REGBYTES(sp)
60000154:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:156

  addi sp, sp, 32*REGBYTES
60000158:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/entry.S:157
  mret
6000015c:	30200073          	mret

60000160 <copy_section>:
copy_section():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:37
extern uint32_t     __bss_start;
extern uint32_t     __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
60000160:	fe010113          	addi	sp,sp,-32
60000164:	00812e23          	sw	s0,28(sp)
60000168:	02010413          	addi	s0,sp,32
6000016c:	fea42623          	sw	a0,-20(s0)
60000170:	feb42423          	sw	a1,-24(s0)
60000174:	fec42223          	sw	a2,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
60000178:	02c0006f          	j	600001a4 <copy_section+0x44>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:40
    {
        *p_vma = *p_load;
6000017c:	fec42783          	lw	a5,-20(s0)
60000180:	0007a703          	lw	a4,0(a5)
60000184:	fe842783          	lw	a5,-24(s0)
60000188:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:41
        ++p_load;
6000018c:	fec42783          	lw	a5,-20(s0)
60000190:	00478793          	addi	a5,a5,4
60000194:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:42
        ++p_vma;
60000198:	fe842783          	lw	a5,-24(s0)
6000019c:	00478793          	addi	a5,a5,4
600001a0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
600001a4:	fe842703          	lw	a4,-24(s0)
600001a8:	fe442783          	lw	a5,-28(s0)
600001ac:	fce7f8e3          	bgeu	a5,a4,6000017c <copy_section+0x1c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:44
    }
}
600001b0:	00000013          	nop
600001b4:	01c12403          	lw	s0,28(sp)
600001b8:	02010113          	addi	sp,sp,32
600001bc:	00008067          	ret

600001c0 <zero_section>:
zero_section():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:47

static void zero_section(uint32_t * start, uint32_t * end)
{
600001c0:	fd010113          	addi	sp,sp,-48
600001c4:	02812623          	sw	s0,44(sp)
600001c8:	03010413          	addi	s0,sp,48
600001cc:	fca42e23          	sw	a0,-36(s0)
600001d0:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
600001d4:	fdc42783          	lw	a5,-36(s0)
600001d8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
600001dc:	0180006f          	j	600001f4 <zero_section+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
600001e0:	fec42783          	lw	a5,-20(s0)
600001e4:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:53
        ++p_zero;
600001e8:	fec42783          	lw	a5,-20(s0)
600001ec:	00478793          	addi	a5,a5,4
600001f0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
600001f4:	fec42703          	lw	a4,-20(s0)
600001f8:	fd842783          	lw	a5,-40(s0)
600001fc:	fee7f2e3          	bgeu	a5,a4,600001e0 <zero_section+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:55
    }
}
60000200:	00000013          	nop
60000204:	02c12403          	lw	s0,44(sp)
60000208:	03010113          	addi	sp,sp,48
6000020c:	00008067          	ret

60000210 <_init>:
_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:58

void _init(void)
{
60000210:	fe010113          	addi	sp,sp,-32
60000214:	00112e23          	sw	ra,28(sp)
60000218:	00812c23          	sw	s0,24(sp)
6000021c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
60000220:	600047b7          	lui	a5,0x60004
60000224:	ed078793          	addi	a5,a5,-304 # 60003ed0 <_malloc_usable_size_r+0x24>
60000228:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
6000022c:	fec42783          	lw	a5,-20(s0)
60000230:	fef42023          	sw	a5,-32(s0)
60000234:	fe042223          	sw	zero,-28(s0)
60000238:	fe042423          	sw	zero,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:63

    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
6000023c:	82018613          	addi	a2,gp,-2016 # 80000020 <__sdata_end>
60000240:	800007b7          	lui	a5,0x80000
60000244:	00078593          	mv	a1,a5
60000248:	600047b7          	lui	a5,0x60004
6000024c:	05078513          	addi	a0,a5,80 # 60004050 <__sdata_load>
60000250:	f11ff0ef          	jal	ra,60000160 <copy_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:64
    copy_section(&__data_load, &__data_start, &__data_end);
60000254:	90018613          	addi	a2,gp,-1792 # 80000100 <__data_end>
60000258:	82018593          	addi	a1,gp,-2016 # 80000020 <__sdata_end>
6000025c:	600047b7          	lui	a5,0x60004
60000260:	07078513          	addi	a0,a5,112 # 60004070 <__data_load>
60000264:	efdff0ef          	jal	ra,60000160 <copy_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:65
    zero_section(&__sbss_start, &__sbss_end);
60000268:	98018593          	addi	a1,gp,-1664 # 80000180 <__sbss_end>
6000026c:	90018513          	addi	a0,gp,-1792 # 80000100 <__data_end>
60000270:	f51ff0ef          	jal	ra,600001c0 <zero_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:66
    zero_section(&__bss_start, &__bss_end);
60000274:	800197b7          	lui	a5,0x80019
60000278:	25078593          	addi	a1,a5,592 # 80019250 <__stack_top+0xffffe000>
6000027c:	98018513          	addi	a0,gp,-1664 # 80000180 <__sbss_end>
60000280:	f41ff0ef          	jal	ra,600001c0 <zero_section>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:68
    
    main(1, argv);
60000284:	fe040793          	addi	a5,s0,-32
60000288:	00078593          	mv	a1,a5
6000028c:	00100513          	li	a0,1
60000290:	415020ef          	jal	ra,60002ea4 <main>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:69
}
60000294:	00000013          	nop
60000298:	01c12083          	lw	ra,28(sp)
6000029c:	01812403          	lw	s0,24(sp)
600002a0:	02010113          	addi	sp,sp,32
600002a4:	00008067          	ret

600002a8 <_fini>:
_fini():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:74

/* Function called after main() finishes */
void
_fini()
{
600002a8:	ff010113          	addi	sp,sp,-16
600002ac:	00812623          	sw	s0,12(sp)
600002b0:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/init.c:75
}
600002b4:	00000013          	nop
600002b8:	00c12403          	lw	s0,12(sp)
600002bc:	01010113          	addi	sp,sp,16
600002c0:	00008067          	ret

600002c4 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
600002c4:	fd010113          	addi	sp,sp,-48
600002c8:	02812623          	sw	s0,44(sp)
600002cc:	03010413          	addi	s0,sp,48
600002d0:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
600002d4:	f14027f3          	csrr	a5,mhartid
600002d8:	fef42623          	sw	a5,-20(s0)
600002dc:	fec42783          	lw	a5,-20(s0)
600002e0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
600002e4:	40000737          	lui	a4,0x40000
600002e8:	fdc42783          	lw	a5,-36(s0)
600002ec:	0057d793          	srli	a5,a5,0x5
600002f0:	fe842683          	lw	a3,-24(s0)
600002f4:	00569693          	slli	a3,a3,0x5
600002f8:	00f686b3          	add	a3,a3,a5
600002fc:	000017b7          	lui	a5,0x1
60000300:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000304:	00f687b3          	add	a5,a3,a5
60000308:	00279793          	slli	a5,a5,0x2
6000030c:	00f707b3          	add	a5,a4,a5
60000310:	0007a783          	lw	a5,0(a5)
60000314:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
60000318:	fdc42783          	lw	a5,-36(s0)
6000031c:	01f7f793          	andi	a5,a5,31
60000320:	00100713          	li	a4,1
60000324:	00f717b3          	sll	a5,a4,a5
60000328:	fff7c793          	not	a5,a5
6000032c:	fe442703          	lw	a4,-28(s0)
60000330:	00f777b3          	and	a5,a4,a5
60000334:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
60000338:	40000737          	lui	a4,0x40000
6000033c:	fdc42783          	lw	a5,-36(s0)
60000340:	0057d793          	srli	a5,a5,0x5
60000344:	fe842683          	lw	a3,-24(s0)
60000348:	00569693          	slli	a3,a3,0x5
6000034c:	00f686b3          	add	a3,a3,a5
60000350:	000017b7          	lui	a5,0x1
60000354:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000358:	00f687b3          	add	a5,a3,a5
6000035c:	00279793          	slli	a5,a5,0x2
60000360:	00f707b3          	add	a5,a4,a5
60000364:	fe442703          	lw	a4,-28(s0)
60000368:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:181
}
6000036c:	00000013          	nop
60000370:	02c12403          	lw	s0,44(sp)
60000374:	03010113          	addi	sp,sp,48
60000378:	00008067          	ret

6000037c <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
6000037c:	fe010113          	addi	sp,sp,-32
60000380:	00812e23          	sw	s0,28(sp)
60000384:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
60000388:	f14027f3          	csrr	a5,mhartid
6000038c:	fef42623          	sw	a5,-20(s0)
60000390:	fec42783          	lw	a5,-20(s0)
60000394:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
60000398:	40000737          	lui	a4,0x40000
6000039c:	fe842783          	lw	a5,-24(s0)
600003a0:	20078793          	addi	a5,a5,512
600003a4:	00c79793          	slli	a5,a5,0xc
600003a8:	00f707b3          	add	a5,a4,a5
600003ac:	0047a783          	lw	a5,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:209
}
600003b0:	00078513          	mv	a0,a5
600003b4:	01c12403          	lw	s0,28(sp)
600003b8:	02010113          	addi	sp,sp,32
600003bc:	00008067          	ret

600003c0 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
600003c0:	fd010113          	addi	sp,sp,-48
600003c4:	02812623          	sw	s0,44(sp)
600003c8:	03010413          	addi	s0,sp,48
600003cc:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
600003d0:	f14027f3          	csrr	a5,mhartid
600003d4:	fef42623          	sw	a5,-20(s0)
600003d8:	fec42783          	lw	a5,-20(s0)
600003dc:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
600003e0:	40000737          	lui	a4,0x40000
600003e4:	fe842783          	lw	a5,-24(s0)
600003e8:	20078793          	addi	a5,a5,512
600003ec:	00c79793          	slli	a5,a5,0xc
600003f0:	00f707b3          	add	a5,a4,a5
600003f4:	fdc42703          	lw	a4,-36(s0)
600003f8:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_plic.h:220
}
600003fc:	00000013          	nop
60000400:	02c12403          	lw	s0,44(sp)
60000404:	03010113          	addi	sp,sp,48
60000408:	00008067          	ret

6000040c <__enable_irq>:
__enable_irq():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:86

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
6000040c:	fe010113          	addi	sp,sp,-32
60000410:	00812e23          	sw	s0,28(sp)
60000414:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:87
    set_csr(mstatus, MSTATUS_MIE);
60000418:	300467f3          	csrrsi	a5,mstatus,8
6000041c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:88
}
60000420:	00000013          	nop
60000424:	01c12403          	lw	s0,28(sp)
60000428:	02010113          	addi	sp,sp,32
6000042c:	00008067          	ret

60000430 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:119

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
static void handle_m_timer_interrupt(void)
{
60000430:	fe010113          	addi	sp,sp,-32
60000434:	00112e23          	sw	ra,28(sp)
60000438:	00812c23          	sw	s0,24(sp)
6000043c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:120
    clear_csr(mie, MIP_MTIP);
60000440:	08000793          	li	a5,128
60000444:	3047b7f3          	csrrc	a5,mie,a5
60000448:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:122

    SysTick_Handler();
6000044c:	578010ef          	jal	ra,600019c4 <SysTick_Handler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:124

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
60000450:	44000737          	lui	a4,0x44000
60000454:	0000c7b7          	lui	a5,0xc
60000458:	00f707b3          	add	a5,a4,a5
6000045c:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE+0xaffc>
60000460:	ff87a783          	lw	a5,-8(a5)
60000464:	9001a583          	lw	a1,-1792(gp) # 80000100 <__data_end>
60000468:	9041a603          	lw	a2,-1788(gp) # 80000104 <__data_end+0x4>
6000046c:	44000537          	lui	a0,0x44000
60000470:	f1402773          	csrr	a4,mhartid
60000474:	fee42423          	sw	a4,-24(s0)
60000478:	fe842883          	lw	a7,-24(s0)
6000047c:	00b786b3          	add	a3,a5,a1
60000480:	00068313          	mv	t1,a3
60000484:	00f33333          	sltu	t1,t1,a5
60000488:	00c80733          	add	a4,a6,a2
6000048c:	00e307b3          	add	a5,t1,a4
60000490:	00078713          	mv	a4,a5
60000494:	00068793          	mv	a5,a3
60000498:	00070813          	mv	a6,a4
6000049c:	00001737          	lui	a4,0x1
600004a0:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0x800>
600004a4:	00e88733          	add	a4,a7,a4
600004a8:	00371713          	slli	a4,a4,0x3
600004ac:	00e50733          	add	a4,a0,a4
600004b0:	00f72023          	sw	a5,0(a4)
600004b4:	01072223          	sw	a6,4(a4)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:126

    set_csr(mie, MIP_MTIP);
600004b8:	08000793          	li	a5,128
600004bc:	3047a7f3          	csrrs	a5,mie,a5
600004c0:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:127
}
600004c4:	00000013          	nop
600004c8:	01c12083          	lw	ra,28(sp)
600004cc:	01812403          	lw	s0,24(sp)
600004d0:	02010113          	addi	sp,sp,32
600004d4:	00008067          	ret

600004d8 <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:172

/*------------------------------------------------------------------------------
 *
 */
static void handle_m_ext_interrupt(void)
{
600004d8:	fe010113          	addi	sp,sp,-32
600004dc:	00112e23          	sw	ra,28(sp)
600004e0:	00812c23          	sw	s0,24(sp)
600004e4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:173
    uint32_t int_num  = PLIC_ClaimIRQ();
600004e8:	e95ff0ef          	jal	ra,6000037c <PLIC_ClaimIRQ>
600004ec:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:174
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
600004f0:	fe0405a3          	sb	zero,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:176

    disable = ext_irq_handler_table[int_num]();
600004f4:	800007b7          	lui	a5,0x80000
600004f8:	fec42703          	lw	a4,-20(s0)
600004fc:	00271713          	slli	a4,a4,0x2
60000500:	02078793          	addi	a5,a5,32 # 80000020 <__stack_top+0xfffe4dd0>
60000504:	00f707b3          	add	a5,a4,a5
60000508:	0007a783          	lw	a5,0(a5)
6000050c:	000780e7          	jalr	a5
60000510:	00050793          	mv	a5,a0
60000514:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:178

    PLIC_CompleteIRQ(int_num);
60000518:	fec42503          	lw	a0,-20(s0)
6000051c:	ea5ff0ef          	jal	ra,600003c0 <PLIC_CompleteIRQ>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:180

    if(EXT_IRQ_DISABLE == disable)
60000520:	feb44703          	lbu	a4,-21(s0)
60000524:	00100793          	li	a5,1
60000528:	00f71663          	bne	a4,a5,60000534 <handle_m_ext_interrupt+0x5c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:182
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
6000052c:	fec42503          	lw	a0,-20(s0)
60000530:	d95ff0ef          	jal	ra,600002c4 <PLIC_DisableIRQ>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:184
    }
}
60000534:	00000013          	nop
60000538:	01c12083          	lw	ra,28(sp)
6000053c:	01812403          	lw	s0,24(sp)
60000540:	02010113          	addi	sp,sp,32
60000544:	00008067          	ret

60000548 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:187

static void handle_m_soft_interrupt(void)
{
60000548:	ff010113          	addi	sp,sp,-16
6000054c:	00112623          	sw	ra,12(sp)
60000550:	00812423          	sw	s0,8(sp)
60000554:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:188
    Software_IRQHandler();
60000558:	57c010ef          	jal	ra,60001ad4 <Software_IRQHandler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:191

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00U;
6000055c:	440007b7          	lui	a5,0x44000
60000560:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:192
}
60000564:	00000013          	nop
60000568:	00c12083          	lw	ra,12(sp)
6000056c:	00812403          	lw	s0,8(sp)
60000570:	01010113          	addi	sp,sp,16
60000574:	00008067          	ret

60000578 <handle_trap>:
handle_trap():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:198

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t mepc)
{
60000578:	fb010113          	addi	sp,sp,-80
6000057c:	04112623          	sw	ra,76(sp)
60000580:	04812423          	sw	s0,72(sp)
60000584:	05010413          	addi	s0,sp,80
60000588:	faa42e23          	sw	a0,-68(s0)
6000058c:	fab42c23          	sw	a1,-72(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:199
    if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
60000590:	fbc42783          	lw	a5,-68(s0)
60000594:	0207d263          	bgez	a5,600005b8 <handle_trap+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:199 (discriminator 1)
60000598:	fbc42703          	lw	a4,-68(s0)
6000059c:	800007b7          	lui	a5,0x80000
600005a0:	fff7c793          	not	a5,a5
600005a4:	00f77733          	and	a4,a4,a5
600005a8:	00b00793          	li	a5,11
600005ac:	00f71663          	bne	a4,a5,600005b8 <handle_trap+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:201
    {
        handle_m_ext_interrupt();
600005b0:	f29ff0ef          	jal	ra,600004d8 <handle_m_ext_interrupt>
600005b4:	0a80006f          	j	6000065c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:203
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
600005b8:	fbc42783          	lw	a5,-68(s0)
600005bc:	0207d263          	bgez	a5,600005e0 <handle_trap+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:203 (discriminator 1)
600005c0:	fbc42703          	lw	a4,-68(s0)
600005c4:	800007b7          	lui	a5,0x80000
600005c8:	fff7c793          	not	a5,a5
600005cc:	00f77733          	and	a4,a4,a5
600005d0:	00700793          	li	a5,7
600005d4:	00f71663          	bne	a4,a5,600005e0 <handle_trap+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:205
    {
        handle_m_timer_interrupt();
600005d8:	e59ff0ef          	jal	ra,60000430 <handle_m_timer_interrupt>
600005dc:	0800006f          	j	6000065c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:207
    }
    else if ( (mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
600005e0:	fbc42783          	lw	a5,-68(s0)
600005e4:	0207d263          	bgez	a5,60000608 <handle_trap+0x90>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:207 (discriminator 1)
600005e8:	fbc42703          	lw	a4,-68(s0)
600005ec:	800007b7          	lui	a5,0x80000
600005f0:	fff7c793          	not	a5,a5
600005f4:	00f77733          	and	a4,a4,a5
600005f8:	00300793          	li	a5,3
600005fc:	00f71663          	bne	a4,a5,60000608 <handle_trap+0x90>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:209
    {
        handle_m_soft_interrupt();
60000600:	f49ff0ef          	jal	ra,60000548 <handle_m_soft_interrupt>
60000604:	0580006f          	j	6000065c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:234
         B Instruction page fault
         C Load page fault                (mtval/mbadaddr is the address)
         E Store page fault               (mtval/mbadaddr is the address)
        */

         uintptr_t mip      = read_csr(mip);      /* interrupt pending */
60000608:	344027f3          	csrr	a5,mip
6000060c:	fef42623          	sw	a5,-20(s0)
60000610:	fec42783          	lw	a5,-20(s0)
60000614:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:235
         uintptr_t mbadaddr = read_csr(mbadaddr); /* additional info and meaning depends on mcause */
60000618:	343027f3          	csrr	a5,mtval
6000061c:	fef42223          	sw	a5,-28(s0)
60000620:	fe442783          	lw	a5,-28(s0)
60000624:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:236
         uintptr_t mtvec    = read_csr(mtvec);    /* trap vector */
60000628:	305027f3          	csrr	a5,mtvec
6000062c:	fcf42e23          	sw	a5,-36(s0)
60000630:	fdc42783          	lw	a5,-36(s0)
60000634:	fcf42c23          	sw	a5,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:237
         uintptr_t mscratch = read_csr(mscratch); /* temporary, sometimes might hold temporary value of a0 */
60000638:	340027f3          	csrr	a5,mscratch
6000063c:	fcf42a23          	sw	a5,-44(s0)
60000640:	fd442783          	lw	a5,-44(s0)
60000644:	fcf42823          	sw	a5,-48(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:238
         uintptr_t mstatus  = read_csr(mstatus);  /* status contains many smaller fields: */
60000648:	300027f3          	csrr	a5,mstatus
6000064c:	fcf42623          	sw	a5,-52(s0)
60000650:	fcc42783          	lw	a5,-52(s0)
60000654:	fcf42423          	sw	a5,-56(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:241

		/* breakpoint*/
        __asm("ebreak");
60000658:	00100073          	ebreak
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:246
#else
        _exit(1 + mcause);
#endif
    }
    return mepc;
6000065c:	fb842783          	lw	a5,-72(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal.c:247
}
60000660:	00078513          	mv	a0,a5
60000664:	04c12083          	lw	ra,76(sp)
60000668:	04812403          	lw	s0,72(sp)
6000066c:	05010113          	addi	sp,sp,80
60000670:	00008067          	ret

60000674 <Invalid_IRQHandler>:
Invalid_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:35
	/*Default handler*/
}

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t Invalid_IRQHandler(void)
{
60000674:	ff010113          	addi	sp,sp,-16
60000678:	00812623          	sw	s0,12(sp)
6000067c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:36
    return(0U); /*Default handler*/
60000680:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:37
}
60000684:	00078513          	mv	a0,a5
60000688:	00c12403          	lw	s0,12(sp)
6000068c:	01010113          	addi	sp,sp,16
60000690:	00008067          	ret

60000694 <External_1_IRQHandler>:
External_1_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:41

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_1_IRQHandler(void)
{
60000694:	ff010113          	addi	sp,sp,-16
60000698:	00812623          	sw	s0,12(sp)
6000069c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:42
    return(0U); /*Default handler*/
600006a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:43
}
600006a4:	00078513          	mv	a0,a5
600006a8:	00c12403          	lw	s0,12(sp)
600006ac:	01010113          	addi	sp,sp,16
600006b0:	00008067          	ret

600006b4 <External_2_IRQHandler>:
External_2_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:47

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_2_IRQHandler(void)
{
600006b4:	ff010113          	addi	sp,sp,-16
600006b8:	00812623          	sw	s0,12(sp)
600006bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:48
    return(0U); /*Default handler*/
600006c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:49
}
600006c4:	00078513          	mv	a0,a5
600006c8:	00c12403          	lw	s0,12(sp)
600006cc:	01010113          	addi	sp,sp,16
600006d0:	00008067          	ret

600006d4 <External_3_IRQHandler>:
External_3_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:53

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_3_IRQHandler(void)
{
600006d4:	ff010113          	addi	sp,sp,-16
600006d8:	00812623          	sw	s0,12(sp)
600006dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:54
    return(0U); /*Default handler*/
600006e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:55
}
600006e4:	00078513          	mv	a0,a5
600006e8:	00c12403          	lw	s0,12(sp)
600006ec:	01010113          	addi	sp,sp,16
600006f0:	00008067          	ret

600006f4 <External_4_IRQHandler>:
External_4_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:59

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_4_IRQHandler(void)
{
600006f4:	ff010113          	addi	sp,sp,-16
600006f8:	00812623          	sw	s0,12(sp)
600006fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:60
	return(0U); /*Default handler*/
60000700:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:61
}
60000704:	00078513          	mv	a0,a5
60000708:	00c12403          	lw	s0,12(sp)
6000070c:	01010113          	addi	sp,sp,16
60000710:	00008067          	ret

60000714 <External_5_IRQHandler>:
External_5_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:65

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_5_IRQHandler(void)
{
60000714:	ff010113          	addi	sp,sp,-16
60000718:	00812623          	sw	s0,12(sp)
6000071c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:66
    return(0U); /*Default handler*/
60000720:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:67
}
60000724:	00078513          	mv	a0,a5
60000728:	00c12403          	lw	s0,12(sp)
6000072c:	01010113          	addi	sp,sp,16
60000730:	00008067          	ret

60000734 <External_6_IRQHandler>:
External_6_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:71

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_6_IRQHandler(void)
{
60000734:	ff010113          	addi	sp,sp,-16
60000738:	00812623          	sw	s0,12(sp)
6000073c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:72
    return(0U); /*Default handler*/
60000740:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:73
}
60000744:	00078513          	mv	a0,a5
60000748:	00c12403          	lw	s0,12(sp)
6000074c:	01010113          	addi	sp,sp,16
60000750:	00008067          	ret

60000754 <External_7_IRQHandler>:
External_7_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:77

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_7_IRQHandler(void)
{
60000754:	ff010113          	addi	sp,sp,-16
60000758:	00812623          	sw	s0,12(sp)
6000075c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0U); /*Default handler*/
60000760:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:79
}
60000764:	00078513          	mv	a0,a5
60000768:	00c12403          	lw	s0,12(sp)
6000076c:	01010113          	addi	sp,sp,16
60000770:	00008067          	ret

60000774 <External_8_IRQHandler>:
External_8_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:83

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_8_IRQHandler(void)
{
60000774:	ff010113          	addi	sp,sp,-16
60000778:	00812623          	sw	s0,12(sp)
6000077c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:84
    return(0U); /*Default handler*/
60000780:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:85
}
60000784:	00078513          	mv	a0,a5
60000788:	00c12403          	lw	s0,12(sp)
6000078c:	01010113          	addi	sp,sp,16
60000790:	00008067          	ret

60000794 <External_9_IRQHandler>:
External_9_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:89

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_9_IRQHandler(void)
{
60000794:	ff010113          	addi	sp,sp,-16
60000798:	00812623          	sw	s0,12(sp)
6000079c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:90
    return(0U); /*Default handler*/
600007a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:91
}
600007a4:	00078513          	mv	a0,a5
600007a8:	00c12403          	lw	s0,12(sp)
600007ac:	01010113          	addi	sp,sp,16
600007b0:	00008067          	ret

600007b4 <External_10_IRQHandler>:
External_10_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:95

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_10_IRQHandler(void)
{
600007b4:	ff010113          	addi	sp,sp,-16
600007b8:	00812623          	sw	s0,12(sp)
600007bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:96
    return(0U); /*Default handler*/
600007c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:97
}
600007c4:	00078513          	mv	a0,a5
600007c8:	00c12403          	lw	s0,12(sp)
600007cc:	01010113          	addi	sp,sp,16
600007d0:	00008067          	ret

600007d4 <External_11_IRQHandler>:
External_11_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:101

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_11_IRQHandler(void)
{
600007d4:	ff010113          	addi	sp,sp,-16
600007d8:	00812623          	sw	s0,12(sp)
600007dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:102
    return(0U); /*Default handler*/
600007e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:103
}
600007e4:	00078513          	mv	a0,a5
600007e8:	00c12403          	lw	s0,12(sp)
600007ec:	01010113          	addi	sp,sp,16
600007f0:	00008067          	ret

600007f4 <External_12_IRQHandler>:
External_12_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:107

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_12_IRQHandler(void)
{
600007f4:	ff010113          	addi	sp,sp,-16
600007f8:	00812623          	sw	s0,12(sp)
600007fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:108
	return(0U); /*Default handler*/
60000800:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:109
}
60000804:	00078513          	mv	a0,a5
60000808:	00c12403          	lw	s0,12(sp)
6000080c:	01010113          	addi	sp,sp,16
60000810:	00008067          	ret

60000814 <External_13_IRQHandler>:
External_13_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:113

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_13_IRQHandler(void)
{
60000814:	ff010113          	addi	sp,sp,-16
60000818:	00812623          	sw	s0,12(sp)
6000081c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:114
	return(0U); /*Default handler*/
60000820:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:115
}
60000824:	00078513          	mv	a0,a5
60000828:	00c12403          	lw	s0,12(sp)
6000082c:	01010113          	addi	sp,sp,16
60000830:	00008067          	ret

60000834 <External_14_IRQHandler>:
External_14_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:119

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_14_IRQHandler(void)
{
60000834:	ff010113          	addi	sp,sp,-16
60000838:	00812623          	sw	s0,12(sp)
6000083c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:120
	return(0U); /*Default handler*/
60000840:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:121
}
60000844:	00078513          	mv	a0,a5
60000848:	00c12403          	lw	s0,12(sp)
6000084c:	01010113          	addi	sp,sp,16
60000850:	00008067          	ret

60000854 <External_15_IRQHandler>:
External_15_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:125

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_15_IRQHandler(void)
{
60000854:	ff010113          	addi	sp,sp,-16
60000858:	00812623          	sw	s0,12(sp)
6000085c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:126
	return(0U); /*Default handler*/
60000860:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:127
}
60000864:	00078513          	mv	a0,a5
60000868:	00c12403          	lw	s0,12(sp)
6000086c:	01010113          	addi	sp,sp,16
60000870:	00008067          	ret

60000874 <External_16_IRQHandler>:
External_16_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:131

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_16_IRQHandler(void)
{
60000874:	ff010113          	addi	sp,sp,-16
60000878:	00812623          	sw	s0,12(sp)
6000087c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:132
	return(0U); /*Default handler*/
60000880:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:133
}
60000884:	00078513          	mv	a0,a5
60000888:	00c12403          	lw	s0,12(sp)
6000088c:	01010113          	addi	sp,sp,16
60000890:	00008067          	ret

60000894 <External_17_IRQHandler>:
External_17_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:137

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_17_IRQHandler(void)
{
60000894:	ff010113          	addi	sp,sp,-16
60000898:	00812623          	sw	s0,12(sp)
6000089c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:138
	return(0U); /*Default handler*/
600008a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:139
}
600008a4:	00078513          	mv	a0,a5
600008a8:	00c12403          	lw	s0,12(sp)
600008ac:	01010113          	addi	sp,sp,16
600008b0:	00008067          	ret

600008b4 <External_18_IRQHandler>:
External_18_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:143

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_18_IRQHandler(void)
{
600008b4:	ff010113          	addi	sp,sp,-16
600008b8:	00812623          	sw	s0,12(sp)
600008bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:144
	return(0U); /*Default handler*/
600008c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:145
}
600008c4:	00078513          	mv	a0,a5
600008c8:	00c12403          	lw	s0,12(sp)
600008cc:	01010113          	addi	sp,sp,16
600008d0:	00008067          	ret

600008d4 <External_19_IRQHandler>:
External_19_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:149

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_19_IRQHandler(void)
{
600008d4:	ff010113          	addi	sp,sp,-16
600008d8:	00812623          	sw	s0,12(sp)
600008dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:150
	return(0U); /*Default handler*/
600008e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:151
}
600008e4:	00078513          	mv	a0,a5
600008e8:	00c12403          	lw	s0,12(sp)
600008ec:	01010113          	addi	sp,sp,16
600008f0:	00008067          	ret

600008f4 <External_20_IRQHandler>:
External_20_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:155

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_20_IRQHandler(void)
{
600008f4:	ff010113          	addi	sp,sp,-16
600008f8:	00812623          	sw	s0,12(sp)
600008fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:156
	return(0U); /*Default handler*/
60000900:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:157
}
60000904:	00078513          	mv	a0,a5
60000908:	00c12403          	lw	s0,12(sp)
6000090c:	01010113          	addi	sp,sp,16
60000910:	00008067          	ret

60000914 <External_21_IRQHandler>:
External_21_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:161

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_21_IRQHandler(void)
{
60000914:	ff010113          	addi	sp,sp,-16
60000918:	00812623          	sw	s0,12(sp)
6000091c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:162
	return(0U); /*Default handler*/
60000920:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:163
}
60000924:	00078513          	mv	a0,a5
60000928:	00c12403          	lw	s0,12(sp)
6000092c:	01010113          	addi	sp,sp,16
60000930:	00008067          	ret

60000934 <External_22_IRQHandler>:
External_22_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:167

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_22_IRQHandler(void)
{
60000934:	ff010113          	addi	sp,sp,-16
60000938:	00812623          	sw	s0,12(sp)
6000093c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:168
	return(0U); /*Default handler*/
60000940:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:169
}
60000944:	00078513          	mv	a0,a5
60000948:	00c12403          	lw	s0,12(sp)
6000094c:	01010113          	addi	sp,sp,16
60000950:	00008067          	ret

60000954 <External_23_IRQHandler>:
External_23_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:173

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_23_IRQHandler(void)
{
60000954:	ff010113          	addi	sp,sp,-16
60000958:	00812623          	sw	s0,12(sp)
6000095c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:174
	return(0U); /*Default handler*/
60000960:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:175
}
60000964:	00078513          	mv	a0,a5
60000968:	00c12403          	lw	s0,12(sp)
6000096c:	01010113          	addi	sp,sp,16
60000970:	00008067          	ret

60000974 <External_24_IRQHandler>:
External_24_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:179

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_24_IRQHandler(void)
{
60000974:	ff010113          	addi	sp,sp,-16
60000978:	00812623          	sw	s0,12(sp)
6000097c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:180
	return(0U); /*Default handler*/
60000980:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:181
}
60000984:	00078513          	mv	a0,a5
60000988:	00c12403          	lw	s0,12(sp)
6000098c:	01010113          	addi	sp,sp,16
60000990:	00008067          	ret

60000994 <External_25_IRQHandler>:
External_25_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:185

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_25_IRQHandler(void)
{
60000994:	ff010113          	addi	sp,sp,-16
60000998:	00812623          	sw	s0,12(sp)
6000099c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:186
	return(0U); /*Default handler*/
600009a0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:187
}
600009a4:	00078513          	mv	a0,a5
600009a8:	00c12403          	lw	s0,12(sp)
600009ac:	01010113          	addi	sp,sp,16
600009b0:	00008067          	ret

600009b4 <External_26_IRQHandler>:
External_26_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:191

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_26_IRQHandler(void)
{
600009b4:	ff010113          	addi	sp,sp,-16
600009b8:	00812623          	sw	s0,12(sp)
600009bc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:192
	return(0U); /*Default handler*/
600009c0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:193
}
600009c4:	00078513          	mv	a0,a5
600009c8:	00c12403          	lw	s0,12(sp)
600009cc:	01010113          	addi	sp,sp,16
600009d0:	00008067          	ret

600009d4 <External_27_IRQHandler>:
External_27_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:197

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_27_IRQHandler(void)
{
600009d4:	ff010113          	addi	sp,sp,-16
600009d8:	00812623          	sw	s0,12(sp)
600009dc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:198
	return(0U); /*Default handler*/
600009e0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:199
}
600009e4:	00078513          	mv	a0,a5
600009e8:	00c12403          	lw	s0,12(sp)
600009ec:	01010113          	addi	sp,sp,16
600009f0:	00008067          	ret

600009f4 <External_28_IRQHandler>:
External_28_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:203

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_28_IRQHandler(void)
{
600009f4:	ff010113          	addi	sp,sp,-16
600009f8:	00812623          	sw	s0,12(sp)
600009fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:204
	return(0U); /*Default handler*/
60000a00:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/riscv_hal_stubs.c:205
}
60000a04:	00078513          	mv	a0,a5
60000a08:	00c12403          	lw	s0,12(sp)
60000a0c:	01010113          	addi	sp,sp,16
60000a10:	00008067          	ret

60000a14 <_sbrk>:
_sbrk():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/syscall.c:86

    while (1);
}

void *_sbrk(ptrdiff_t incr)
{
60000a14:	fe010113          	addi	sp,sp,-32
60000a18:	00812e23          	sw	s0,28(sp)
60000a1c:	02010413          	addi	s0,sp,32
60000a20:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/syscall.c:91
    extern char _end[];
    extern char _heap_end[];
    static char *curbrk = _end;

    if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
60000a24:	800007b7          	lui	a5,0x80000
60000a28:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a2c:	fec42783          	lw	a5,-20(s0)
60000a30:	00f70733          	add	a4,a4,a5
60000a34:	800197b7          	lui	a5,0x80019
60000a38:	25078793          	addi	a5,a5,592 # 80019250 <__stack_top+0xffffe000>
60000a3c:	02f76063          	bltu	a4,a5,60000a5c <_sbrk+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/syscall.c:91 (discriminator 1)
60000a40:	800007b7          	lui	a5,0x80000
60000a44:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a48:	fec42783          	lw	a5,-20(s0)
60000a4c:	00f70733          	add	a4,a4,a5
60000a50:	8001a7b7          	lui	a5,0x8001a
60000a54:	25078793          	addi	a5,a5,592 # 8001a250 <__stack_top+0xfffff000>
60000a58:	00e7f663          	bgeu	a5,a4,60000a64 <_sbrk+0x50>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/syscall.c:93
    {
        return ((char *) - 1);
60000a5c:	fff00793          	li	a5,-1
60000a60:	0300006f          	j	60000a90 <_sbrk+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/syscall.c:96
    }

    curbrk += incr;
60000a64:	800007b7          	lui	a5,0x80000
60000a68:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a6c:	fec42783          	lw	a5,-20(s0)
60000a70:	00f70733          	add	a4,a4,a5
60000a74:	800007b7          	lui	a5,0x80000
60000a78:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/syscall.c:97
    return curbrk - incr;
60000a7c:	800007b7          	lui	a5,0x80000
60000a80:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60000a84:	fec42783          	lw	a5,-20(s0)
60000a88:	40f007b3          	neg	a5,a5
60000a8c:	00f707b3          	add	a5,a4,a5
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../riscv_hal/syscall.c:98
}
60000a90:	00078513          	mv	a0,a5
60000a94:	01c12403          	lw	s0,28(sp)
60000a98:	02010113          	addi	sp,sp,32
60000a9c:	00008067          	ret

60000aa0 <HW_set_32bit_reg>:
HW_set_32bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
60000aa0:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:37
    ret
60000aa4:	00008067          	ret

60000aa8 <HW_get_32bit_reg>:
HW_get_32bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
60000aa8:	00052503          	lw	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:48
    ret
60000aac:	00008067          	ret

60000ab0 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
60000ab0:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
60000ab4:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
60000ab8:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
60000abc:	00052303          	lw	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:64
    mv t2, a2
60000ac0:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:65
    not t2, t2
60000ac4:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
60000ac8:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
60000acc:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
60000ad0:	00652023          	sw	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:69
    ret
60000ad4:	00008067          	ret

60000ad8 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
60000ad8:	00052503          	lw	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
60000adc:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
60000ae0:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:86
    ret
60000ae4:	00008067          	ret

60000ae8 <HW_set_16bit_reg>:
HW_set_16bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
60000ae8:	00b51023          	sh	a1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:97
    ret
60000aec:	00008067          	ret

60000af0 <HW_get_16bit_reg>:
HW_get_16bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
60000af0:	00051503          	lh	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:108
    ret
60000af4:	00008067          	ret

60000af8 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
60000af8:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
60000afc:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
60000b00:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
60000b04:	00051303          	lh	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:125
    mv t2, a2
60000b08:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:126
    not t2, t2
60000b0c:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
60000b10:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
60000b14:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
60000b18:	00651023          	sh	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:130
    ret
60000b1c:	00008067          	ret

60000b20 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
60000b20:	00051503          	lh	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
60000b24:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
60000b28:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:147
    ret
60000b2c:	00008067          	ret

60000b30 <HW_set_8bit_reg>:
HW_set_8bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
60000b30:	00b50023          	sb	a1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:158
    ret
60000b34:	00008067          	ret

60000b38 <HW_get_8bit_reg>:
HW_get_8bit_reg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
60000b38:	00050503          	lb	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:169
    ret
60000b3c:	00008067          	ret

60000b40 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
60000b40:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
60000b44:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
60000b48:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
60000b4c:	00050303          	lb	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:185
    mv t2, a2
60000b50:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:186
    not t2, t2
60000b54:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
60000b58:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
60000b5c:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
60000b60:	00650023          	sb	t1,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:190
    ret
60000b64:	00008067          	ret

60000b68 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
60000b68:	00050503          	lb	a0,0(a0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
60000b6c:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
60000b70:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../hal/hw_reg_access.S:207
    ret
60000b74:	00008067          	ret

60000b78 <UART_init>:
UART_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:45
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
60000b78:	fd010113          	addi	sp,sp,-48
60000b7c:	02112623          	sw	ra,44(sp)
60000b80:	02812423          	sw	s0,40(sp)
60000b84:	03010413          	addi	s0,sp,48
60000b88:	fca42e23          	sw	a0,-36(s0)
60000b8c:	fcb42c23          	sw	a1,-40(s0)
60000b90:	00060793          	mv	a5,a2
60000b94:	00068713          	mv	a4,a3
60000b98:	fcf41b23          	sh	a5,-42(s0)
60000b9c:	00070793          	mv	a5,a4
60000ba0:	fcf40aa3          	sb	a5,-43(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:52
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
60000ba4:	fdc42783          	lw	a5,-36(s0)
60000ba8:	0c078a63          	beqz	a5,60000c7c <UART_init+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:52 (discriminator 1)
60000bac:	fd544703          	lbu	a4,-43(s0)
60000bb0:	00700793          	li	a5,7
60000bb4:	0ce7e463          	bltu	a5,a4,60000c7c <UART_init+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
        ( line_config <= MAX_LINE_CONFIG ) &&
60000bb8:	fd645703          	lhu	a4,-42(s0)
60000bbc:	000027b7          	lui	a5,0x2
60000bc0:	0af77e63          	bgeu	a4,a5,60000c7c <UART_init+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:59
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
60000bc4:	fd842783          	lw	a5,-40(s0)
60000bc8:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE+0x1008>
60000bcc:	fd645783          	lhu	a5,-42(s0)
60000bd0:	0ff7f793          	andi	a5,a5,255
60000bd4:	00078593          	mv	a1,a5
60000bd8:	00070513          	mv	a0,a4
60000bdc:	f55ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:66
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
60000be0:	fd842783          	lw	a5,-40(s0)
60000be4:	00c78693          	addi	a3,a5,12
60000be8:	fd544703          	lbu	a4,-43(s0)
60000bec:	fd645783          	lhu	a5,-42(s0)
60000bf0:	4057d793          	srai	a5,a5,0x5
60000bf4:	7f87f793          	andi	a5,a5,2040
60000bf8:	00f767b3          	or	a5,a4,a5
60000bfc:	00078593          	mv	a1,a5
60000c00:	00068513          	mv	a0,a3
60000c04:	f2dff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:70
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
60000c08:	fdc42783          	lw	a5,-36(s0)
60000c0c:	fd842703          	lw	a4,-40(s0)
60000c10:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:93
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000c14:	fdc42783          	lw	a5,-36(s0)
60000c18:	0007a783          	lw	a5,0(a5)
60000c1c:	01078793          	addi	a5,a5,16
60000c20:	00078513          	mv	a0,a5
60000c24:	f15ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000c28:	00050793          	mv	a5,a0
60000c2c:	0027f793          	andi	a5,a5,2
60000c30:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:95
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
60000c34:	0380006f          	j	60000c6c <UART_init+0xf4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:97
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
60000c38:	fdc42783          	lw	a5,-36(s0)
60000c3c:	0007a783          	lw	a5,0(a5)
60000c40:	00478793          	addi	a5,a5,4
60000c44:	00078513          	mv	a0,a5
60000c48:	ef1ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000c4c:	fdc42783          	lw	a5,-36(s0)
60000c50:	0007a783          	lw	a5,0(a5)
60000c54:	01078793          	addi	a5,a5,16
60000c58:	00078513          	mv	a0,a5
60000c5c:	eddff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000c60:	00050793          	mv	a5,a0
60000c64:	0027f793          	andi	a5,a5,2
60000c68:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:95
        while ( rx_full )
60000c6c:	fef44783          	lbu	a5,-17(s0)
60000c70:	fc0794e3          	bnez	a5,60000c38 <UART_init+0xc0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:105
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
60000c74:	fdc42783          	lw	a5,-36(s0)
60000c78:	00078223          	sb	zero,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:107
    }
}
60000c7c:	00000013          	nop
60000c80:	02c12083          	lw	ra,44(sp)
60000c84:	02812403          	lw	s0,40(sp)
60000c88:	03010113          	addi	sp,sp,48
60000c8c:	00008067          	ret

60000c90 <UART_send>:
UART_send():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:120
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
60000c90:	fd010113          	addi	sp,sp,-48
60000c94:	02112623          	sw	ra,44(sp)
60000c98:	02812423          	sw	s0,40(sp)
60000c9c:	03010413          	addi	s0,sp,48
60000ca0:	fca42e23          	sw	a0,-36(s0)
60000ca4:	fcb42c23          	sw	a1,-40(s0)
60000ca8:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:128

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
60000cac:	fdc42783          	lw	a5,-36(s0)
60000cb0:	08078063          	beqz	a5,60000d30 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:128 (discriminator 1)
60000cb4:	fd842783          	lw	a5,-40(s0)
60000cb8:	06078c63          	beqz	a5,60000d30 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:129
        (tx_buffer != NULL_BUFFER)   &&
60000cbc:	fd442783          	lw	a5,-44(s0)
60000cc0:	06078863          	beqz	a5,60000d30 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
60000cc4:	fe042623          	sw	zero,-20(s0)
60000cc8:	05c0006f          	j	60000d24 <UART_send+0x94>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:136 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000ccc:	fdc42783          	lw	a5,-36(s0)
60000cd0:	0007a783          	lw	a5,0(a5)
60000cd4:	01078793          	addi	a5,a5,16
60000cd8:	00078513          	mv	a0,a5
60000cdc:	e5dff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000ce0:	00050793          	mv	a5,a0
60000ce4:	0017f793          	andi	a5,a5,1
60000ce8:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:138 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
60000cec:	feb44783          	lbu	a5,-21(s0)
60000cf0:	fc078ee3          	beqz	a5,60000ccc <UART_send+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:140 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
60000cf4:	fdc42783          	lw	a5,-36(s0)
60000cf8:	0007a683          	lw	a3,0(a5)
60000cfc:	fd842703          	lw	a4,-40(s0)
60000d00:	fec42783          	lw	a5,-20(s0)
60000d04:	00f707b3          	add	a5,a4,a5
60000d08:	0007c783          	lbu	a5,0(a5)
60000d0c:	00078593          	mv	a1,a5
60000d10:	00068513          	mv	a0,a3
60000d14:	e1dff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
60000d18:	fec42783          	lw	a5,-20(s0)
60000d1c:	00178793          	addi	a5,a5,1
60000d20:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132 (discriminator 1)
60000d24:	fec42703          	lw	a4,-20(s0)
60000d28:	fd442783          	lw	a5,-44(s0)
60000d2c:	faf760e3          	bltu	a4,a5,60000ccc <UART_send+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:144
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
60000d30:	00000013          	nop
60000d34:	02c12083          	lw	ra,44(sp)
60000d38:	02812403          	lw	s0,40(sp)
60000d3c:	03010113          	addi	sp,sp,48
60000d40:	00008067          	ret

60000d44 <UART_polled_tx_string>:
UART_polled_tx_string():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:238
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
60000d44:	fd010113          	addi	sp,sp,-48
60000d48:	02112623          	sw	ra,44(sp)
60000d4c:	02812423          	sw	s0,40(sp)
60000d50:	03010413          	addi	s0,sp,48
60000d54:	fca42e23          	sw	a0,-36(s0)
60000d58:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
60000d5c:	fdc42783          	lw	a5,-36(s0)
60000d60:	08078063          	beqz	a5,60000de0 <UART_polled_tx_string+0x9c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245 (discriminator 1)
60000d64:	fd842783          	lw	a5,-40(s0)
60000d68:	06078c63          	beqz	a5,60000de0 <UART_polled_tx_string+0x9c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:247
    {
        char_idx = 0U;
60000d6c:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000d70:	05c0006f          	j	60000dcc <UART_polled_tx_string+0x88>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:252 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000d74:	fdc42783          	lw	a5,-36(s0)
60000d78:	0007a783          	lw	a5,0(a5)
60000d7c:	01078793          	addi	a5,a5,16
60000d80:	00078513          	mv	a0,a5
60000d84:	db5ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60000d88:	00050793          	mv	a5,a0
60000d8c:	0017f793          	andi	a5,a5,1
60000d90:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:254 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
60000d94:	feb44783          	lbu	a5,-21(s0)
60000d98:	fc078ee3          	beqz	a5,60000d74 <UART_polled_tx_string+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:256
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
60000d9c:	fdc42783          	lw	a5,-36(s0)
60000da0:	0007a683          	lw	a3,0(a5)
60000da4:	fd842703          	lw	a4,-40(s0)
60000da8:	fec42783          	lw	a5,-20(s0)
60000dac:	00f707b3          	add	a5,a4,a5
60000db0:	0007c783          	lbu	a5,0(a5)
60000db4:	00078593          	mv	a1,a5
60000db8:	00068513          	mv	a0,a3
60000dbc:	d75ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:258
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
60000dc0:	fec42783          	lw	a5,-20(s0)
60000dc4:	00178793          	addi	a5,a5,1
60000dc8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000dcc:	fd842703          	lw	a4,-40(s0)
60000dd0:	fec42783          	lw	a5,-20(s0)
60000dd4:	00f707b3          	add	a5,a4,a5
60000dd8:	0007c783          	lbu	a5,0(a5)
60000ddc:	f8079ce3          	bnez	a5,60000d74 <UART_polled_tx_string+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreUARTapb/core_uart_apb.c:261
        }
    }
}
60000de0:	00000013          	nop
60000de4:	02c12083          	lw	ra,44(sp)
60000de8:	02812403          	lw	s0,40(sp)
60000dec:	03010113          	addi	sp,sp,48
60000df0:	00008067          	ret

60000df4 <GPIO_init>:
GPIO_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:37
(
    gpio_instance_t *   this_gpio,
    addr_t              base_addr,
    gpio_apb_width_t    bus_width
)
{
60000df4:	fd010113          	addi	sp,sp,-48
60000df8:	02112623          	sw	ra,44(sp)
60000dfc:	02812423          	sw	s0,40(sp)
60000e00:	03010413          	addi	s0,sp,48
60000e04:	fca42e23          	sw	a0,-36(s0)
60000e08:	fcb42c23          	sw	a1,-40(s0)
60000e0c:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:38
    uint8_t i = 0;
60000e10:	fe0407a3          	sb	zero,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:39
    addr_t cfg_reg_addr = base_addr;
60000e14:	fd842783          	lw	a5,-40(s0)
60000e18:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:41
    
    this_gpio->base_addr = base_addr;
60000e1c:	fdc42783          	lw	a5,-36(s0)
60000e20:	fd842703          	lw	a4,-40(s0)
60000e24:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:42
    this_gpio->apb_bus_width = bus_width;
60000e28:	fdc42783          	lw	a5,-36(s0)
60000e2c:	fd442703          	lw	a4,-44(s0)
60000e30:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:45
    
    /* Clear configuration. */
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
60000e34:	fe0407a3          	sb	zero,-17(s0)
60000e38:	fd842783          	lw	a5,-40(s0)
60000e3c:	fef42423          	sw	a5,-24(s0)
60000e40:	0280006f          	j	60000e68 <GPIO_init+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:47 (discriminator 3)
    {
        HW_set_8bit_reg( cfg_reg_addr, 0 );
60000e44:	00000593          	li	a1,0
60000e48:	fe842503          	lw	a0,-24(s0)
60000e4c:	ce5ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:48 (discriminator 3)
        cfg_reg_addr += 4;
60000e50:	fe842783          	lw	a5,-24(s0)
60000e54:	00478793          	addi	a5,a5,4
60000e58:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:45 (discriminator 3)
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
60000e5c:	fef44783          	lbu	a5,-17(s0)
60000e60:	00178793          	addi	a5,a5,1
60000e64:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:45 (discriminator 1)
60000e68:	fef44703          	lbu	a4,-17(s0)
60000e6c:	01f00793          	li	a5,31
60000e70:	fce7fae3          	bgeu	a5,a4,60000e44 <GPIO_init+0x50>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:51
    }
    /* Clear any pending interrupts */
    switch( this_gpio->apb_bus_width )
60000e74:	fdc42783          	lw	a5,-36(s0)
60000e78:	0047a783          	lw	a5,4(a5)
60000e7c:	00100713          	li	a4,1
60000e80:	02e78663          	beq	a5,a4,60000eac <GPIO_init+0xb8>
60000e84:	06078263          	beqz	a5,60000ee8 <GPIO_init+0xf4>
60000e88:	00200713          	li	a4,2
60000e8c:	0ce79063          	bne	a5,a4,60000f4c <GPIO_init+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:54
    {
        case GPIO_APB_32_BITS_BUS:
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
60000e90:	fdc42783          	lw	a5,-36(s0)
60000e94:	0007a783          	lw	a5,0(a5)
60000e98:	08078793          	addi	a5,a5,128
60000e9c:	fff00593          	li	a1,-1
60000ea0:	00078513          	mv	a0,a5
60000ea4:	bfdff0ef          	jal	ra,60000aa0 <HW_set_32bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:55
            break;
60000ea8:	0a80006f          	j	60000f50 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:58
            
        case GPIO_APB_16_BITS_BUS:
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, (uint16_t)CLEAR_ALL_IRQ16 );
60000eac:	fdc42783          	lw	a5,-36(s0)
60000eb0:	0007a783          	lw	a5,0(a5)
60000eb4:	08078713          	addi	a4,a5,128
60000eb8:	000107b7          	lui	a5,0x10
60000ebc:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60000ec0:	00070513          	mv	a0,a4
60000ec4:	c25ff0ef          	jal	ra,60000ae8 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
60000ec8:	fdc42783          	lw	a5,-36(s0)
60000ecc:	0007a783          	lw	a5,0(a5)
60000ed0:	08478713          	addi	a4,a5,132
60000ed4:	000107b7          	lui	a5,0x10
60000ed8:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60000edc:	00070513          	mv	a0,a4
60000ee0:	c09ff0ef          	jal	ra,60000ae8 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:60
            break;
60000ee4:	06c0006f          	j	60000f50 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:63
            
        case GPIO_APB_8_BITS_BUS:
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, (uint8_t)CLEAR_ALL_IRQ8 );
60000ee8:	fdc42783          	lw	a5,-36(s0)
60000eec:	0007a783          	lw	a5,0(a5)
60000ef0:	08078793          	addi	a5,a5,128
60000ef4:	0ff00593          	li	a1,255
60000ef8:	00078513          	mv	a0,a5
60000efc:	c35ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:64
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, (uint8_t)CLEAR_ALL_IRQ8 );
60000f00:	fdc42783          	lw	a5,-36(s0)
60000f04:	0007a783          	lw	a5,0(a5)
60000f08:	08478793          	addi	a5,a5,132
60000f0c:	0ff00593          	li	a1,255
60000f10:	00078513          	mv	a0,a5
60000f14:	c1dff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:65
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, (uint8_t)CLEAR_ALL_IRQ8 );
60000f18:	fdc42783          	lw	a5,-36(s0)
60000f1c:	0007a783          	lw	a5,0(a5)
60000f20:	08878793          	addi	a5,a5,136
60000f24:	0ff00593          	li	a1,255
60000f28:	00078513          	mv	a0,a5
60000f2c:	c05ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
60000f30:	fdc42783          	lw	a5,-36(s0)
60000f34:	0007a783          	lw	a5,0(a5)
60000f38:	08c78793          	addi	a5,a5,140
60000f3c:	0ff00593          	li	a1,255
60000f40:	00078513          	mv	a0,a5
60000f44:	bedff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:67
            break;
60000f48:	0080006f          	j	60000f50 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:71
            
        default:
            HAL_ASSERT(0);
            break;
60000f4c:	00000013          	nop
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:73
    }
}
60000f50:	00000013          	nop
60000f54:	02c12083          	lw	ra,44(sp)
60000f58:	02812403          	lw	s0,40(sp)
60000f5c:	03010113          	addi	sp,sp,48
60000f60:	00008067          	ret

60000f64 <GPIO_get_inputs>:
GPIO_get_inputs():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:156
 */
uint32_t GPIO_get_inputs
(
    gpio_instance_t *   this_gpio
)
{
60000f64:	fd010113          	addi	sp,sp,-48
60000f68:	02112623          	sw	ra,44(sp)
60000f6c:	02812423          	sw	s0,40(sp)
60000f70:	03010413          	addi	s0,sp,48
60000f74:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:157
    uint32_t gpio_in = 0;
60000f78:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:159
    
    switch( this_gpio->apb_bus_width )
60000f7c:	fdc42783          	lw	a5,-36(s0)
60000f80:	0047a783          	lw	a5,4(a5)
60000f84:	00100713          	li	a4,1
60000f88:	02e78663          	beq	a5,a4,60000fb4 <GPIO_get_inputs+0x50>
60000f8c:	08078063          	beqz	a5,6000100c <GPIO_get_inputs+0xa8>
60000f90:	00200713          	li	a4,2
60000f94:	12e79463          	bne	a5,a4,600010bc <GPIO_get_inputs+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:162
    {
        case GPIO_APB_32_BITS_BUS:
            gpio_in = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_IN );
60000f98:	fdc42783          	lw	a5,-36(s0)
60000f9c:	0007a783          	lw	a5,0(a5)
60000fa0:	09078793          	addi	a5,a5,144
60000fa4:	00078513          	mv	a0,a5
60000fa8:	b01ff0ef          	jal	ra,60000aa8 <HW_get_32bit_reg>
60000fac:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:163
            break;
60000fb0:	1100006f          	j	600010c0 <GPIO_get_inputs+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:166
            
        case GPIO_APB_16_BITS_BUS:
            gpio_in |= HAL_get_16bit_reg( this_gpio->base_addr, GPIO_IN0 );
60000fb4:	fdc42783          	lw	a5,-36(s0)
60000fb8:	0007a783          	lw	a5,0(a5)
60000fbc:	09078793          	addi	a5,a5,144
60000fc0:	00078513          	mv	a0,a5
60000fc4:	b2dff0ef          	jal	ra,60000af0 <HW_get_16bit_reg>
60000fc8:	00050793          	mv	a5,a0
60000fcc:	00078713          	mv	a4,a5
60000fd0:	fec42783          	lw	a5,-20(s0)
60000fd4:	00e7e7b3          	or	a5,a5,a4
60000fd8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:167
            gpio_in |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_IN1 ) << 16);
60000fdc:	fdc42783          	lw	a5,-36(s0)
60000fe0:	0007a783          	lw	a5,0(a5)
60000fe4:	09478793          	addi	a5,a5,148
60000fe8:	00078513          	mv	a0,a5
60000fec:	b05ff0ef          	jal	ra,60000af0 <HW_get_16bit_reg>
60000ff0:	00050793          	mv	a5,a0
60000ff4:	01079793          	slli	a5,a5,0x10
60000ff8:	00078713          	mv	a4,a5
60000ffc:	fec42783          	lw	a5,-20(s0)
60001000:	00e7e7b3          	or	a5,a5,a4
60001004:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:168
            break;
60001008:	0b80006f          	j	600010c0 <GPIO_get_inputs+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:171
            
        case GPIO_APB_8_BITS_BUS:
            gpio_in |= HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN0 );
6000100c:	fdc42783          	lw	a5,-36(s0)
60001010:	0007a783          	lw	a5,0(a5)
60001014:	09078793          	addi	a5,a5,144
60001018:	00078513          	mv	a0,a5
6000101c:	b1dff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60001020:	00050793          	mv	a5,a0
60001024:	00078713          	mv	a4,a5
60001028:	fec42783          	lw	a5,-20(s0)
6000102c:	00e7e7b3          	or	a5,a5,a4
60001030:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:172
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN1 ) << 8);
60001034:	fdc42783          	lw	a5,-36(s0)
60001038:	0007a783          	lw	a5,0(a5)
6000103c:	09478793          	addi	a5,a5,148
60001040:	00078513          	mv	a0,a5
60001044:	af5ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60001048:	00050793          	mv	a5,a0
6000104c:	00879793          	slli	a5,a5,0x8
60001050:	00078713          	mv	a4,a5
60001054:	fec42783          	lw	a5,-20(s0)
60001058:	00e7e7b3          	or	a5,a5,a4
6000105c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:173
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN2 ) << 16);
60001060:	fdc42783          	lw	a5,-36(s0)
60001064:	0007a783          	lw	a5,0(a5)
60001068:	09878793          	addi	a5,a5,152
6000106c:	00078513          	mv	a0,a5
60001070:	ac9ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
60001074:	00050793          	mv	a5,a0
60001078:	01079793          	slli	a5,a5,0x10
6000107c:	00078713          	mv	a4,a5
60001080:	fec42783          	lw	a5,-20(s0)
60001084:	00e7e7b3          	or	a5,a5,a4
60001088:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:174
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN3 ) << 24);
6000108c:	fdc42783          	lw	a5,-36(s0)
60001090:	0007a783          	lw	a5,0(a5)
60001094:	09c78793          	addi	a5,a5,156
60001098:	00078513          	mv	a0,a5
6000109c:	a9dff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
600010a0:	00050793          	mv	a5,a0
600010a4:	01879793          	slli	a5,a5,0x18
600010a8:	00078713          	mv	a4,a5
600010ac:	fec42783          	lw	a5,-20(s0)
600010b0:	00e7e7b3          	or	a5,a5,a4
600010b4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:175
            break;
600010b8:	0080006f          	j	600010c0 <GPIO_get_inputs+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:179
            
        default:
            HAL_ASSERT(0);
            break;
600010bc:	00000013          	nop
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:182
    }
    
    return gpio_in;
600010c0:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:183
}
600010c4:	00078513          	mv	a0,a5
600010c8:	02c12083          	lw	ra,44(sp)
600010cc:	02812403          	lw	s0,40(sp)
600010d0:	03010113          	addi	sp,sp,48
600010d4:	00008067          	ret

600010d8 <GPIO_set_output>:
GPIO_set_output():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:232
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint8_t             value
)
{
600010d8:	fd010113          	addi	sp,sp,-48
600010dc:	02112623          	sw	ra,44(sp)
600010e0:	02812423          	sw	s0,40(sp)
600010e4:	03010413          	addi	s0,sp,48
600010e8:	fca42e23          	sw	a0,-36(s0)
600010ec:	fcb42c23          	sw	a1,-40(s0)
600010f0:	00060793          	mv	a5,a2
600010f4:	fcf40ba3          	sb	a5,-41(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:236
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
            
    switch( this_gpio->apb_bus_width )
600010f8:	fdc42783          	lw	a5,-36(s0)
600010fc:	0047a783          	lw	a5,4(a5)
60001100:	00100713          	li	a4,1
60001104:	08e78663          	beq	a5,a4,60001190 <GPIO_set_output+0xb8>
60001108:	12078e63          	beqz	a5,60001244 <GPIO_set_output+0x16c>
6000110c:	00200713          	li	a4,2
60001110:	1ee79463          	bne	a5,a4,600012f8 <GPIO_set_output+0x220>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:242
    {
        case GPIO_APB_32_BITS_BUS:
            {
                uint32_t outputs_state;
                
                outputs_state = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
60001114:	fdc42783          	lw	a5,-36(s0)
60001118:	0007a783          	lw	a5,0(a5)
6000111c:	0a078793          	addi	a5,a5,160
60001120:	00078513          	mv	a0,a5
60001124:	985ff0ef          	jal	ra,60000aa8 <HW_get_32bit_reg>
60001128:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:243
                if ( 0 == value )
6000112c:	fd744783          	lbu	a5,-41(s0)
60001130:	02079463          	bnez	a5,60001158 <GPIO_set_output+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:245
                {
                    outputs_state &= ~(1 << port_id);
60001134:	fd842783          	lw	a5,-40(s0)
60001138:	00100713          	li	a4,1
6000113c:	00f717b3          	sll	a5,a4,a5
60001140:	fff7c793          	not	a5,a5
60001144:	00078713          	mv	a4,a5
60001148:	fec42783          	lw	a5,-20(s0)
6000114c:	00e7f7b3          	and	a5,a5,a4
60001150:	fef42623          	sw	a5,-20(s0)
60001154:	0200006f          	j	60001174 <GPIO_set_output+0x9c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:249
                }
                else
                {
                    outputs_state |= 1 << port_id;
60001158:	fd842783          	lw	a5,-40(s0)
6000115c:	00100713          	li	a4,1
60001160:	00f717b3          	sll	a5,a4,a5
60001164:	00078713          	mv	a4,a5
60001168:	fec42783          	lw	a5,-20(s0)
6000116c:	00e7e7b3          	or	a5,a5,a4
60001170:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:251
                }
                HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, outputs_state );
60001174:	fdc42783          	lw	a5,-36(s0)
60001178:	0007a783          	lw	a5,0(a5)
6000117c:	0a078793          	addi	a5,a5,160
60001180:	fec42583          	lw	a1,-20(s0)
60001184:	00078513          	mv	a0,a5
60001188:	919ff0ef          	jal	ra,60000aa0 <HW_set_32bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:262
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT ) == outputs_state );
            }
            break;
6000118c:	1700006f          	j	600012fc <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:267
            
        case GPIO_APB_16_BITS_BUS:
            {
                uint16_t outputs_state;
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 4) * 4);
60001190:	fdc42783          	lw	a5,-36(s0)
60001194:	0007a703          	lw	a4,0(a5)
60001198:	fd842783          	lw	a5,-40(s0)
6000119c:	0047d793          	srli	a5,a5,0x4
600011a0:	00279793          	slli	a5,a5,0x2
600011a4:	00f707b3          	add	a5,a4,a5
600011a8:	0a078793          	addi	a5,a5,160
600011ac:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:269
                
                outputs_state = HW_get_16bit_reg( gpio_out_reg_addr );
600011b0:	fe442503          	lw	a0,-28(s0)
600011b4:	93dff0ef          	jal	ra,60000af0 <HW_get_16bit_reg>
600011b8:	00050793          	mv	a5,a0
600011bc:	fef41523          	sh	a5,-22(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:270
                if ( 0 == value )
600011c0:	fd744783          	lbu	a5,-41(s0)
600011c4:	04079063          	bnez	a5,60001204 <GPIO_set_output+0x12c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:272
                {
                    outputs_state &= ~(1 << (port_id & 0x0F));
600011c8:	fd842783          	lw	a5,-40(s0)
600011cc:	00f7f793          	andi	a5,a5,15
600011d0:	00100713          	li	a4,1
600011d4:	00f717b3          	sll	a5,a4,a5
600011d8:	01079793          	slli	a5,a5,0x10
600011dc:	4107d793          	srai	a5,a5,0x10
600011e0:	fff7c793          	not	a5,a5
600011e4:	01079713          	slli	a4,a5,0x10
600011e8:	41075713          	srai	a4,a4,0x10
600011ec:	fea41783          	lh	a5,-22(s0)
600011f0:	00f777b3          	and	a5,a4,a5
600011f4:	01079793          	slli	a5,a5,0x10
600011f8:	4107d793          	srai	a5,a5,0x10
600011fc:	fef41523          	sh	a5,-22(s0)
60001200:	0300006f          	j	60001230 <GPIO_set_output+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:276
                }
                else
                {
                    outputs_state |= 1 << (port_id & 0x0F);
60001204:	fd842783          	lw	a5,-40(s0)
60001208:	00f7f793          	andi	a5,a5,15
6000120c:	00100713          	li	a4,1
60001210:	00f717b3          	sll	a5,a4,a5
60001214:	01079713          	slli	a4,a5,0x10
60001218:	41075713          	srai	a4,a4,0x10
6000121c:	fea41783          	lh	a5,-22(s0)
60001220:	00f767b3          	or	a5,a4,a5
60001224:	01079793          	slli	a5,a5,0x10
60001228:	4107d793          	srai	a5,a5,0x10
6000122c:	fef41523          	sh	a5,-22(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:278
                }
                HW_set_16bit_reg( gpio_out_reg_addr, outputs_state );
60001230:	fea45783          	lhu	a5,-22(s0)
60001234:	00078593          	mv	a1,a5
60001238:	fe442503          	lw	a0,-28(s0)
6000123c:	8adff0ef          	jal	ra,60000ae8 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:289
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HW_get_16bit_reg( gpio_out_reg_addr ) == outputs_state );
            }
            break;
60001240:	0bc0006f          	j	600012fc <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:294
            
        case GPIO_APB_8_BITS_BUS:
            {
                uint8_t outputs_state;
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 3) * 4);
60001244:	fdc42783          	lw	a5,-36(s0)
60001248:	0007a703          	lw	a4,0(a5)
6000124c:	fd842783          	lw	a5,-40(s0)
60001250:	0037d793          	srli	a5,a5,0x3
60001254:	00279793          	slli	a5,a5,0x2
60001258:	00f707b3          	add	a5,a4,a5
6000125c:	0a078793          	addi	a5,a5,160
60001260:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:296
                
                outputs_state = HW_get_8bit_reg( gpio_out_reg_addr );
60001264:	fe042503          	lw	a0,-32(s0)
60001268:	8d1ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
6000126c:	00050793          	mv	a5,a0
60001270:	fef404a3          	sb	a5,-23(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:297
                if ( 0 == value )
60001274:	fd744783          	lbu	a5,-41(s0)
60001278:	04079063          	bnez	a5,600012b8 <GPIO_set_output+0x1e0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:299
                {
                    outputs_state &= ~(1 << (port_id & 0x07));
6000127c:	fd842783          	lw	a5,-40(s0)
60001280:	0077f793          	andi	a5,a5,7
60001284:	00100713          	li	a4,1
60001288:	00f717b3          	sll	a5,a4,a5
6000128c:	01879793          	slli	a5,a5,0x18
60001290:	4187d793          	srai	a5,a5,0x18
60001294:	fff7c793          	not	a5,a5
60001298:	01879713          	slli	a4,a5,0x18
6000129c:	41875713          	srai	a4,a4,0x18
600012a0:	fe940783          	lb	a5,-23(s0)
600012a4:	00f777b3          	and	a5,a4,a5
600012a8:	01879793          	slli	a5,a5,0x18
600012ac:	4187d793          	srai	a5,a5,0x18
600012b0:	fef404a3          	sb	a5,-23(s0)
600012b4:	0300006f          	j	600012e4 <GPIO_set_output+0x20c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:303
                }
                else
                {
                    outputs_state |= 1 << (port_id & 0x07);
600012b8:	fd842783          	lw	a5,-40(s0)
600012bc:	0077f793          	andi	a5,a5,7
600012c0:	00100713          	li	a4,1
600012c4:	00f717b3          	sll	a5,a4,a5
600012c8:	01879713          	slli	a4,a5,0x18
600012cc:	41875713          	srai	a4,a4,0x18
600012d0:	fe940783          	lb	a5,-23(s0)
600012d4:	00f767b3          	or	a5,a4,a5
600012d8:	01879793          	slli	a5,a5,0x18
600012dc:	4187d793          	srai	a5,a5,0x18
600012e0:	fef404a3          	sb	a5,-23(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:305
                }
                HW_set_8bit_reg( gpio_out_reg_addr, outputs_state );
600012e4:	fe944783          	lbu	a5,-23(s0)
600012e8:	00078593          	mv	a1,a5
600012ec:	fe042503          	lw	a0,-32(s0)
600012f0:	841ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:316
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HW_get_8bit_reg( gpio_out_reg_addr ) == outputs_state );
            }
            break;
600012f4:	0080006f          	j	600012fc <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:320
            
        default:
            HAL_ASSERT(0);
            break;
600012f8:	00000013          	nop
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:322
    }
}
600012fc:	00000013          	nop
60001300:	02c12083          	lw	ra,44(sp)
60001304:	02812403          	lw	s0,40(sp)
60001308:	03010113          	addi	sp,sp,48
6000130c:	00008067          	ret

60001310 <GPIO_enable_irq>:
GPIO_enable_irq():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:387
void GPIO_enable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
60001310:	fd010113          	addi	sp,sp,-48
60001314:	02112623          	sw	ra,44(sp)
60001318:	02812423          	sw	s0,40(sp)
6000131c:	03010413          	addi	s0,sp,48
60001320:	fca42e23          	sw	a0,-36(s0)
60001324:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:389
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
60001328:	fdc42783          	lw	a5,-36(s0)
6000132c:	0007a783          	lw	a5,0(a5)
60001330:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:393
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
60001334:	fd842703          	lw	a4,-40(s0)
60001338:	01f00793          	li	a5,31
6000133c:	04e7e063          	bltu	a5,a4,6000137c <GPIO_enable_irq+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:395
    {
        cfg_reg_addr += (port_id * 4);
60001340:	fd842783          	lw	a5,-40(s0)
60001344:	00279793          	slli	a5,a5,0x2
60001348:	fec42703          	lw	a4,-20(s0)
6000134c:	00f707b3          	add	a5,a4,a5
60001350:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:396
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
60001354:	fec42503          	lw	a0,-20(s0)
60001358:	fe0ff0ef          	jal	ra,60000b38 <HW_get_8bit_reg>
6000135c:	00050793          	mv	a5,a0
60001360:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:397
        cfg_value |= GPIO_INT_ENABLE_MASK;
60001364:	fe842783          	lw	a5,-24(s0)
60001368:	0087e793          	ori	a5,a5,8
6000136c:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:398
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
60001370:	fe842583          	lw	a1,-24(s0)
60001374:	fec42503          	lw	a0,-20(s0)
60001378:	fb8ff0ef          	jal	ra,60000b30 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../drivers/CoreGPIO/core_gpio.c:400
    }
}
6000137c:	00000013          	nop
60001380:	02c12083          	lw	ra,44(sp)
60001384:	02812403          	lw	s0,40(sp)
60001388:	03010113          	addi	sp,sp,48
6000138c:	00008067          	ret

60001390 <pvPortMalloc>:
pvPortMalloc():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
60001390:	fc010113          	addi	sp,sp,-64
60001394:	02112e23          	sw	ra,60(sp)
60001398:	02812c23          	sw	s0,56(sp)
6000139c:	04010413          	addi	s0,sp,64
600013a0:	fca42623          	sw	a0,-52(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
600013a4:	fe042223          	sw	zero,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
600013a8:	7a5000ef          	jal	ra,6000234c <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
600013ac:	9181a783          	lw	a5,-1768(gp) # 80000118 <xHeapHasBeenInitialised.2779>
600013b0:	00079863          	bnez	a5,600013c0 <pvPortMalloc+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
600013b4:	284000ef          	jal	ra,60001638 <prvHeapInit>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
600013b8:	00100713          	li	a4,1
600013bc:	90e1ac23          	sw	a4,-1768(gp) # 80000118 <xHeapHasBeenInitialised.2779>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
600013c0:	fcc42783          	lw	a5,-52(s0)
600013c4:	02078a63          	beqz	a5,600013f8 <pvPortMalloc+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
600013c8:	00800793          	li	a5,8
600013cc:	00078713          	mv	a4,a5
600013d0:	fcc42783          	lw	a5,-52(s0)
600013d4:	00e787b3          	add	a5,a5,a4
600013d8:	fcf42623          	sw	a5,-52(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
600013dc:	fcc42783          	lw	a5,-52(s0)
600013e0:	0037f793          	andi	a5,a5,3
600013e4:	00078a63          	beqz	a5,600013f8 <pvPortMalloc+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
600013e8:	fcc42783          	lw	a5,-52(s0)
600013ec:	ffc7f793          	andi	a5,a5,-4
600013f0:	00478793          	addi	a5,a5,4
600013f4:	fcf42623          	sw	a5,-52(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
600013f8:	fcc42783          	lw	a5,-52(s0)
600013fc:	14078463          	beqz	a5,60001544 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
60001400:	fcc42703          	lw	a4,-52(s0)
60001404:	000197b7          	lui	a5,0x19
60001408:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x17ffb>
6000140c:	12e7ec63          	bltu	a5,a4,60001544 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
60001410:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
60001414:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
60001418:	9081a783          	lw	a5,-1784(gp) # 80000108 <xStart>
6000141c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
60001420:	0180006f          	j	60001438 <pvPortMalloc+0xa8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
60001424:	fec42783          	lw	a5,-20(s0)
60001428:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
6000142c:	fec42783          	lw	a5,-20(s0)
60001430:	0007a783          	lw	a5,0(a5)
60001434:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
60001438:	fec42783          	lw	a5,-20(s0)
6000143c:	0047a783          	lw	a5,4(a5)
60001440:	fcc42703          	lw	a4,-52(s0)
60001444:	00e7f863          	bgeu	a5,a4,60001454 <pvPortMalloc+0xc4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
60001448:	fec42783          	lw	a5,-20(s0)
6000144c:	0007a783          	lw	a5,0(a5)
60001450:	fc079ae3          	bnez	a5,60001424 <pvPortMalloc+0x94>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
60001454:	fec42703          	lw	a4,-20(s0)
60001458:	91018793          	addi	a5,gp,-1776 # 80000110 <xEnd>
6000145c:	0ef70463          	beq	a4,a5,60001544 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
60001460:	fe842783          	lw	a5,-24(s0)
60001464:	0007a783          	lw	a5,0(a5)
60001468:	00800713          	li	a4,8
6000146c:	00e787b3          	add	a5,a5,a4
60001470:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
60001474:	fec42783          	lw	a5,-20(s0)
60001478:	0007a703          	lw	a4,0(a5)
6000147c:	fe842783          	lw	a5,-24(s0)
60001480:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
60001484:	fec42783          	lw	a5,-20(s0)
60001488:	0047a703          	lw	a4,4(a5)
6000148c:	fcc42783          	lw	a5,-52(s0)
60001490:	40f707b3          	sub	a5,a4,a5
60001494:	00800713          	li	a4,8
60001498:	00171713          	slli	a4,a4,0x1
6000149c:	08f77663          	bgeu	a4,a5,60001528 <pvPortMalloc+0x198>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
600014a0:	fec42703          	lw	a4,-20(s0)
600014a4:	fcc42783          	lw	a5,-52(s0)
600014a8:	00f707b3          	add	a5,a4,a5
600014ac:	fcf42e23          	sw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
600014b0:	fec42783          	lw	a5,-20(s0)
600014b4:	0047a703          	lw	a4,4(a5)
600014b8:	fcc42783          	lw	a5,-52(s0)
600014bc:	40f70733          	sub	a4,a4,a5
600014c0:	fdc42783          	lw	a5,-36(s0)
600014c4:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
600014c8:	fec42783          	lw	a5,-20(s0)
600014cc:	fcc42703          	lw	a4,-52(s0)
600014d0:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
600014d4:	fdc42783          	lw	a5,-36(s0)
600014d8:	0047a783          	lw	a5,4(a5)
600014dc:	fcf42c23          	sw	a5,-40(s0)
600014e0:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
600014e4:	fef42023          	sw	a5,-32(s0)
600014e8:	0100006f          	j	600014f8 <pvPortMalloc+0x168>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
600014ec:	fe042783          	lw	a5,-32(s0)
600014f0:	0007a783          	lw	a5,0(a5)
600014f4:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
600014f8:	fe042783          	lw	a5,-32(s0)
600014fc:	0007a783          	lw	a5,0(a5)
60001500:	0047a783          	lw	a5,4(a5)
60001504:	fd842703          	lw	a4,-40(s0)
60001508:	fee7e2e3          	bltu	a5,a4,600014ec <pvPortMalloc+0x15c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
6000150c:	fe042783          	lw	a5,-32(s0)
60001510:	0007a703          	lw	a4,0(a5)
60001514:	fdc42783          	lw	a5,-36(s0)
60001518:	00e7a023          	sw	a4,0(a5)
6000151c:	fe042783          	lw	a5,-32(s0)
60001520:	fdc42703          	lw	a4,-36(s0)
60001524:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
60001528:	800007b7          	lui	a5,0x80000
6000152c:	0047a703          	lw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
60001530:	fec42783          	lw	a5,-20(s0)
60001534:	0047a783          	lw	a5,4(a5)
60001538:	40f70733          	sub	a4,a4,a5
6000153c:	800007b7          	lui	a5,0x80000
60001540:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
60001544:	631000ef          	jal	ra,60002374 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
60001548:	fe442783          	lw	a5,-28(s0)
6000154c:	00079463          	bnez	a5,60001554 <pvPortMalloc+0x1c4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
60001550:	1d9010ef          	jal	ra,60002f28 <vApplicationMallocFailedHook>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
60001554:	fe442783          	lw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
60001558:	00078513          	mv	a0,a5
6000155c:	03c12083          	lw	ra,60(sp)
60001560:	03812403          	lw	s0,56(sp)
60001564:	04010113          	addi	sp,sp,64
60001568:	00008067          	ret

6000156c <vPortFree>:
vPortFree():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
6000156c:	fd010113          	addi	sp,sp,-48
60001570:	02112623          	sw	ra,44(sp)
60001574:	02812423          	sw	s0,40(sp)
60001578:	03010413          	addi	s0,sp,48
6000157c:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
60001580:	fdc42783          	lw	a5,-36(s0)
60001584:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
60001588:	fdc42783          	lw	a5,-36(s0)
6000158c:	08078c63          	beqz	a5,60001624 <vPortFree+0xb8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
60001590:	00800793          	li	a5,8
60001594:	40f007b3          	neg	a5,a5
60001598:	fe842703          	lw	a4,-24(s0)
6000159c:	00f707b3          	add	a5,a4,a5
600015a0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
600015a4:	fe842783          	lw	a5,-24(s0)
600015a8:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
600015ac:	5a1000ef          	jal	ra,6000234c <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
600015b0:	fe442783          	lw	a5,-28(s0)
600015b4:	0047a783          	lw	a5,4(a5)
600015b8:	fef42023          	sw	a5,-32(s0)
600015bc:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
600015c0:	fef42623          	sw	a5,-20(s0)
600015c4:	0100006f          	j	600015d4 <vPortFree+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
600015c8:	fec42783          	lw	a5,-20(s0)
600015cc:	0007a783          	lw	a5,0(a5)
600015d0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
600015d4:	fec42783          	lw	a5,-20(s0)
600015d8:	0007a783          	lw	a5,0(a5)
600015dc:	0047a783          	lw	a5,4(a5)
600015e0:	fe042703          	lw	a4,-32(s0)
600015e4:	fee7e2e3          	bltu	a5,a4,600015c8 <vPortFree+0x5c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
600015e8:	fec42783          	lw	a5,-20(s0)
600015ec:	0007a703          	lw	a4,0(a5)
600015f0:	fe442783          	lw	a5,-28(s0)
600015f4:	00e7a023          	sw	a4,0(a5)
600015f8:	fec42783          	lw	a5,-20(s0)
600015fc:	fe442703          	lw	a4,-28(s0)
60001600:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
60001604:	fe442783          	lw	a5,-28(s0)
60001608:	0047a703          	lw	a4,4(a5)
6000160c:	800007b7          	lui	a5,0x80000
60001610:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4db4>
60001614:	00f70733          	add	a4,a4,a5
60001618:	800007b7          	lui	a5,0x80000
6000161c:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
60001620:	555000ef          	jal	ra,60002374 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
60001624:	00000013          	nop
60001628:	02c12083          	lw	ra,44(sp)
6000162c:	02812403          	lw	s0,40(sp)
60001630:	03010113          	addi	sp,sp,48
60001634:	00008067          	ret

60001638 <prvHeapInit>:
prvHeapInit():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
60001638:	fe010113          	addi	sp,sp,-32
6000163c:	00812e23          	sw	s0,28(sp)
60001640:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
60001644:	800007b7          	lui	a5,0x80000
60001648:	18478793          	addi	a5,a5,388 # 80000184 <__stack_top+0xfffe4f34>
6000164c:	ffc7f793          	andi	a5,a5,-4
60001650:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
60001654:	fec42703          	lw	a4,-20(s0)
60001658:	90e1a423          	sw	a4,-1784(gp) # 80000108 <xStart>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
6000165c:	90818793          	addi	a5,gp,-1784 # 80000108 <xStart>
60001660:	0007a223          	sw	zero,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
60001664:	91018793          	addi	a5,gp,-1776 # 80000110 <xEnd>
60001668:	00019737          	lui	a4,0x19
6000166c:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
60001670:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
60001674:	9001a823          	sw	zero,-1776(gp) # 80000110 <xEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
60001678:	fec42783          	lw	a5,-20(s0)
6000167c:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
60001680:	fe842783          	lw	a5,-24(s0)
60001684:	00019737          	lui	a4,0x19
60001688:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
6000168c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
60001690:	fe842783          	lw	a5,-24(s0)
60001694:	91018713          	addi	a4,gp,-1776 # 80000110 <xEnd>
60001698:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
6000169c:	00000013          	nop
600016a0:	01c12403          	lw	s0,28(sp)
600016a4:	02010113          	addi	sp,sp,32
600016a8:	00008067          	ret

600016ac <raise_soft_interrupt>:
raise_soft_interrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
600016ac:	fe010113          	addi	sp,sp,-32
600016b0:	00812e23          	sw	s0,28(sp)
600016b4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
600016b8:	f14027f3          	csrr	a5,mhartid
600016bc:	fef42623          	sw	a5,-20(s0)
600016c0:	fec42783          	lw	a5,-20(s0)
600016c4:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
600016c8:	304467f3          	csrrsi	a5,mie,8
600016cc:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
600016d0:	44000737          	lui	a4,0x44000
600016d4:	fe842783          	lw	a5,-24(s0)
600016d8:	00279793          	slli	a5,a5,0x2
600016dc:	00f707b3          	add	a5,a4,a5
600016e0:	00100713          	li	a4,1
600016e4:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:233
}
600016e8:	00000013          	nop
600016ec:	01c12403          	lw	s0,28(sp)
600016f0:	02010113          	addi	sp,sp,32
600016f4:	00008067          	ret

600016f8 <vPortEnterCritical>:
vPortEnterCritical():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
600016f8:	ff010113          	addi	sp,sp,-16
600016fc:	00812623          	sw	s0,12(sp)
60001700:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
60001704:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
60001708:	800007b7          	lui	a5,0x80000
6000170c:	0087a783          	lw	a5,8(a5) # 80000008 <__stack_top+0xfffe4db8>
60001710:	00178713          	addi	a4,a5,1
60001714:	800007b7          	lui	a5,0x80000
60001718:	00e7a423          	sw	a4,8(a5) # 80000008 <__stack_top+0xfffe4db8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
6000171c:	00000013          	nop
60001720:	00c12403          	lw	s0,12(sp)
60001724:	01010113          	addi	sp,sp,16
60001728:	00008067          	ret

6000172c <vPortExitCritical>:
vPortExitCritical():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
6000172c:	ff010113          	addi	sp,sp,-16
60001730:	00812623          	sw	s0,12(sp)
60001734:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
60001738:	800007b7          	lui	a5,0x80000
6000173c:	0087a783          	lw	a5,8(a5) # 80000008 <__stack_top+0xfffe4db8>
60001740:	fff78713          	addi	a4,a5,-1
60001744:	800007b7          	lui	a5,0x80000
60001748:	00e7a423          	sw	a4,8(a5) # 80000008 <__stack_top+0xfffe4db8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
6000174c:	800007b7          	lui	a5,0x80000
60001750:	0087a783          	lw	a5,8(a5) # 80000008 <__stack_top+0xfffe4db8>
60001754:	00079463          	bnez	a5,6000175c <vPortExitCritical+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
60001758:	30046073          	csrsi	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
6000175c:	00000013          	nop
60001760:	00c12403          	lw	s0,12(sp)
60001764:	01010113          	addi	sp,sp,16
60001768:	00008067          	ret

6000176c <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
6000176c:	fe010113          	addi	sp,sp,-32
60001770:	00812e23          	sw	s0,28(sp)
60001774:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
60001778:	80000637          	lui	a2,0x80000
6000177c:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
60001780:	00062603          	lw	a2,0(a2)
60001784:	fec42423          	sw	a2,-24(s0)
60001788:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
6000178c:	80000637          	lui	a2,0x80000
60001790:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
60001794:	00462603          	lw	a2,4(a2)
60001798:	00060693          	mv	a3,a2
6000179c:	00000713          	li	a4,0
600017a0:	00069813          	slli	a6,a3,0x0
600017a4:	00000793          	li	a5,0
600017a8:	fe842703          	lw	a4,-24(s0)
600017ac:	00f76733          	or	a4,a4,a5
600017b0:	fee42423          	sw	a4,-24(s0)
600017b4:	fec42703          	lw	a4,-20(s0)
600017b8:	010767b3          	or	a5,a4,a6
600017bc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
600017c0:	fe842683          	lw	a3,-24(s0)
600017c4:	fec42703          	lw	a4,-20(s0)
600017c8:	0000c5b7          	lui	a1,0xc
600017cc:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
600017d0:	00000613          	li	a2,0
600017d4:	00b687b3          	add	a5,a3,a1
600017d8:	00078513          	mv	a0,a5
600017dc:	00d53533          	sltu	a0,a0,a3
600017e0:	00c70833          	add	a6,a4,a2
600017e4:	01050733          	add	a4,a0,a6
600017e8:	00070813          	mv	a6,a4
600017ec:	fef42423          	sw	a5,-24(s0)
600017f0:	ff042623          	sw	a6,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
600017f4:	800007b7          	lui	a5,0x80000
600017f8:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
600017fc:	fe842703          	lw	a4,-24(s0)
60001800:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
60001804:	fec42783          	lw	a5,-20(s0)
60001808:	0007d313          	srli	t1,a5,0x0
6000180c:	00000393          	li	t2,0
60001810:	800007b7          	lui	a5,0x80000
60001814:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
60001818:	00030713          	mv	a4,t1
6000181c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
60001820:	08000793          	li	a5,128
60001824:	3047a073          	csrs	mie,a5
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
60001828:	00000013          	nop
6000182c:	01c12403          	lw	s0,28(sp)
60001830:	02010113          	addi	sp,sp,32
60001834:	00008067          	ret

60001838 <vPortSetupTimer>:
vPortSetupTimer():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
60001838:	fe010113          	addi	sp,sp,-32
6000183c:	00812e23          	sw	s0,28(sp)
60001840:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
60001844:	80000637          	lui	a2,0x80000
60001848:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
6000184c:	00062603          	lw	a2,0(a2)
60001850:	fec42423          	sw	a2,-24(s0)
60001854:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
60001858:	80000637          	lui	a2,0x80000
6000185c:	00c62603          	lw	a2,12(a2) # 8000000c <__stack_top+0xfffe4dbc>
60001860:	00462603          	lw	a2,4(a2)
60001864:	00060693          	mv	a3,a2
60001868:	00000713          	li	a4,0
6000186c:	00069813          	slli	a6,a3,0x0
60001870:	00000793          	li	a5,0
60001874:	fe842703          	lw	a4,-24(s0)
60001878:	00f76733          	or	a4,a4,a5
6000187c:	fee42423          	sw	a4,-24(s0)
60001880:	fec42703          	lw	a4,-20(s0)
60001884:	010767b3          	or	a5,a4,a6
60001888:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
6000188c:	fe842683          	lw	a3,-24(s0)
60001890:	fec42703          	lw	a4,-20(s0)
60001894:	0000c5b7          	lui	a1,0xc
60001898:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
6000189c:	00000613          	li	a2,0
600018a0:	00b687b3          	add	a5,a3,a1
600018a4:	00078513          	mv	a0,a5
600018a8:	00d53533          	sltu	a0,a0,a3
600018ac:	00c70833          	add	a6,a4,a2
600018b0:	01050733          	add	a4,a0,a6
600018b4:	00070813          	mv	a6,a4
600018b8:	fef42423          	sw	a5,-24(s0)
600018bc:	ff042623          	sw	a6,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
600018c0:	800007b7          	lui	a5,0x80000
600018c4:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
600018c8:	fe842703          	lw	a4,-24(s0)
600018cc:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
600018d0:	fec42783          	lw	a5,-20(s0)
600018d4:	0007d313          	srli	t1,a5,0x0
600018d8:	00000393          	li	t2,0
600018dc:	800007b7          	lui	a5,0x80000
600018e0:	0107a783          	lw	a5,16(a5) # 80000010 <__stack_top+0xfffe4dc0>
600018e4:	00030713          	mv	a4,t1
600018e8:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
600018ec:	08000793          	li	a5,128
600018f0:	3047a073          	csrs	mie,a5
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
600018f4:	00000013          	nop
600018f8:	01c12403          	lw	s0,28(sp)
600018fc:	02010113          	addi	sp,sp,32
60001900:	00008067          	ret

60001904 <prvTaskExitError>:
prvTaskExitError():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
60001904:	ff010113          	addi	sp,sp,-16
60001908:	00812623          	sw	s0,12(sp)
6000190c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
60001910:	800007b7          	lui	a5,0x80000
60001914:	0087a703          	lw	a4,8(a5) # 80000008 <__stack_top+0xfffe4db8>
60001918:	fff00793          	li	a5,-1
6000191c:	00f70663          	beq	a4,a5,60001928 <prvTaskExitError+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
60001920:	30047073          	csrci	mstatus,8
60001924:	0000006f          	j	60001924 <prvTaskExitError+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
60001928:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
6000192c:	0000006f          	j	6000192c <prvTaskExitError+0x28>

60001930 <pxPortInitialiseStack>:
pxPortInitialiseStack():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
60001930:	fe010113          	addi	sp,sp,-32
60001934:	00812e23          	sw	s0,28(sp)
60001938:	02010413          	addi	s0,sp,32
6000193c:	fea42623          	sw	a0,-20(s0)
60001940:	feb42423          	sw	a1,-24(s0)
60001944:	fec42223          	sw	a2,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
60001948:	fec42783          	lw	a5,-20(s0)
6000194c:	ffc78793          	addi	a5,a5,-4
60001950:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
60001954:	fe842703          	lw	a4,-24(s0)
60001958:	fec42783          	lw	a5,-20(s0)
6000195c:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
60001960:	fec42783          	lw	a5,-20(s0)
60001964:	fa878793          	addi	a5,a5,-88
60001968:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
6000196c:	fe442703          	lw	a4,-28(s0)
60001970:	fec42783          	lw	a5,-20(s0)
60001974:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
60001978:	fec42783          	lw	a5,-20(s0)
6000197c:	fe878793          	addi	a5,a5,-24
60001980:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
60001984:	00018793          	mv	a5,gp
60001988:	00078713          	mv	a4,a5
6000198c:	fec42783          	lw	a5,-20(s0)
60001990:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
60001994:	fec42783          	lw	a5,-20(s0)
60001998:	ff478793          	addi	a5,a5,-12
6000199c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
600019a0:	600027b7          	lui	a5,0x60002
600019a4:	90478713          	addi	a4,a5,-1788 # 60001904 <prvTaskExitError>
600019a8:	fec42783          	lw	a5,-20(s0)
600019ac:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233
	
	return pxTopOfStack;
600019b0:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
600019b4:	00078513          	mv	a0,a5
600019b8:	01c12403          	lw	s0,28(sp)
600019bc:	02010113          	addi	sp,sp,32
600019c0:	00008067          	ret

600019c4 <SysTick_Handler>:
SysTick_Handler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
600019c4:	ff010113          	addi	sp,sp,-16
600019c8:	00112623          	sw	ra,12(sp)
600019cc:	00812423          	sw	s0,8(sp)
600019d0:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
600019d4:	9201a283          	lw	t0,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
600019d8:	00c2a023          	sw	a2,0(t0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
600019dc:	d91ff0ef          	jal	ra,6000176c <prvSetNextTimerInterrupt>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
600019e0:	2f5000ef          	jal	ra,600024d4 <xTaskIncrementTick>
600019e4:	00050793          	mv	a5,a0
600019e8:	00078463          	beqz	a5,600019f0 <SysTick_Handler+0x2c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
600019ec:	4d5000ef          	jal	ra,600026c0 <vTaskSwitchContext>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
600019f0:	9201a103          	lw	sp,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
600019f4:	00012103          	lw	sp,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
600019f8:	07c12283          	lw	t0,124(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
600019fc:	34129073          	csrw	mepc,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
60001a00:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
60001a04:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
60001a08:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
60001a0c:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
60001a10:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
60001a14:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
60001a18:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
60001a1c:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
60001a20:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
60001a24:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
60001a28:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
60001a2c:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
60001a30:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
60001a34:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
60001a38:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
60001a3c:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
60001a40:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
60001a44:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
60001a48:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
60001a4c:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
60001a50:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
60001a54:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
60001a58:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
60001a5c:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
60001a60:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
60001a64:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
60001a68:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
60001a6c:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
60001a70:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
60001a74:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
60001a78:	30200073          	mret
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
60001a7c:	00000013          	nop
60001a80:	00c12083          	lw	ra,12(sp)
60001a84:	00812403          	lw	s0,8(sp)
60001a88:	01010113          	addi	sp,sp,16
60001a8c:	00008067          	ret

60001a90 <xPortStartScheduler>:
xPortStartScheduler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
60001a90:	ff010113          	addi	sp,sp,-16
60001a94:	00112623          	sw	ra,12(sp)
60001a98:	00812423          	sw	s0,8(sp)
60001a9c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
60001aa0:	d99ff0ef          	jal	ra,60001838 <vPortSetupTimer>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
60001aa4:	800007b7          	lui	a5,0x80000
60001aa8:	0007a423          	sw	zero,8(a5) # 80000008 <__stack_top+0xfffe4db8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
60001aac:	00100713          	li	a4,1
60001ab0:	90e1ae23          	sw	a4,-1764(gp) # 8000011c <g_startscheduler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
60001ab4:	959fe0ef          	jal	ra,6000040c <__enable_irq>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
60001ab8:	bf5ff0ef          	jal	ra,600016ac <raise_soft_interrupt>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
60001abc:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
60001ac0:	00078513          	mv	a0,a5
60001ac4:	00c12083          	lw	ra,12(sp)
60001ac8:	00812403          	lw	s0,8(sp)
60001acc:	01010113          	addi	sp,sp,16
60001ad0:	00008067          	ret

60001ad4 <Software_IRQHandler>:
Software_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
60001ad4:	ff010113          	addi	sp,sp,-16
60001ad8:	00112623          	sw	ra,12(sp)
60001adc:	00812423          	sw	s0,8(sp)
60001ae0:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
60001ae4:	91c1a703          	lw	a4,-1764(gp) # 8000011c <g_startscheduler>
60001ae8:	00100793          	li	a5,1
60001aec:	00f71863          	bne	a4,a5,60001afc <Software_IRQHandler+0x28>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
60001af0:	00200713          	li	a4,2
60001af4:	90e1ae23          	sw	a4,-1764(gp) # 8000011c <g_startscheduler>
60001af8:	0100006f          	j	60001b08 <Software_IRQHandler+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
60001afc:	9201a283          	lw	t0,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
60001b00:	00c2a023          	sw	a2,0(t0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
60001b04:	3bd000ef          	jal	ra,600026c0 <vTaskSwitchContext>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
60001b08:	9201a103          	lw	sp,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
		__asm volatile("lw	sp, 0x0(sp)");
60001b0c:	00012103          	lw	sp,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

		__asm volatile("lw	t0, 31 * 4(sp)");
60001b10:	07c12283          	lw	t0,124(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("csrw	mepc, t0");
60001b14:	34129073          	csrw	mepc,t0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	x1, 0x0(sp)");
60001b18:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("lw   x4, 3 * 4(sp)");
60001b1c:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
		__asm volatile("lw   x5, 4 * 4(sp)");
60001b20:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339
		__asm volatile("lw   x6, 5 * 4(sp)");
60001b24:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x7, 6 * 4(sp)");
60001b28:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x8, 7 * 4(sp)");
60001b2c:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x9, 8 * 4(sp)");
60001b30:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x10, 9 * 4(sp)");
60001b34:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x11, 10 * 4(sp)");
60001b38:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x12, 11 * 4(sp)");
60001b3c:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x13, 12 * 4(sp)");
60001b40:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x14, 13 * 4(sp)");
60001b44:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x15, 14 * 4(sp)");
60001b48:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x16, 15 * 4(sp)");
60001b4c:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x17, 16 * 4(sp)");
60001b50:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x18, 17 * 4(sp)");
60001b54:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x19, 18 * 4(sp)");
60001b58:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x20, 19 * 4(sp)");
60001b5c:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x21, 20 * 4(sp)");
60001b60:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x22, 21 * 4(sp)");
60001b64:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x23, 22 * 4(sp)");
60001b68:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x24, 23 * 4(sp)");
60001b6c:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x25, 24 * 4(sp)");
60001b70:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x26, 25 * 4(sp)");
60001b74:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x27, 26 * 4(sp)");
60001b78:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x28, 27 * 4(sp)");
60001b7c:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x29, 28 * 4(sp)");
60001b80:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x30, 29 * 4(sp)");
60001b84:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x31, 30 * 4(sp)");
60001b88:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366

		__asm volatile("addi	sp, sp, 4 * 32");
60001b8c:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370

		//PRCI->MSIP[0] = 0x00;

		__asm volatile("addi sp, sp, -1*4");
60001b90:	ffc10113          	addi	sp,sp,-4
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("sw t0, 0(sp)");
60001b94:	00512023          	sw	t0,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("li t0, 0x44000000");	// address of PRCI->MSIP[0]
60001b98:	440002b7          	lui	t0,0x44000
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("sw zero,0(t0)");
60001b9c:	0002a023          	sw	zero,0(t0) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw t0, 0(sp)");
60001ba0:	00012283          	lw	t0,0(sp)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("addi sp, sp, 1*4");
60001ba4:	00410113          	addi	sp,sp,4
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377

		__asm volatile("mret");
60001ba8:	30200073          	mret
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
	}
}
60001bac:	00000013          	nop
60001bb0:	00c12083          	lw	ra,12(sp)
60001bb4:	00812403          	lw	s0,8(sp)
60001bb8:	01010113          	addi	sp,sp,16
60001bbc:	00008067          	ret

60001bc0 <vPortYield>:
vPortYield():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382

void vPortYield( void )
{
60001bc0:	ff010113          	addi	sp,sp,-16
60001bc4:	00112623          	sw	ra,12(sp)
60001bc8:	00812423          	sw	s0,8(sp)
60001bcc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
	raise_soft_interrupt();
60001bd0:	addff0ef          	jal	ra,600016ac <raise_soft_interrupt>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
}
60001bd4:	00000013          	nop
60001bd8:	00c12083          	lw	ra,12(sp)
60001bdc:	00812403          	lw	s0,8(sp)
60001be0:	01010113          	addi	sp,sp,16
60001be4:	00008067          	ret

60001be8 <vListInitialise>:
vListInitialise():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
60001be8:	fe010113          	addi	sp,sp,-32
60001bec:	00812e23          	sw	s0,28(sp)
60001bf0:	02010413          	addi	s0,sp,32
60001bf4:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001bf8:	fec42783          	lw	a5,-20(s0)
60001bfc:	00878713          	addi	a4,a5,8
60001c00:	fec42783          	lw	a5,-20(s0)
60001c04:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
60001c08:	fec42783          	lw	a5,-20(s0)
60001c0c:	fff00713          	li	a4,-1
60001c10:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001c14:	fec42783          	lw	a5,-20(s0)
60001c18:	00878713          	addi	a4,a5,8
60001c1c:	fec42783          	lw	a5,-20(s0)
60001c20:	00e7a623          	sw	a4,12(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001c24:	fec42783          	lw	a5,-20(s0)
60001c28:	00878713          	addi	a4,a5,8
60001c2c:	fec42783          	lw	a5,-20(s0)
60001c30:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
60001c34:	fec42783          	lw	a5,-20(s0)
60001c38:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
60001c3c:	00000013          	nop
60001c40:	01c12403          	lw	s0,28(sp)
60001c44:	02010113          	addi	sp,sp,32
60001c48:	00008067          	ret

60001c4c <vListInitialiseItem>:
vListInitialiseItem():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
60001c4c:	fe010113          	addi	sp,sp,-32
60001c50:	00812e23          	sw	s0,28(sp)
60001c54:	02010413          	addi	s0,sp,32
60001c58:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
60001c5c:	fec42783          	lw	a5,-20(s0)
60001c60:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
60001c64:	00000013          	nop
60001c68:	01c12403          	lw	s0,28(sp)
60001c6c:	02010113          	addi	sp,sp,32
60001c70:	00008067          	ret

60001c74 <vListInsertEnd>:
vListInsertEnd():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
60001c74:	fd010113          	addi	sp,sp,-48
60001c78:	02812623          	sw	s0,44(sp)
60001c7c:	03010413          	addi	s0,sp,48
60001c80:	fca42e23          	sw	a0,-36(s0)
60001c84:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
60001c88:	fdc42783          	lw	a5,-36(s0)
60001c8c:	0047a783          	lw	a5,4(a5)
60001c90:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
60001c94:	fd842783          	lw	a5,-40(s0)
60001c98:	fec42703          	lw	a4,-20(s0)
60001c9c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
60001ca0:	fec42783          	lw	a5,-20(s0)
60001ca4:	0087a703          	lw	a4,8(a5)
60001ca8:	fd842783          	lw	a5,-40(s0)
60001cac:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
60001cb0:	fec42783          	lw	a5,-20(s0)
60001cb4:	0087a783          	lw	a5,8(a5)
60001cb8:	fd842703          	lw	a4,-40(s0)
60001cbc:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
60001cc0:	fec42783          	lw	a5,-20(s0)
60001cc4:	fd842703          	lw	a4,-40(s0)
60001cc8:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
60001ccc:	fd842783          	lw	a5,-40(s0)
60001cd0:	fdc42703          	lw	a4,-36(s0)
60001cd4:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
60001cd8:	fdc42783          	lw	a5,-36(s0)
60001cdc:	0007a783          	lw	a5,0(a5)
60001ce0:	00178713          	addi	a4,a5,1
60001ce4:	fdc42783          	lw	a5,-36(s0)
60001ce8:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:142
}
60001cec:	00000013          	nop
60001cf0:	02c12403          	lw	s0,44(sp)
60001cf4:	03010113          	addi	sp,sp,48
60001cf8:	00008067          	ret

60001cfc <vListInsert>:
vListInsert():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
60001cfc:	fd010113          	addi	sp,sp,-48
60001d00:	02812623          	sw	s0,44(sp)
60001d04:	03010413          	addi	s0,sp,48
60001d08:	fca42e23          	sw	a0,-36(s0)
60001d0c:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
60001d10:	fd842783          	lw	a5,-40(s0)
60001d14:	0007a783          	lw	a5,0(a5)
60001d18:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
60001d1c:	fe842703          	lw	a4,-24(s0)
60001d20:	fff00793          	li	a5,-1
60001d24:	00f71a63          	bne	a4,a5,60001d38 <vListInsert+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
60001d28:	fdc42783          	lw	a5,-36(s0)
60001d2c:	0107a783          	lw	a5,16(a5)
60001d30:	fef42623          	sw	a5,-20(s0)
60001d34:	0340006f          	j	60001d68 <vListInsert+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60001d38:	fdc42783          	lw	a5,-36(s0)
60001d3c:	00878793          	addi	a5,a5,8
60001d40:	fef42623          	sw	a5,-20(s0)
60001d44:	0100006f          	j	60001d54 <vListInsert+0x58>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:192 (discriminator 3)
60001d48:	fec42783          	lw	a5,-20(s0)
60001d4c:	0047a783          	lw	a5,4(a5)
60001d50:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:192 (discriminator 1)
60001d54:	fec42783          	lw	a5,-20(s0)
60001d58:	0047a783          	lw	a5,4(a5)
60001d5c:	0007a783          	lw	a5,0(a5)
60001d60:	fe842703          	lw	a4,-24(s0)
60001d64:	fef772e3          	bgeu	a4,a5,60001d48 <vListInsert+0x4c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
60001d68:	fec42783          	lw	a5,-20(s0)
60001d6c:	0047a703          	lw	a4,4(a5)
60001d70:	fd842783          	lw	a5,-40(s0)
60001d74:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
60001d78:	fd842783          	lw	a5,-40(s0)
60001d7c:	0047a783          	lw	a5,4(a5)
60001d80:	fd842703          	lw	a4,-40(s0)
60001d84:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
60001d88:	fd842783          	lw	a5,-40(s0)
60001d8c:	fec42703          	lw	a4,-20(s0)
60001d90:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
60001d94:	fec42783          	lw	a5,-20(s0)
60001d98:	fd842703          	lw	a4,-40(s0)
60001d9c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
60001da0:	fd842783          	lw	a5,-40(s0)
60001da4:	fdc42703          	lw	a4,-36(s0)
60001da8:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
60001dac:	fdc42783          	lw	a5,-36(s0)
60001db0:	0007a783          	lw	a5,0(a5)
60001db4:	00178713          	addi	a4,a5,1
60001db8:	fdc42783          	lw	a5,-36(s0)
60001dbc:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:209
}
60001dc0:	00000013          	nop
60001dc4:	02c12403          	lw	s0,44(sp)
60001dc8:	03010113          	addi	sp,sp,48
60001dcc:	00008067          	ret

60001dd0 <uxListRemove>:
uxListRemove():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
60001dd0:	fd010113          	addi	sp,sp,-48
60001dd4:	02812623          	sw	s0,44(sp)
60001dd8:	03010413          	addi	s0,sp,48
60001ddc:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
60001de0:	fdc42783          	lw	a5,-36(s0)
60001de4:	0107a783          	lw	a5,16(a5)
60001de8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
60001dec:	fdc42783          	lw	a5,-36(s0)
60001df0:	0047a783          	lw	a5,4(a5)
60001df4:	fdc42703          	lw	a4,-36(s0)
60001df8:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f00008>
60001dfc:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
60001e00:	fdc42783          	lw	a5,-36(s0)
60001e04:	0087a783          	lw	a5,8(a5)
60001e08:	fdc42703          	lw	a4,-36(s0)
60001e0c:	00472703          	lw	a4,4(a4)
60001e10:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
60001e14:	fec42783          	lw	a5,-20(s0)
60001e18:	0047a783          	lw	a5,4(a5)
60001e1c:	fdc42703          	lw	a4,-36(s0)
60001e20:	00f71a63          	bne	a4,a5,60001e34 <uxListRemove+0x64>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
60001e24:	fdc42783          	lw	a5,-36(s0)
60001e28:	0087a703          	lw	a4,8(a5)
60001e2c:	fec42783          	lw	a5,-20(s0)
60001e30:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
60001e34:	fdc42783          	lw	a5,-36(s0)
60001e38:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
60001e3c:	fec42783          	lw	a5,-20(s0)
60001e40:	0007a783          	lw	a5,0(a5)
60001e44:	fff78713          	addi	a4,a5,-1
60001e48:	fec42783          	lw	a5,-20(s0)
60001e4c:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
60001e50:	fec42783          	lw	a5,-20(s0)
60001e54:	0007a783          	lw	a5,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/list.c:238
}
60001e58:	00078513          	mv	a0,a5
60001e5c:	02c12403          	lw	s0,44(sp)
60001e60:	03010113          	addi	sp,sp,48
60001e64:	00008067          	ret

60001e68 <memcpy>:
memcpy():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:6
#include <string.h>
#include <stdint.h>
#include <ctype.h>

void* memcpy(void* dest, const void* src, size_t len)
{
60001e68:	fd010113          	addi	sp,sp,-48
60001e6c:	02812623          	sw	s0,44(sp)
60001e70:	03010413          	addi	s0,sp,48
60001e74:	fca42e23          	sw	a0,-36(s0)
60001e78:	fcb42c23          	sw	a1,-40(s0)
60001e7c:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:7
  const char* s = src;
60001e80:	fd842783          	lw	a5,-40(s0)
60001e84:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:8
  char *d = dest;
60001e88:	fdc42783          	lw	a5,-36(s0)
60001e8c:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:10

  if ((((uintptr_t)dest | (uintptr_t)src) & (sizeof(uintptr_t)-1)) == 0) {
60001e90:	fdc42703          	lw	a4,-36(s0)
60001e94:	fd842783          	lw	a5,-40(s0)
60001e98:	00f767b3          	or	a5,a4,a5
60001e9c:	0037f793          	andi	a5,a5,3
60001ea0:	06079663          	bnez	a5,60001f0c <memcpy+0xa4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:11
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
60001ea4:	02c0006f          	j	60001ed0 <memcpy+0x68>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:12
      *(uintptr_t*)d = *(const uintptr_t*)s;
60001ea8:	fec42783          	lw	a5,-20(s0)
60001eac:	0007a703          	lw	a4,0(a5)
60001eb0:	fe842783          	lw	a5,-24(s0)
60001eb4:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:13
      d += sizeof(uintptr_t);
60001eb8:	fe842783          	lw	a5,-24(s0)
60001ebc:	00478793          	addi	a5,a5,4
60001ec0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:14
      s += sizeof(uintptr_t);
60001ec4:	fec42783          	lw	a5,-20(s0)
60001ec8:	00478793          	addi	a5,a5,4
60001ecc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:11
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
60001ed0:	fd442783          	lw	a5,-44(s0)
60001ed4:	ffd78793          	addi	a5,a5,-3
60001ed8:	fdc42703          	lw	a4,-36(s0)
60001edc:	00f707b3          	add	a5,a4,a5
60001ee0:	fe842703          	lw	a4,-24(s0)
60001ee4:	fcf762e3          	bltu	a4,a5,60001ea8 <memcpy+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:18
    }
  }

  while (d < (char*)(dest + len))
60001ee8:	0240006f          	j	60001f0c <memcpy+0xa4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:19
    *d++ = *s++;
60001eec:	fec42703          	lw	a4,-20(s0)
60001ef0:	00170793          	addi	a5,a4,1
60001ef4:	fef42623          	sw	a5,-20(s0)
60001ef8:	fe842783          	lw	a5,-24(s0)
60001efc:	00178693          	addi	a3,a5,1
60001f00:	fed42423          	sw	a3,-24(s0)
60001f04:	00070703          	lb	a4,0(a4)
60001f08:	00e78023          	sb	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:18
  while (d < (char*)(dest + len))
60001f0c:	fdc42703          	lw	a4,-36(s0)
60001f10:	fd442783          	lw	a5,-44(s0)
60001f14:	00f707b3          	add	a5,a4,a5
60001f18:	fe842703          	lw	a4,-24(s0)
60001f1c:	fcf768e3          	bltu	a4,a5,60001eec <memcpy+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:21

  return dest;
60001f20:	fdc42783          	lw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:22
}
60001f24:	00078513          	mv	a0,a5
60001f28:	02c12403          	lw	s0,44(sp)
60001f2c:	03010113          	addi	sp,sp,48
60001f30:	00008067          	ret

60001f34 <memset>:
memset():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:25

void* memset(void* dest, int byte, size_t len)
{
60001f34:	fd010113          	addi	sp,sp,-48
60001f38:	02812623          	sw	s0,44(sp)
60001f3c:	03010413          	addi	s0,sp,48
60001f40:	fca42e23          	sw	a0,-36(s0)
60001f44:	fcb42c23          	sw	a1,-40(s0)
60001f48:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
60001f4c:	fdc42703          	lw	a4,-36(s0)
60001f50:	fd442783          	lw	a5,-44(s0)
60001f54:	00f767b3          	or	a5,a4,a5
60001f58:	0037f793          	andi	a5,a5,3
60001f5c:	06079863          	bnez	a5,60001fcc <memset+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
60001f60:	fd842783          	lw	a5,-40(s0)
60001f64:	0ff7f793          	andi	a5,a5,255
60001f68:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:28
    word |= word << 8;
60001f6c:	fe442783          	lw	a5,-28(s0)
60001f70:	00879793          	slli	a5,a5,0x8
60001f74:	fe442703          	lw	a4,-28(s0)
60001f78:	00f767b3          	or	a5,a4,a5
60001f7c:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:29
    word |= word << 16;
60001f80:	fe442783          	lw	a5,-28(s0)
60001f84:	01079793          	slli	a5,a5,0x10
60001f88:	fe442703          	lw	a4,-28(s0)
60001f8c:	00f767b3          	or	a5,a4,a5
60001f90:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
60001f94:	fdc42783          	lw	a5,-36(s0)
60001f98:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60001f9c:	0180006f          	j	60001fb4 <memset+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:34
      *d++ = word;
60001fa0:	fec42783          	lw	a5,-20(s0)
60001fa4:	00478713          	addi	a4,a5,4
60001fa8:	fee42623          	sw	a4,-20(s0)
60001fac:	fe442703          	lw	a4,-28(s0)
60001fb0:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60001fb4:	fdc42703          	lw	a4,-36(s0)
60001fb8:	fd442783          	lw	a5,-44(s0)
60001fbc:	00f707b3          	add	a5,a4,a5
60001fc0:	fec42703          	lw	a4,-20(s0)
60001fc4:	fcf76ee3          	bltu	a4,a5,60001fa0 <memset+0x6c>
60001fc8:	0400006f          	j	60002008 <memset+0xd4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
60001fcc:	fdc42783          	lw	a5,-36(s0)
60001fd0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60001fd4:	0200006f          	j	60001ff4 <memset+0xc0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:38
      *d++ = byte;
60001fd8:	fe842783          	lw	a5,-24(s0)
60001fdc:	00178713          	addi	a4,a5,1
60001fe0:	fee42423          	sw	a4,-24(s0)
60001fe4:	fd842703          	lw	a4,-40(s0)
60001fe8:	01871713          	slli	a4,a4,0x18
60001fec:	41875713          	srai	a4,a4,0x18
60001ff0:	00e78023          	sb	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60001ff4:	fdc42703          	lw	a4,-36(s0)
60001ff8:	fd442783          	lw	a5,-44(s0)
60001ffc:	00f707b3          	add	a5,a4,a5
60002000:	fe842703          	lw	a4,-24(s0)
60002004:	fcf76ae3          	bltu	a4,a5,60001fd8 <memset+0xa4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:40
  }
  return dest;
60002008:	fdc42783          	lw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/string.c:41
}
6000200c:	00078513          	mv	a0,a5
60002010:	02c12403          	lw	s0,44(sp)
60002014:	03010113          	addi	sp,sp,48
60002018:	00008067          	ret

6000201c <xTaskGenericCreate>:
xTaskGenericCreate():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
6000201c:	fc010113          	addi	sp,sp,-64
60002020:	02112e23          	sw	ra,60(sp)
60002024:	02812c23          	sw	s0,56(sp)
60002028:	04010413          	addi	s0,sp,64
6000202c:	fca42e23          	sw	a0,-36(s0)
60002030:	fcb42c23          	sw	a1,-40(s0)
60002034:	fcd42823          	sw	a3,-48(s0)
60002038:	fce42623          	sw	a4,-52(s0)
6000203c:	fcf42423          	sw	a5,-56(s0)
60002040:	fd042223          	sw	a6,-60(s0)
60002044:	fd142023          	sw	a7,-64(s0)
60002048:	00060793          	mv	a5,a2
6000204c:	fcf41b23          	sh	a5,-42(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
60002050:	fdc42783          	lw	a5,-36(s0)
60002054:	00079663          	bnez	a5,60002060 <xTaskGenericCreate+0x44>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
60002058:	30047073          	csrci	mstatus,8
6000205c:	0000006f          	j	6000205c <xTaskGenericCreate+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
60002060:	fcc42703          	lw	a4,-52(s0)
60002064:	00400793          	li	a5,4
60002068:	00e7f663          	bgeu	a5,a4,60002074 <xTaskGenericCreate+0x58>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
6000206c:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
60002070:	0000006f          	j	60002070 <xTaskGenericCreate+0x54>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
60002074:	fd645783          	lhu	a5,-42(s0)
60002078:	fc442583          	lw	a1,-60(s0)
6000207c:	00078513          	mv	a0,a5
60002080:	281000ef          	jal	ra,60002b00 <prvAllocateTCBAndStack>
60002084:	fea42423          	sw	a0,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
60002088:	fe842783          	lw	a5,-24(s0)
6000208c:	16078263          	beqz	a5,600021f0 <xTaskGenericCreate+0x1d4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
60002090:	fe842783          	lw	a5,-24(s0)
60002094:	0307a703          	lw	a4,48(a5)
60002098:	fd645683          	lhu	a3,-42(s0)
6000209c:	400007b7          	lui	a5,0x40000
600020a0:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3fefffff>
600020a4:	00f687b3          	add	a5,a3,a5
600020a8:	00279793          	slli	a5,a5,0x2
600020ac:	00f707b3          	add	a5,a4,a5
600020b0:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
600020b4:	fe442783          	lw	a5,-28(s0)
600020b8:	ffc7f793          	andi	a5,a5,-4
600020bc:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
600020c0:	fe442783          	lw	a5,-28(s0)
600020c4:	0037f793          	andi	a5,a5,3
600020c8:	00078663          	beqz	a5,600020d4 <xTaskGenericCreate+0xb8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
600020cc:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
600020d0:	0000006f          	j	600020d0 <xTaskGenericCreate+0xb4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
600020d4:	fd645783          	lhu	a5,-42(s0)
600020d8:	00078713          	mv	a4,a5
600020dc:	fc042683          	lw	a3,-64(s0)
600020e0:	fcc42603          	lw	a2,-52(s0)
600020e4:	fd842583          	lw	a1,-40(s0)
600020e8:	fe842503          	lw	a0,-24(s0)
600020ec:	6f4000ef          	jal	ra,600027e0 <prvInitialiseTCBVariables>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
600020f0:	fd042603          	lw	a2,-48(s0)
600020f4:	fdc42583          	lw	a1,-36(s0)
600020f8:	fe442503          	lw	a0,-28(s0)
600020fc:	835ff0ef          	jal	ra,60001930 <pxPortInitialiseStack>
60002100:	00050713          	mv	a4,a0
60002104:	fe842783          	lw	a5,-24(s0)
60002108:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
6000210c:	fc842783          	lw	a5,-56(s0)
60002110:	00078863          	beqz	a5,60002120 <xTaskGenericCreate+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
60002114:	fc842783          	lw	a5,-56(s0)
60002118:	fe842703          	lw	a4,-24(s0)
6000211c:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
60002120:	dd8ff0ef          	jal	ra,600016f8 <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
60002124:	9301a783          	lw	a5,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
60002128:	00178713          	addi	a4,a5,1
6000212c:	92e1a823          	sw	a4,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
60002130:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002134:	02079063          	bnez	a5,60002154 <xTaskGenericCreate+0x138>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
60002138:	fe842703          	lw	a4,-24(s0)
6000213c:	92e1a023          	sw	a4,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
60002140:	9301a703          	lw	a4,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
60002144:	00100793          	li	a5,1
60002148:	02f71663          	bne	a4,a5,60002174 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
6000214c:	7cc000ef          	jal	ra,60002918 <prvInitialiseTaskLists>
60002150:	0240006f          	j	60002174 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
60002154:	93c1a783          	lw	a5,-1732(gp) # 8000013c <xSchedulerRunning>
60002158:	00079e63          	bnez	a5,60002174 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
6000215c:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002160:	02c7a783          	lw	a5,44(a5)
60002164:	fcc42703          	lw	a4,-52(s0)
60002168:	00f76663          	bltu	a4,a5,60002174 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
6000216c:	fe842703          	lw	a4,-24(s0)
60002170:	92e1a023          	sw	a4,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
60002174:	94c1a783          	lw	a5,-1716(gp) # 8000014c <uxTaskNumber>
60002178:	00178713          	addi	a4,a5,1
6000217c:	94e1a623          	sw	a4,-1716(gp) # 8000014c <uxTaskNumber>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
60002180:	94c1a703          	lw	a4,-1716(gp) # 8000014c <uxTaskNumber>
60002184:	fe842783          	lw	a5,-24(s0)
60002188:	04e7a423          	sw	a4,72(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
6000218c:	fe842783          	lw	a5,-24(s0)
60002190:	02c7a703          	lw	a4,44(a5)
60002194:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
60002198:	00e7f863          	bgeu	a5,a4,600021a8 <xTaskGenericCreate+0x18c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
6000219c:	fe842783          	lw	a5,-24(s0)
600021a0:	02c7a703          	lw	a4,44(a5)
600021a4:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
600021a8:	fe842783          	lw	a5,-24(s0)
600021ac:	02c7a703          	lw	a4,44(a5)
600021b0:	00070793          	mv	a5,a4
600021b4:	00279793          	slli	a5,a5,0x2
600021b8:	00e787b3          	add	a5,a5,a4
600021bc:	00279793          	slli	a5,a5,0x2
600021c0:	80019737          	lui	a4,0x80019
600021c4:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
600021c8:	00e78733          	add	a4,a5,a4
600021cc:	fe842783          	lw	a5,-24(s0)
600021d0:	00478793          	addi	a5,a5,4
600021d4:	00078593          	mv	a1,a5
600021d8:	00070513          	mv	a0,a4
600021dc:	a99ff0ef          	jal	ra,60001c74 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
600021e0:	00100793          	li	a5,1
600021e4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
600021e8:	d44ff0ef          	jal	ra,6000172c <vPortExitCritical>
600021ec:	00c0006f          	j	600021f8 <xTaskGenericCreate+0x1dc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
600021f0:	fff00793          	li	a5,-1
600021f4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
600021f8:	fec42703          	lw	a4,-20(s0)
600021fc:	00100793          	li	a5,1
60002200:	02f71063          	bne	a4,a5,60002220 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
60002204:	93c1a783          	lw	a5,-1732(gp) # 8000013c <xSchedulerRunning>
60002208:	00078c63          	beqz	a5,60002220 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
6000220c:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002210:	02c7a783          	lw	a5,44(a5)
60002214:	fcc42703          	lw	a4,-52(s0)
60002218:	00e7f463          	bgeu	a5,a4,60002220 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
6000221c:	9a5ff0ef          	jal	ra,60001bc0 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
60002220:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:737
}
60002224:	00078513          	mv	a0,a5
60002228:	03c12083          	lw	ra,60(sp)
6000222c:	03812403          	lw	s0,56(sp)
60002230:	04010113          	addi	sp,sp,64
60002234:	00008067          	ret

60002238 <vTaskDelay>:
vTaskDelay():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
60002238:	fd010113          	addi	sp,sp,-48
6000223c:	02112623          	sw	ra,44(sp)
60002240:	02812423          	sw	s0,40(sp)
60002244:	03010413          	addi	s0,sp,48
60002248:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
6000224c:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
60002250:	fdc42783          	lw	a5,-36(s0)
60002254:	04078463          	beqz	a5,6000229c <vTaskDelay+0x64>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
60002258:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
6000225c:	00078663          	beqz	a5,60002268 <vTaskDelay+0x30>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
60002260:	30047073          	csrci	mstatus,8
60002264:	0000006f          	j	60002264 <vTaskDelay+0x2c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
60002268:	0e4000ef          	jal	ra,6000234c <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
6000226c:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
60002270:	fdc42703          	lw	a4,-36(s0)
60002274:	00f707b3          	add	a5,a4,a5
60002278:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
6000227c:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002280:	00478793          	addi	a5,a5,4
60002284:	00078513          	mv	a0,a5
60002288:	b49ff0ef          	jal	ra,60001dd0 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
6000228c:	fe842503          	lw	a0,-24(s0)
60002290:	7e8000ef          	jal	ra,60002a78 <prvAddCurrentTaskToDelayedList>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
60002294:	0e0000ef          	jal	ra,60002374 <xTaskResumeAll>
60002298:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
6000229c:	fec42783          	lw	a5,-20(s0)
600022a0:	00079463          	bnez	a5,600022a8 <vTaskDelay+0x70>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
600022a4:	91dff0ef          	jal	ra,60001bc0 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
600022a8:	00000013          	nop
600022ac:	02c12083          	lw	ra,44(sp)
600022b0:	02812403          	lw	s0,40(sp)
600022b4:	03010113          	addi	sp,sp,48
600022b8:	00008067          	ret

600022bc <vTaskStartScheduler>:
vTaskStartScheduler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
600022bc:	fe010113          	addi	sp,sp,-32
600022c0:	00112e23          	sw	ra,28(sp)
600022c4:	00812c23          	sw	s0,24(sp)
600022c8:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
600022cc:	00000893          	li	a7,0
600022d0:	00000813          	li	a6,0
600022d4:	00000793          	li	a5,0
600022d8:	00000713          	li	a4,0
600022dc:	00000693          	li	a3,0
600022e0:	40000613          	li	a2,1024
600022e4:	600045b7          	lui	a1,0x60004
600022e8:	ed858593          	addi	a1,a1,-296 # 60003ed8 <_malloc_usable_size_r+0x2c>
600022ec:	60002537          	lui	a0,0x60002
600022f0:	7ac50513          	addi	a0,a0,1964 # 600027ac <prvIdleTask>
600022f4:	d29ff0ef          	jal	ra,6000201c <xTaskGenericCreate>
600022f8:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
600022fc:	fec42703          	lw	a4,-20(s0)
60002300:	00100793          	li	a5,1
60002304:	02f71263          	bne	a4,a5,60002328 <vTaskStartScheduler+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
60002308:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
6000230c:	fff00713          	li	a4,-1
60002310:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
60002314:	00100713          	li	a4,1
60002318:	92e1ae23          	sw	a4,-1732(gp) # 8000013c <xSchedulerRunning>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
6000231c:	9201aa23          	sw	zero,-1740(gp) # 80000134 <xTickCount>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
60002320:	f70ff0ef          	jal	ra,60001a90 <xPortStartScheduler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
60002324:	0140006f          	j	60002338 <vTaskStartScheduler+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
60002328:	fec42783          	lw	a5,-20(s0)
6000232c:	00079663          	bnez	a5,60002338 <vTaskStartScheduler+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
60002330:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
60002334:	0000006f          	j	60002334 <vTaskStartScheduler+0x78>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1617
}
60002338:	00000013          	nop
6000233c:	01c12083          	lw	ra,28(sp)
60002340:	01812403          	lw	s0,24(sp)
60002344:	02010113          	addi	sp,sp,32
60002348:	00008067          	ret

6000234c <vTaskSuspendAll>:
vTaskSuspendAll():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
6000234c:	ff010113          	addi	sp,sp,-16
60002350:	00812623          	sw	s0,12(sp)
60002354:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
60002358:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
6000235c:	00178713          	addi	a4,a5,1
60002360:	94e1aa23          	sw	a4,-1708(gp) # 80000154 <uxSchedulerSuspended>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1638
}
60002364:	00000013          	nop
60002368:	00c12403          	lw	s0,12(sp)
6000236c:	01010113          	addi	sp,sp,16
60002370:	00008067          	ret

60002374 <xTaskResumeAll>:
xTaskResumeAll():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
60002374:	fe010113          	addi	sp,sp,-32
60002378:	00112e23          	sw	ra,28(sp)
6000237c:	00812c23          	sw	s0,24(sp)
60002380:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
60002384:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
60002388:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
6000238c:	00079663          	bnez	a5,60002398 <xTaskResumeAll+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
60002390:	30047073          	csrci	mstatus,8
60002394:	0000006f          	j	60002394 <xTaskResumeAll+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
60002398:	b60ff0ef          	jal	ra,600016f8 <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
6000239c:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
600023a0:	fff78713          	addi	a4,a5,-1
600023a4:	94e1aa23          	sw	a4,-1708(gp) # 80000154 <uxSchedulerSuspended>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
600023a8:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
600023ac:	10079663          	bnez	a5,600024b8 <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
600023b0:	9301a783          	lw	a5,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
600023b4:	10078263          	beqz	a5,600024b8 <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
600023b8:	0a80006f          	j	60002460 <xTaskResumeAll+0xec>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
600023bc:	800197b7          	lui	a5,0x80019
600023c0:	20c78793          	addi	a5,a5,524 # 8001920c <__stack_top+0xffffdfbc>
600023c4:	00c7a783          	lw	a5,12(a5)
600023c8:	00c7a783          	lw	a5,12(a5)
600023cc:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
600023d0:	fe842783          	lw	a5,-24(s0)
600023d4:	01878793          	addi	a5,a5,24
600023d8:	00078513          	mv	a0,a5
600023dc:	9f5ff0ef          	jal	ra,60001dd0 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
600023e0:	fe842783          	lw	a5,-24(s0)
600023e4:	00478793          	addi	a5,a5,4
600023e8:	00078513          	mv	a0,a5
600023ec:	9e5ff0ef          	jal	ra,60001dd0 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
600023f0:	fe842783          	lw	a5,-24(s0)
600023f4:	02c7a703          	lw	a4,44(a5)
600023f8:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
600023fc:	00e7f863          	bgeu	a5,a4,6000240c <xTaskResumeAll+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
60002400:	fe842783          	lw	a5,-24(s0)
60002404:	02c7a703          	lw	a4,44(a5)
60002408:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
6000240c:	fe842783          	lw	a5,-24(s0)
60002410:	02c7a703          	lw	a4,44(a5)
60002414:	00070793          	mv	a5,a4
60002418:	00279793          	slli	a5,a5,0x2
6000241c:	00e787b3          	add	a5,a5,a4
60002420:	00279793          	slli	a5,a5,0x2
60002424:	80019737          	lui	a4,0x80019
60002428:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
6000242c:	00e78733          	add	a4,a5,a4
60002430:	fe842783          	lw	a5,-24(s0)
60002434:	00478793          	addi	a5,a5,4
60002438:	00078593          	mv	a1,a5
6000243c:	00070513          	mv	a0,a4
60002440:	835ff0ef          	jal	ra,60001c74 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
60002444:	fe842783          	lw	a5,-24(s0)
60002448:	02c7a703          	lw	a4,44(a5)
6000244c:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002450:	02c7a783          	lw	a5,44(a5)
60002454:	00f76663          	bltu	a4,a5,60002460 <xTaskResumeAll+0xec>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
60002458:	00100713          	li	a4,1
6000245c:	94e1a223          	sw	a4,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
60002460:	800197b7          	lui	a5,0x80019
60002464:	20c7a783          	lw	a5,524(a5) # 8001920c <__stack_top+0xffffdfbc>
60002468:	f4079ae3          	bnez	a5,600023bc <xTaskResumeAll+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
6000246c:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
60002470:	02078863          	beqz	a5,600024a0 <xTaskResumeAll+0x12c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
60002474:	0240006f          	j	60002498 <xTaskResumeAll+0x124>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
60002478:	05c000ef          	jal	ra,600024d4 <xTaskIncrementTick>
6000247c:	00050793          	mv	a5,a0
60002480:	00078663          	beqz	a5,6000248c <xTaskResumeAll+0x118>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
60002484:	00100713          	li	a4,1
60002488:	94e1a223          	sw	a4,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
6000248c:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
60002490:	fff78713          	addi	a4,a5,-1
60002494:	94e1a023          	sw	a4,-1728(gp) # 80000140 <uxPendedTicks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
60002498:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
6000249c:	fc079ee3          	bnez	a5,60002478 <xTaskResumeAll+0x104>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
600024a0:	9441a703          	lw	a4,-1724(gp) # 80000144 <xYieldPending>
600024a4:	00100793          	li	a5,1
600024a8:	00f71863          	bne	a4,a5,600024b8 <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
600024ac:	00100793          	li	a5,1
600024b0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
600024b4:	f0cff0ef          	jal	ra,60001bc0 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
600024b8:	a74ff0ef          	jal	ra,6000172c <vPortExitCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
600024bc:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1759
}
600024c0:	00078513          	mv	a0,a5
600024c4:	01c12083          	lw	ra,28(sp)
600024c8:	01812403          	lw	s0,24(sp)
600024cc:	02010113          	addi	sp,sp,32
600024d0:	00008067          	ret

600024d4 <xTaskIncrementTick>:
xTaskIncrementTick():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
600024d4:	fd010113          	addi	sp,sp,-48
600024d8:	02112623          	sw	ra,44(sp)
600024dc:	02812423          	sw	s0,40(sp)
600024e0:	03010413          	addi	s0,sp,48
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
600024e4:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
600024e8:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
600024ec:	1a079063          	bnez	a5,6000268c <xTaskIncrementTick+0x1b8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
600024f0:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
600024f4:	00178713          	addi	a4,a5,1
600024f8:	92e1aa23          	sw	a4,-1740(gp) # 80000134 <xTickCount>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
600024fc:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
60002500:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
60002504:	fe842783          	lw	a5,-24(s0)
60002508:	04079063          	bnez	a5,60002548 <xTaskIncrementTick+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
6000250c:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002510:	0007a783          	lw	a5,0(a5)
60002514:	00078663          	beqz	a5,60002520 <xTaskIncrementTick+0x4c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
60002518:	30047073          	csrci	mstatus,8
6000251c:	0000006f          	j	6000251c <xTaskIncrementTick+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
60002520:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002524:	fef42223          	sw	a5,-28(s0)
60002528:	9281a703          	lw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
6000252c:	92e1a223          	sw	a4,-1756(gp) # 80000124 <pxDelayedTaskList>
60002530:	fe442703          	lw	a4,-28(s0)
60002534:	92e1a423          	sw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
60002538:	9481a783          	lw	a5,-1720(gp) # 80000148 <xNumOfOverflows>
6000253c:	00178713          	addi	a4,a5,1
60002540:	94e1a423          	sw	a4,-1720(gp) # 80000148 <xNumOfOverflows>
60002544:	6bc000ef          	jal	ra,60002c00 <prvResetNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
60002548:	9501a783          	lw	a5,-1712(gp) # 80000150 <xNextTaskUnblockTime>
6000254c:	fe842703          	lw	a4,-24(s0)
60002550:	10f76063          	bltu	a4,a5,60002650 <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60002554:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002558:	0007a783          	lw	a5,0(a5)
6000255c:	00079663          	bnez	a5,60002568 <xTaskIncrementTick+0x94>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
60002560:	00100793          	li	a5,1
60002564:	0080006f          	j	6000256c <xTaskIncrementTick+0x98>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
60002568:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
6000256c:	00078863          	beqz	a5,6000257c <xTaskIncrementTick+0xa8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
60002570:	fff00713          	li	a4,-1
60002574:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1983
						break;
60002578:	0d80006f          	j	60002650 <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
6000257c:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002580:	00c7a783          	lw	a5,12(a5)
60002584:	00c7a783          	lw	a5,12(a5)
60002588:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
6000258c:	fe042783          	lw	a5,-32(s0)
60002590:	0047a783          	lw	a5,4(a5)
60002594:	fcf42e23          	sw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
60002598:	fe842703          	lw	a4,-24(s0)
6000259c:	fdc42783          	lw	a5,-36(s0)
600025a0:	00f77863          	bgeu	a4,a5,600025b0 <xTaskIncrementTick+0xdc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
600025a4:	fdc42703          	lw	a4,-36(s0)
600025a8:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2002
							break;
600025ac:	0a40006f          	j	60002650 <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
600025b0:	fe042783          	lw	a5,-32(s0)
600025b4:	00478793          	addi	a5,a5,4
600025b8:	00078513          	mv	a0,a5
600025bc:	815ff0ef          	jal	ra,60001dd0 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
600025c0:	fe042783          	lw	a5,-32(s0)
600025c4:	0287a783          	lw	a5,40(a5)
600025c8:	00078a63          	beqz	a5,600025dc <xTaskIncrementTick+0x108>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
600025cc:	fe042783          	lw	a5,-32(s0)
600025d0:	01878793          	addi	a5,a5,24
600025d4:	00078513          	mv	a0,a5
600025d8:	ff8ff0ef          	jal	ra,60001dd0 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
600025dc:	fe042783          	lw	a5,-32(s0)
600025e0:	02c7a703          	lw	a4,44(a5)
600025e4:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
600025e8:	00e7f863          	bgeu	a5,a4,600025f8 <xTaskIncrementTick+0x124>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
600025ec:	fe042783          	lw	a5,-32(s0)
600025f0:	02c7a703          	lw	a4,44(a5)
600025f4:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
600025f8:	fe042783          	lw	a5,-32(s0)
600025fc:	02c7a703          	lw	a4,44(a5)
60002600:	00070793          	mv	a5,a4
60002604:	00279793          	slli	a5,a5,0x2
60002608:	00e787b3          	add	a5,a5,a4
6000260c:	00279793          	slli	a5,a5,0x2
60002610:	80019737          	lui	a4,0x80019
60002614:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
60002618:	00e78733          	add	a4,a5,a4
6000261c:	fe042783          	lw	a5,-32(s0)
60002620:	00478793          	addi	a5,a5,4
60002624:	00078593          	mv	a1,a5
60002628:	00070513          	mv	a0,a4
6000262c:	e48ff0ef          	jal	ra,60001c74 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
60002630:	fe042783          	lw	a5,-32(s0)
60002634:	02c7a703          	lw	a4,44(a5)
60002638:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
6000263c:	02c7a783          	lw	a5,44(a5)
60002640:	f0f76ae3          	bltu	a4,a5,60002554 <xTaskIncrementTick+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
60002644:	00100793          	li	a5,1
60002648:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
6000264c:	f09ff06f          	j	60002554 <xTaskIncrementTick+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
60002650:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002654:	02c7a703          	lw	a4,44(a5)
60002658:	800196b7          	lui	a3,0x80019
6000265c:	00070793          	mv	a5,a4
60002660:	00279793          	slli	a5,a5,0x2
60002664:	00e787b3          	add	a5,a5,a4
60002668:	00279793          	slli	a5,a5,0x2
6000266c:	18068713          	addi	a4,a3,384 # 80019180 <__stack_top+0xffffdf30>
60002670:	00e787b3          	add	a5,a5,a4
60002674:	0007a703          	lw	a4,0(a5)
60002678:	00100793          	li	a5,1
6000267c:	00e7fe63          	bgeu	a5,a4,60002698 <xTaskIncrementTick+0x1c4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
60002680:	00100793          	li	a5,1
60002684:	fef42623          	sw	a5,-20(s0)
60002688:	0100006f          	j	60002698 <xTaskIncrementTick+0x1c4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
6000268c:	9401a783          	lw	a5,-1728(gp) # 80000140 <uxPendedTicks>
60002690:	00178713          	addi	a4,a5,1
60002694:	94e1a023          	sw	a4,-1728(gp) # 80000140 <uxPendedTicks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
60002698:	9441a783          	lw	a5,-1724(gp) # 80000144 <xYieldPending>
6000269c:	00078663          	beqz	a5,600026a8 <xTaskIncrementTick+0x1d4>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
600026a0:	00100793          	li	a5,1
600026a4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
600026a8:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2108
}
600026ac:	00078513          	mv	a0,a5
600026b0:	02c12083          	lw	ra,44(sp)
600026b4:	02812403          	lw	s0,40(sp)
600026b8:	03010113          	addi	sp,sp,48
600026bc:	00008067          	ret

600026c0 <vTaskSwitchContext>:
vTaskSwitchContext():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
600026c0:	fe010113          	addi	sp,sp,-32
600026c4:	00812e23          	sw	s0,28(sp)
600026c8:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
600026cc:	9541a783          	lw	a5,-1708(gp) # 80000154 <uxSchedulerSuspended>
600026d0:	00078863          	beqz	a5,600026e0 <vTaskSwitchContext+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
600026d4:	00100713          	li	a4,1
600026d8:	94e1a223          	sw	a4,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
600026dc:	0c00006f          	j	6000279c <vTaskSwitchContext+0xdc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
600026e0:	9401a223          	sw	zero,-1724(gp) # 80000144 <xYieldPending>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
600026e4:	0200006f          	j	60002704 <vTaskSwitchContext+0x44>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
600026e8:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
600026ec:	00079663          	bnez	a5,600026f8 <vTaskSwitchContext+0x38>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
600026f0:	30047073          	csrci	mstatus,8
600026f4:	0000006f          	j	600026f4 <vTaskSwitchContext+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
600026f8:	9381a783          	lw	a5,-1736(gp) # 80000138 <uxTopReadyPriority>
600026fc:	fff78713          	addi	a4,a5,-1
60002700:	92e1ac23          	sw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
60002704:	9381a703          	lw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
60002708:	800196b7          	lui	a3,0x80019
6000270c:	00070793          	mv	a5,a4
60002710:	00279793          	slli	a5,a5,0x2
60002714:	00e787b3          	add	a5,a5,a4
60002718:	00279793          	slli	a5,a5,0x2
6000271c:	18068713          	addi	a4,a3,384 # 80019180 <__stack_top+0xffffdf30>
60002720:	00e787b3          	add	a5,a5,a4
60002724:	0007a783          	lw	a5,0(a5)
60002728:	fc0780e3          	beqz	a5,600026e8 <vTaskSwitchContext+0x28>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
6000272c:	9381a703          	lw	a4,-1736(gp) # 80000138 <uxTopReadyPriority>
60002730:	00070793          	mv	a5,a4
60002734:	00279793          	slli	a5,a5,0x2
60002738:	00e787b3          	add	a5,a5,a4
6000273c:	00279793          	slli	a5,a5,0x2
60002740:	80019737          	lui	a4,0x80019
60002744:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
60002748:	00e787b3          	add	a5,a5,a4
6000274c:	fef42623          	sw	a5,-20(s0)
60002750:	fec42783          	lw	a5,-20(s0)
60002754:	0047a783          	lw	a5,4(a5)
60002758:	0047a703          	lw	a4,4(a5)
6000275c:	fec42783          	lw	a5,-20(s0)
60002760:	00e7a223          	sw	a4,4(a5)
60002764:	fec42783          	lw	a5,-20(s0)
60002768:	0047a703          	lw	a4,4(a5)
6000276c:	fec42783          	lw	a5,-20(s0)
60002770:	00878793          	addi	a5,a5,8
60002774:	00f71c63          	bne	a4,a5,6000278c <vTaskSwitchContext+0xcc>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
60002778:	fec42783          	lw	a5,-20(s0)
6000277c:	0047a783          	lw	a5,4(a5)
60002780:	0047a703          	lw	a4,4(a5)
60002784:	fec42783          	lw	a5,-20(s0)
60002788:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
6000278c:	fec42783          	lw	a5,-20(s0)
60002790:	0047a783          	lw	a5,4(a5)
60002794:	00c7a703          	lw	a4,12(a5)
60002798:	92e1a023          	sw	a4,-1760(gp) # 80000120 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2257
}
6000279c:	00000013          	nop
600027a0:	01c12403          	lw	s0,28(sp)
600027a4:	02010113          	addi	sp,sp,32
600027a8:	00008067          	ret

600027ac <prvIdleTask>:
prvIdleTask():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
600027ac:	fe010113          	addi	sp,sp,-32
600027b0:	00112e23          	sw	ra,28(sp)
600027b4:	00812c23          	sw	s0,24(sp)
600027b8:	02010413          	addi	s0,sp,32
600027bc:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
600027c0:	218000ef          	jal	ra,600029d8 <prvCheckTasksWaitingTermination>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
600027c4:	800197b7          	lui	a5,0x80019
600027c8:	1807a703          	lw	a4,384(a5) # 80019180 <__stack_top+0xffffdf30>
600027cc:	00100793          	li	a5,1
600027d0:	00e7f463          	bgeu	a5,a4,600027d8 <prvIdleTask+0x2c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
600027d4:	becff0ef          	jal	ra,60001bc0 <vPortYield>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
600027d8:	764000ef          	jal	ra,60002f3c <vApplicationIdleHook>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
600027dc:	fe5ff06f          	j	600027c0 <prvIdleTask+0x14>

600027e0 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
600027e0:	fc010113          	addi	sp,sp,-64
600027e4:	02112e23          	sw	ra,60(sp)
600027e8:	02812c23          	sw	s0,56(sp)
600027ec:	04010413          	addi	s0,sp,64
600027f0:	fca42e23          	sw	a0,-36(s0)
600027f4:	fcb42c23          	sw	a1,-40(s0)
600027f8:	fcc42a23          	sw	a2,-44(s0)
600027fc:	fcd42823          	sw	a3,-48(s0)
60002800:	00070793          	mv	a5,a4
60002804:	fcf41723          	sh	a5,-50(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
60002808:	fe042623          	sw	zero,-20(s0)
6000280c:	0440006f          	j	60002850 <prvInitialiseTCBVariables+0x70>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
60002810:	fd842703          	lw	a4,-40(s0)
60002814:	fec42783          	lw	a5,-20(s0)
60002818:	00f707b3          	add	a5,a4,a5
6000281c:	00078703          	lb	a4,0(a5)
60002820:	fdc42683          	lw	a3,-36(s0)
60002824:	fec42783          	lw	a5,-20(s0)
60002828:	00f687b3          	add	a5,a3,a5
6000282c:	02e78a23          	sb	a4,52(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
60002830:	fd842703          	lw	a4,-40(s0)
60002834:	fec42783          	lw	a5,-20(s0)
60002838:	00f707b3          	add	a5,a4,a5
6000283c:	00078783          	lb	a5,0(a5)
60002840:	02078063          	beqz	a5,60002860 <prvInitialiseTCBVariables+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
60002844:	fec42783          	lw	a5,-20(s0)
60002848:	00178793          	addi	a5,a5,1
6000284c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
60002850:	fec42703          	lw	a4,-20(s0)
60002854:	00f00793          	li	a5,15
60002858:	fae7fce3          	bgeu	a5,a4,60002810 <prvInitialiseTCBVariables+0x30>
6000285c:	0080006f          	j	60002864 <prvInitialiseTCBVariables+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2845
		{
			break;
60002860:	00000013          	nop
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
60002864:	fdc42783          	lw	a5,-36(s0)
60002868:	040781a3          	sb	zero,67(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
6000286c:	fd442703          	lw	a4,-44(s0)
60002870:	00400793          	li	a5,4
60002874:	00e7f663          	bgeu	a5,a4,60002880 <prvInitialiseTCBVariables+0xa0>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
60002878:	00400793          	li	a5,4
6000287c:	fcf42a23          	sw	a5,-44(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
60002880:	fdc42783          	lw	a5,-36(s0)
60002884:	fd442703          	lw	a4,-44(s0)
60002888:	02e7a623          	sw	a4,44(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
6000288c:	fdc42783          	lw	a5,-36(s0)
60002890:	fd442703          	lw	a4,-44(s0)
60002894:	04e7a823          	sw	a4,80(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
60002898:	fdc42783          	lw	a5,-36(s0)
6000289c:	0407aa23          	sw	zero,84(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
600028a0:	fdc42783          	lw	a5,-36(s0)
600028a4:	00478793          	addi	a5,a5,4
600028a8:	00078513          	mv	a0,a5
600028ac:	ba0ff0ef          	jal	ra,60001c4c <vListInitialiseItem>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
600028b0:	fdc42783          	lw	a5,-36(s0)
600028b4:	01878793          	addi	a5,a5,24
600028b8:	00078513          	mv	a0,a5
600028bc:	b90ff0ef          	jal	ra,60001c4c <vListInitialiseItem>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
600028c0:	fdc42783          	lw	a5,-36(s0)
600028c4:	fdc42703          	lw	a4,-36(s0)
600028c8:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
600028cc:	00500713          	li	a4,5
600028d0:	fd442783          	lw	a5,-44(s0)
600028d4:	40f70733          	sub	a4,a4,a5
600028d8:	fdc42783          	lw	a5,-36(s0)
600028dc:	00e7ac23          	sw	a4,24(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
600028e0:	fdc42783          	lw	a5,-36(s0)
600028e4:	fdc42703          	lw	a4,-36(s0)
600028e8:	02e7a223          	sw	a4,36(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
600028ec:	fdc42783          	lw	a5,-36(s0)
600028f0:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
600028f4:	fdc42783          	lw	a5,-36(s0)
600028f8:	0407ac23          	sw	zero,88(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
600028fc:	fdc42783          	lw	a5,-36(s0)
60002900:	0407ae23          	sw	zero,92(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
60002904:	00000013          	nop
60002908:	03c12083          	lw	ra,60(sp)
6000290c:	03812403          	lw	s0,56(sp)
60002910:	04010113          	addi	sp,sp,64
60002914:	00008067          	ret

60002918 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
60002918:	fe010113          	addi	sp,sp,-32
6000291c:	00112e23          	sw	ra,28(sp)
60002920:	00812c23          	sw	s0,24(sp)
60002924:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
60002928:	fe042623          	sw	zero,-20(s0)
6000292c:	0380006f          	j	60002964 <prvInitialiseTaskLists+0x4c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
60002930:	fec42703          	lw	a4,-20(s0)
60002934:	00070793          	mv	a5,a4
60002938:	00279793          	slli	a5,a5,0x2
6000293c:	00e787b3          	add	a5,a5,a4
60002940:	00279793          	slli	a5,a5,0x2
60002944:	80019737          	lui	a4,0x80019
60002948:	18070713          	addi	a4,a4,384 # 80019180 <__stack_top+0xffffdf30>
6000294c:	00e787b3          	add	a5,a5,a4
60002950:	00078513          	mv	a0,a5
60002954:	a94ff0ef          	jal	ra,60001be8 <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
60002958:	fec42783          	lw	a5,-20(s0)
6000295c:	00178793          	addi	a5,a5,1
60002960:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
60002964:	fec42703          	lw	a4,-20(s0)
60002968:	00400793          	li	a5,4
6000296c:	fce7f2e3          	bgeu	a5,a4,60002930 <prvInitialiseTaskLists+0x18>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
60002970:	800197b7          	lui	a5,0x80019
60002974:	1e478513          	addi	a0,a5,484 # 800191e4 <__stack_top+0xffffdf94>
60002978:	a70ff0ef          	jal	ra,60001be8 <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
6000297c:	800197b7          	lui	a5,0x80019
60002980:	1f878513          	addi	a0,a5,504 # 800191f8 <__stack_top+0xffffdfa8>
60002984:	a64ff0ef          	jal	ra,60001be8 <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
60002988:	800197b7          	lui	a5,0x80019
6000298c:	20c78513          	addi	a0,a5,524 # 8001920c <__stack_top+0xffffdfbc>
60002990:	a58ff0ef          	jal	ra,60001be8 <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
60002994:	800197b7          	lui	a5,0x80019
60002998:	22078513          	addi	a0,a5,544 # 80019220 <__stack_top+0xffffdfd0>
6000299c:	a4cff0ef          	jal	ra,60001be8 <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
600029a0:	800197b7          	lui	a5,0x80019
600029a4:	23478513          	addi	a0,a5,564 # 80019234 <__stack_top+0xffffdfe4>
600029a8:	a40ff0ef          	jal	ra,60001be8 <vListInitialise>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
600029ac:	80019737          	lui	a4,0x80019
600029b0:	1e470713          	addi	a4,a4,484 # 800191e4 <__stack_top+0xffffdf94>
600029b4:	92e1a223          	sw	a4,-1756(gp) # 80000124 <pxDelayedTaskList>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
600029b8:	80019737          	lui	a4,0x80019
600029bc:	1f870713          	addi	a4,a4,504 # 800191f8 <__stack_top+0xffffdfa8>
600029c0:	92e1a423          	sw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3025
}
600029c4:	00000013          	nop
600029c8:	01c12083          	lw	ra,28(sp)
600029cc:	01812403          	lw	s0,24(sp)
600029d0:	02010113          	addi	sp,sp,32
600029d4:	00008067          	ret

600029d8 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
600029d8:	fe010113          	addi	sp,sp,-32
600029dc:	00112e23          	sw	ra,28(sp)
600029e0:	00812c23          	sw	s0,24(sp)
600029e4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
600029e8:	0740006f          	j	60002a5c <prvCheckTasksWaitingTermination+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
600029ec:	961ff0ef          	jal	ra,6000234c <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
600029f0:	800197b7          	lui	a5,0x80019
600029f4:	2207a783          	lw	a5,544(a5) # 80019220 <__stack_top+0xffffdfd0>
600029f8:	0017b793          	seqz	a5,a5
600029fc:	0ff7f793          	andi	a5,a5,255
60002a00:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
60002a04:	971ff0ef          	jal	ra,60002374 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
60002a08:	fec42783          	lw	a5,-20(s0)
60002a0c:	04079863          	bnez	a5,60002a5c <prvCheckTasksWaitingTermination+0x84>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
60002a10:	ce9fe0ef          	jal	ra,600016f8 <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
60002a14:	800197b7          	lui	a5,0x80019
60002a18:	22078793          	addi	a5,a5,544 # 80019220 <__stack_top+0xffffdfd0>
60002a1c:	00c7a783          	lw	a5,12(a5)
60002a20:	00c7a783          	lw	a5,12(a5)
60002a24:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
60002a28:	fe842783          	lw	a5,-24(s0)
60002a2c:	00478793          	addi	a5,a5,4
60002a30:	00078513          	mv	a0,a5
60002a34:	b9cff0ef          	jal	ra,60001dd0 <uxListRemove>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
60002a38:	9301a783          	lw	a5,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
60002a3c:	fff78713          	addi	a4,a5,-1
60002a40:	92e1a823          	sw	a4,-1744(gp) # 80000130 <uxCurrentNumberOfTasks>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
60002a44:	92c1a783          	lw	a5,-1748(gp) # 8000012c <uxTasksDeleted>
60002a48:	fff78713          	addi	a4,a5,-1
60002a4c:	92e1a623          	sw	a4,-1748(gp) # 8000012c <uxTasksDeleted>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
60002a50:	cddfe0ef          	jal	ra,6000172c <vPortExitCritical>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
60002a54:	fe842503          	lw	a0,-24(s0)
60002a58:	168000ef          	jal	ra,60002bc0 <prvDeleteTCB>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
60002a5c:	92c1a783          	lw	a5,-1748(gp) # 8000012c <uxTasksDeleted>
60002a60:	f80796e3          	bnez	a5,600029ec <prvCheckTasksWaitingTermination+0x14>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
60002a64:	00000013          	nop
60002a68:	01c12083          	lw	ra,28(sp)
60002a6c:	01812403          	lw	s0,24(sp)
60002a70:	02010113          	addi	sp,sp,32
60002a74:	00008067          	ret

60002a78 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
60002a78:	fe010113          	addi	sp,sp,-32
60002a7c:	00112e23          	sw	ra,28(sp)
60002a80:	00812c23          	sw	s0,24(sp)
60002a84:	02010413          	addi	s0,sp,32
60002a88:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
60002a8c:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002a90:	fec42703          	lw	a4,-20(s0)
60002a94:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
60002a98:	9341a783          	lw	a5,-1740(gp) # 80000134 <xTickCount>
60002a9c:	fec42703          	lw	a4,-20(s0)
60002aa0:	02f77063          	bgeu	a4,a5,60002ac0 <prvAddCurrentTaskToDelayedList+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
60002aa4:	9281a703          	lw	a4,-1752(gp) # 80000128 <pxOverflowDelayedTaskList>
60002aa8:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002aac:	00478793          	addi	a5,a5,4
60002ab0:	00078593          	mv	a1,a5
60002ab4:	00070513          	mv	a0,a4
60002ab8:	a44ff0ef          	jal	ra,60001cfc <vListInsert>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
60002abc:	0300006f          	j	60002aec <prvAddCurrentTaskToDelayedList+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
60002ac0:	9241a703          	lw	a4,-1756(gp) # 80000124 <pxDelayedTaskList>
60002ac4:	9201a783          	lw	a5,-1760(gp) # 80000120 <pxCurrentTCB>
60002ac8:	00478793          	addi	a5,a5,4
60002acc:	00078593          	mv	a1,a5
60002ad0:	00070513          	mv	a0,a4
60002ad4:	a28ff0ef          	jal	ra,60001cfc <vListInsert>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
60002ad8:	9501a783          	lw	a5,-1712(gp) # 80000150 <xNextTaskUnblockTime>
60002adc:	fec42703          	lw	a4,-20(s0)
60002ae0:	00f77663          	bgeu	a4,a5,60002aec <prvAddCurrentTaskToDelayedList+0x74>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
60002ae4:	fec42703          	lw	a4,-20(s0)
60002ae8:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3096
}
60002aec:	00000013          	nop
60002af0:	01c12083          	lw	ra,28(sp)
60002af4:	01812403          	lw	s0,24(sp)
60002af8:	02010113          	addi	sp,sp,32
60002afc:	00008067          	ret

60002b00 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
60002b00:	fd010113          	addi	sp,sp,-48
60002b04:	02112623          	sw	ra,44(sp)
60002b08:	02812423          	sw	s0,40(sp)
60002b0c:	03010413          	addi	s0,sp,48
60002b10:	00050793          	mv	a5,a0
60002b14:	fcb42c23          	sw	a1,-40(s0)
60002b18:	fcf41f23          	sh	a5,-34(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
60002b1c:	fd842783          	lw	a5,-40(s0)
60002b20:	00079e63          	bnez	a5,60002b3c <prvAllocateTCBAndStack+0x3c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
60002b24:	fde45783          	lhu	a5,-34(s0)
60002b28:	00279793          	slli	a5,a5,0x2
60002b2c:	00078513          	mv	a0,a5
60002b30:	861fe0ef          	jal	ra,60001390 <pvPortMalloc>
60002b34:	00050793          	mv	a5,a0
60002b38:	0080006f          	j	60002b40 <prvAllocateTCBAndStack+0x40>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
60002b3c:	fd842783          	lw	a5,-40(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
60002b40:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
60002b44:	fe842783          	lw	a5,-24(s0)
60002b48:	02078a63          	beqz	a5,60002b7c <prvAllocateTCBAndStack+0x7c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
60002b4c:	06000513          	li	a0,96
60002b50:	841fe0ef          	jal	ra,60001390 <pvPortMalloc>
60002b54:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
60002b58:	fec42783          	lw	a5,-20(s0)
60002b5c:	00078a63          	beqz	a5,60002b70 <prvAllocateTCBAndStack+0x70>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
60002b60:	fec42783          	lw	a5,-20(s0)
60002b64:	fe842703          	lw	a4,-24(s0)
60002b68:	02e7a823          	sw	a4,48(a5)
60002b6c:	0140006f          	j	60002b80 <prvAllocateTCBAndStack+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
60002b70:	fe842503          	lw	a0,-24(s0)
60002b74:	9f9fe0ef          	jal	ra,6000156c <vPortFree>
60002b78:	0080006f          	j	60002b80 <prvAllocateTCBAndStack+0x80>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
60002b7c:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
60002b80:	fec42783          	lw	a5,-20(s0)
60002b84:	02078263          	beqz	a5,60002ba8 <prvAllocateTCBAndStack+0xa8>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
60002b88:	fec42783          	lw	a5,-20(s0)
60002b8c:	0307a703          	lw	a4,48(a5)
60002b90:	fde45783          	lhu	a5,-34(s0)
60002b94:	00279793          	slli	a5,a5,0x2
60002b98:	00078613          	mv	a2,a5
60002b9c:	0a500593          	li	a1,165
60002ba0:	00070513          	mv	a0,a4
60002ba4:	b90ff0ef          	jal	ra,60001f34 <memset>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
60002ba8:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3171
}
60002bac:	00078513          	mv	a0,a5
60002bb0:	02c12083          	lw	ra,44(sp)
60002bb4:	02812403          	lw	s0,40(sp)
60002bb8:	03010113          	addi	sp,sp,48
60002bbc:	00008067          	ret

60002bc0 <prvDeleteTCB>:
prvDeleteTCB():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
60002bc0:	fe010113          	addi	sp,sp,-32
60002bc4:	00112e23          	sw	ra,28(sp)
60002bc8:	00812c23          	sw	s0,24(sp)
60002bcc:	02010413          	addi	s0,sp,32
60002bd0:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
60002bd4:	fec42783          	lw	a5,-20(s0)
60002bd8:	0307a783          	lw	a5,48(a5)
60002bdc:	00078513          	mv	a0,a5
60002be0:	98dfe0ef          	jal	ra,6000156c <vPortFree>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
60002be4:	fec42503          	lw	a0,-20(s0)
60002be8:	985fe0ef          	jal	ra,6000156c <vPortFree>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3340
	}
60002bec:	00000013          	nop
60002bf0:	01c12083          	lw	ra,28(sp)
60002bf4:	01812403          	lw	s0,24(sp)
60002bf8:	02010113          	addi	sp,sp,32
60002bfc:	00008067          	ret

60002c00 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
60002c00:	fe010113          	addi	sp,sp,-32
60002c04:	00812e23          	sw	s0,28(sp)
60002c08:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60002c0c:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002c10:	0007a783          	lw	a5,0(a5)
60002c14:	00079663          	bnez	a5,60002c20 <prvResetNextTaskUnblockTime+0x20>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
60002c18:	00100793          	li	a5,1
60002c1c:	0080006f          	j	60002c24 <prvResetNextTaskUnblockTime+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
60002c20:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
60002c24:	00078863          	beqz	a5,60002c34 <prvResetNextTaskUnblockTime+0x34>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
60002c28:	fff00713          	li	a4,-1
60002c2c:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
60002c30:	0200006f          	j	60002c50 <prvResetNextTaskUnblockTime+0x50>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
60002c34:	9241a783          	lw	a5,-1756(gp) # 80000124 <pxDelayedTaskList>
60002c38:	00c7a783          	lw	a5,12(a5)
60002c3c:	00c7a783          	lw	a5,12(a5)
60002c40:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
60002c44:	fec42783          	lw	a5,-20(s0)
60002c48:	0047a703          	lw	a4,4(a5)
60002c4c:	94e1a823          	sw	a4,-1712(gp) # 80000150 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../FreeRTOS/tasks.c:3366
}
60002c50:	00000013          	nop
60002c54:	01c12403          	lw	s0,28(sp)
60002c58:	02010113          	addi	sp,sp,32
60002c5c:	00008067          	ret

60002c60 <BasicIO_Init>:
BasicIO_Init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:101

// --- Private functions -------------------------------------------------------

// --- Public Functions --------------------------------------------------------

void BasicIO_Init(addr_t interface_addr) {
60002c60:	fe010113          	addi	sp,sp,-32
60002c64:	00112e23          	sw	ra,28(sp)
60002c68:	00812c23          	sw	s0,24(sp)
60002c6c:	02010413          	addi	s0,sp,32
60002c70:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:104

 	GPIO_init(BASIC_GPIO_PBS,
 						interface_addr | BASIC_IO_GPIO_ADDR,
60002c74:	fec42783          	lw	a5,-20(s0)
60002c78:	1007e793          	ori	a5,a5,256
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:103
 	GPIO_init(BASIC_GPIO_PBS,
60002c7c:	00200613          	li	a2,2
60002c80:	00078593          	mv	a1,a5
60002c84:	95818513          	addi	a0,gp,-1704 # 80000158 <g_gpio_in_PBs>
60002c88:	96cfe0ef          	jal	ra,60000df4 <GPIO_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:107
						GPIO_APB_32_BITS_BUS);
 	GPIO_init(BASIC_GPIO_LEDS,
 						interface_addr | BASIC_IO_GPIO_ADDR,
60002c8c:	fec42783          	lw	a5,-20(s0)
60002c90:	1007e793          	ori	a5,a5,256
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:106
 	GPIO_init(BASIC_GPIO_LEDS,
60002c94:	00200613          	li	a2,2
60002c98:	00078593          	mv	a1,a5
60002c9c:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002ca0:	954fe0ef          	jal	ra,60000df4 <GPIO_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:110
						GPIO_APB_32_BITS_BUS);
  
  GPIO_enable_irq(BASIC_GPIO_PBS, PB1);
60002ca4:	00000593          	li	a1,0
60002ca8:	95818513          	addi	a0,gp,-1704 # 80000158 <g_gpio_in_PBs>
60002cac:	e64fe0ef          	jal	ra,60001310 <GPIO_enable_irq>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:111
  GPIO_enable_irq(BASIC_GPIO_PBS, PB2);  
60002cb0:	00100593          	li	a1,1
60002cb4:	95818513          	addi	a0,gp,-1704 # 80000158 <g_gpio_in_PBs>
60002cb8:	e58fe0ef          	jal	ra,60001310 <GPIO_enable_irq>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:113

  GPIO_set_output(BASIC_GPIO_LEDS, LED1_GREEN, LED_OFF);
60002cbc:	00000613          	li	a2,0
60002cc0:	00200593          	li	a1,2
60002cc4:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002cc8:	c10fe0ef          	jal	ra,600010d8 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:114
  GPIO_set_output(BASIC_GPIO_LEDS, LED1_RED, LED_OFF);
60002ccc:	00000613          	li	a2,0
60002cd0:	00300593          	li	a1,3
60002cd4:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002cd8:	c00fe0ef          	jal	ra,600010d8 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:115
  GPIO_set_output(BASIC_GPIO_LEDS, LED2_GREEN, LED_OFF);
60002cdc:	00000613          	li	a2,0
60002ce0:	00400593          	li	a1,4
60002ce4:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002ce8:	bf0fe0ef          	jal	ra,600010d8 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:116
  GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_OFF);
60002cec:	00000613          	li	a2,0
60002cf0:	00500593          	li	a1,5
60002cf4:	96018513          	addi	a0,gp,-1696 # 80000160 <g_gpio_out_LEDs>
60002cf8:	be0fe0ef          	jal	ra,600010d8 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:118
    
  UART_init(BASIC_UART,
60002cfc:	00100693          	li	a3,1
60002d00:	01a00613          	li	a2,26
60002d04:	fec42583          	lw	a1,-20(s0)
60002d08:	96818513          	addi	a0,gp,-1688 # 80000168 <g_uart_term>
60002d0c:	e6dfd0ef          	jal	ra,60000b78 <UART_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:123
  					interface_addr | BASIC_IO_UART_ADDR,
						BAUD_VALUE_115200,
            (DATA_8_BITS | NO_PARITY));
   
}
60002d10:	00000013          	nop
60002d14:	01c12083          	lw	ra,28(sp)
60002d18:	01812403          	lw	s0,24(sp)
60002d1c:	02010113          	addi	sp,sp,32
60002d20:	00008067          	ret

60002d24 <UART_Tx_Msg>:
UART_Tx_Msg():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:179
	GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_OFF);
}

// --- Terminal Functions ------------------------------------------------------

void UART_Tx_Msg(char* msg, uint8_t type) {
60002d24:	fe010113          	addi	sp,sp,-32
60002d28:	00112e23          	sw	ra,28(sp)
60002d2c:	00812c23          	sw	s0,24(sp)
60002d30:	02010413          	addi	s0,sp,32
60002d34:	fea42623          	sw	a0,-20(s0)
60002d38:	00058793          	mv	a5,a1
60002d3c:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:180
	if (type == 1) {
60002d40:	feb44703          	lbu	a4,-21(s0)
60002d44:	00100793          	li	a5,1
60002d48:	00f71a63          	bne	a4,a5,60002d5c <UART_Tx_Msg+0x38>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:181
		UART_polled_tx_string(BASIC_UART, (const uint8_t *) msg);
60002d4c:	fec42583          	lw	a1,-20(s0)
60002d50:	96818513          	addi	a0,gp,-1688 # 80000168 <g_uart_term>
60002d54:	ff1fd0ef          	jal	ra,60000d44 <UART_polled_tx_string>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:185
	} else {
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
	}
}
60002d58:	0140006f          	j	60002d6c <UART_Tx_Msg+0x48>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:183
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
60002d5c:	00100613          	li	a2,1
60002d60:	fec42583          	lw	a1,-20(s0)
60002d64:	96818513          	addi	a0,gp,-1688 # 80000168 <g_uart_term>
60002d68:	f29fd0ef          	jal	ra,60000c90 <UART_send>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../Creative/BasicIO.c:185
}
60002d6c:	00000013          	nop
60002d70:	01c12083          	lw	ra,28(sp)
60002d74:	01812403          	lw	s0,24(sp)
60002d78:	02010113          	addi	sp,sp,32
60002d7c:	00008067          	ret

60002d80 <PLIC_init>:
PLIC_init():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:124
{
60002d80:	fe010113          	addi	sp,sp,-32
60002d84:	00812e23          	sw	s0,28(sp)
60002d88:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
60002d8c:	f14027f3          	csrr	a5,mhartid
60002d90:	fef42423          	sw	a5,-24(s0)
60002d94:	fe842783          	lw	a5,-24(s0)
60002d98:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
60002d9c:	fe042623          	sw	zero,-20(s0)
60002da0:	03c0006f          	j	60002ddc <PLIC_init+0x5c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
60002da4:	40000737          	lui	a4,0x40000
60002da8:	fe442783          	lw	a5,-28(s0)
60002dac:	00579693          	slli	a3,a5,0x5
60002db0:	fec42783          	lw	a5,-20(s0)
60002db4:	00f686b3          	add	a3,a3,a5
60002db8:	000017b7          	lui	a5,0x1
60002dbc:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60002dc0:	00f687b3          	add	a5,a3,a5
60002dc4:	00279793          	slli	a5,a5,0x2
60002dc8:	00f707b3          	add	a5,a4,a5
60002dcc:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
60002dd0:	fec42783          	lw	a5,-20(s0)
60002dd4:	00178793          	addi	a5,a5,1
60002dd8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:129 (discriminator 1)
60002ddc:	fec42783          	lw	a5,-20(s0)
60002de0:	fc0782e3          	beqz	a5,60002da4 <PLIC_init+0x24>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
60002de4:	fe042623          	sw	zero,-20(s0)
60002de8:	0240006f          	j	60002e0c <PLIC_init+0x8c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
60002dec:	40000737          	lui	a4,0x40000
60002df0:	fec42783          	lw	a5,-20(s0)
60002df4:	00279793          	slli	a5,a5,0x2
60002df8:	00f707b3          	add	a5,a4,a5
60002dfc:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
60002e00:	fec42783          	lw	a5,-20(s0)
60002e04:	00178793          	addi	a5,a5,1
60002e08:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:137 (discriminator 1)
60002e0c:	fec42703          	lw	a4,-20(s0)
60002e10:	01e00793          	li	a5,30
60002e14:	fce7fce3          	bgeu	a5,a4,60002dec <PLIC_init+0x6c>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
60002e18:	40000737          	lui	a4,0x40000
60002e1c:	fe442783          	lw	a5,-28(s0)
60002e20:	20078793          	addi	a5,a5,512
60002e24:	00c79793          	slli	a5,a5,0xc
60002e28:	00f707b3          	add	a5,a4,a5
60002e2c:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
60002e30:	000017b7          	lui	a5,0x1
60002e34:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60002e38:	3047a7f3          	csrrs	a5,mie,a5
60002e3c:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\riscv_hal/riscv_plic.h:147
}
60002e40:	00000013          	nop
60002e44:	01c12403          	lw	s0,28(sp)
60002e48:	02010113          	addi	sp,sp,32
60002e4c:	00008067          	ret

60002e50 <External_31_IRQHandler>:
External_31_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:112


/*----------------------------------------------------------------------------
 * User Pushbutton #1 Interrupt Handler
 */
void External_31_IRQHandler() {
60002e50:	ff010113          	addi	sp,sp,-16
60002e54:	00812623          	sw	s0,12(sp)
60002e58:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:117
/*
	GPIO_clear_irq(&g_gpio_in_pbs, PB1);
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60002e5c:	00000013          	nop
60002e60:	00c12403          	lw	s0,12(sp)
60002e64:	01010113          	addi	sp,sp,16
60002e68:	00008067          	ret

60002e6c <External_30_IRQHandler>:
External_30_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:122

/*----------------------------------------------------------------------------
 * User Pushbutton #2 Interrupt Handler
 */
void External_30_IRQHandler() {
60002e6c:	ff010113          	addi	sp,sp,-16
60002e70:	00812623          	sw	s0,12(sp)
60002e74:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:127
/*
	GPIO_clear_irq(&g_gpio_in_pbs, PB2);
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60002e78:	00000013          	nop
60002e7c:	00c12403          	lw	s0,12(sp)
60002e80:	01010113          	addi	sp,sp,16
60002e84:	00008067          	ret

60002e88 <External_29_IRQHandler>:
External_29_IRQHandler():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:132

/*----------------------------------------------------------------------------
 * User Timer Interrupt Handler
 */
void External_29_IRQHandler() {
60002e88:	ff010113          	addi	sp,sp,-16
60002e8c:	00812623          	sw	s0,12(sp)
60002e90:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:136
/*
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60002e94:	00000013          	nop
60002e98:	00c12403          	lw	s0,12(sp)
60002e9c:	01010113          	addi	sp,sp,16
60002ea0:	00008067          	ret

60002ea4 <main>:
main():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:145
 */
#define GPIO_BASE_ADDR	0x70002000UL
#define gpio &g_gpio
static gpio_instance_t g_gpio;

int main(void) {
60002ea4:	ff010113          	addi	sp,sp,-16
60002ea8:	00112623          	sw	ra,12(sp)
60002eac:	00812423          	sw	s0,8(sp)
60002eb0:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:147

	PLIC_init();
60002eb4:	ecdff0ef          	jal	ra,60002d80 <PLIC_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:151

	// -- Hardware setup -------------------------------------------------------

	BasicIO_Init(BASIC_IO_INTR_ADDR);
60002eb8:	70000537          	lui	a0,0x70000
60002ebc:	da5ff0ef          	jal	ra,60002c60 <BasicIO_Init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:152
	GPIO_init(gpio, GPIO_BASE_ADDR, GPIO_APB_32_BITS_BUS);
60002ec0:	00200613          	li	a2,2
60002ec4:	700025b7          	lui	a1,0x70002
60002ec8:	97018513          	addi	a0,gp,-1680 # 80000170 <g_gpio>
60002ecc:	f29fd0ef          	jal	ra,60000df4 <GPIO_init>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:158

	// -- Main program ---------------------------------------------------------

	//UART_Tx_Msg(g_MSG_INTRO, 1);
	//UART_Tx_Msg(g_MSG_DEMO, 1);
	UART_Tx_Msg("\rHello World! Flip the switch to run on/off LED.\n\r",1);
60002ed0:	00100593          	li	a1,1
60002ed4:	600047b7          	lui	a5,0x60004
60002ed8:	fbc78513          	addi	a0,a5,-68 # 60003fbc <_malloc_usable_size_r+0x110>
60002edc:	e49ff0ef          	jal	ra,60002d24 <UART_Tx_Msg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:161

	/* Create the three test tasks. */
	xTaskCreate(blinkingLED, "blink", 1000, NULL, 1, NULL);
60002ee0:	00000893          	li	a7,0
60002ee4:	00000813          	li	a6,0
60002ee8:	00000793          	li	a5,0
60002eec:	00100713          	li	a4,1
60002ef0:	00000693          	li	a3,0
60002ef4:	3e800613          	li	a2,1000
60002ef8:	600045b7          	lui	a1,0x60004
60002efc:	ff058593          	addi	a1,a1,-16 # 60003ff0 <_malloc_usable_size_r+0x144>
60002f00:	60003537          	lui	a0,0x60003
60002f04:	f5850513          	addi	a0,a0,-168 # 60002f58 <blinkingLED>
60002f08:	914ff0ef          	jal	ra,6000201c <xTaskGenericCreate>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:167
	//xTaskCreate(vLEDTestTask1, "LED1", 1000, NULL, 1, NULL);
	//xTaskCreate(vLEDTestTask2, "LED2", 1000, NULL, 3, NULL);
	//xTaskCreate(vLEDTestTask3, "LED3", 1000, NULL, 2, NULL);

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
60002f0c:	bb0ff0ef          	jal	ra,600022bc <vTaskStartScheduler>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:170

	/* Exit FreeRTOS */
	return 0;
60002f10:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:171
}
60002f14:	00078513          	mv	a0,a5
60002f18:	00c12083          	lw	ra,12(sp)
60002f1c:	00812403          	lw	s0,8(sp)
60002f20:	01010113          	addi	sp,sp,16
60002f24:	00008067          	ret

60002f28 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:175

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void) {
60002f28:	ff010113          	addi	sp,sp,-16
60002f2c:	00812623          	sw	s0,12(sp)
60002f30:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:187
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
60002f34:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:188 (discriminator 1)
	for(;;);
60002f38:	0000006f          	j	60002f38 <vApplicationMallocFailedHook+0x10>

60002f3c <vApplicationIdleHook>:
vApplicationIdleHook():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:192
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook(void) {
60002f3c:	ff010113          	addi	sp,sp,-16
60002f40:	00812623          	sw	s0,12(sp)
60002f44:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:203
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
60002f48:	00000013          	nop
60002f4c:	00c12403          	lw	s0,12(sp)
60002f50:	01010113          	addi	sp,sp,16
60002f54:	00008067          	ret

60002f58 <blinkingLED>:
blinkingLED():
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:222
}


/*-----------------------------------------------------------*/

static void blinkingLED(void *pvParameters) {
60002f58:	fa010113          	addi	sp,sp,-96
60002f5c:	04112e23          	sw	ra,92(sp)
60002f60:	04812c23          	sw	s0,88(sp)
60002f64:	06010413          	addi	s0,sp,96
60002f68:	faa42623          	sw	a0,-84(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:227
	(void) pvParameters;
	uint32_t value;
	char message[50];
	for(;;) {
		value = GPIO_get_inputs(gpio);
60002f6c:	97018513          	addi	a0,gp,-1680 # 80000170 <g_gpio>
60002f70:	ff5fd0ef          	jal	ra,60000f64 <GPIO_get_inputs>
60002f74:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:228
		sprintf(message,"switch = %d\n\r",value);
60002f78:	fb840713          	addi	a4,s0,-72
60002f7c:	fec42603          	lw	a2,-20(s0)
60002f80:	600047b7          	lui	a5,0x60004
60002f84:	ff878593          	addi	a1,a5,-8 # 60003ff8 <_malloc_usable_size_r+0x14c>
60002f88:	00070513          	mv	a0,a4
60002f8c:	070000ef          	jal	ra,60002ffc <siprintf>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:229
		UART_Tx_Msg(message,1);
60002f90:	fb840793          	addi	a5,s0,-72
60002f94:	00100593          	li	a1,1
60002f98:	00078513          	mv	a0,a5
60002f9c:	d89ff0ef          	jal	ra,60002d24 <UART_Tx_Msg>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:230
		if(value == 1) {
60002fa0:	fec42703          	lw	a4,-20(s0)
60002fa4:	00100793          	li	a5,1
60002fa8:	02f71c63          	bne	a4,a5,60002fe0 <blinkingLED+0x88>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:231
			GPIO_set_output(gpio,GPIO_1,1);
60002fac:	00100613          	li	a2,1
60002fb0:	00100593          	li	a1,1
60002fb4:	97018513          	addi	a0,gp,-1680 # 80000170 <g_gpio>
60002fb8:	920fe0ef          	jal	ra,600010d8 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:232
			vTaskDelay(13);
60002fbc:	00d00513          	li	a0,13
60002fc0:	a78ff0ef          	jal	ra,60002238 <vTaskDelay>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:233
			GPIO_set_output(gpio,GPIO_1,0);
60002fc4:	00000613          	li	a2,0
60002fc8:	00100593          	li	a1,1
60002fcc:	97018513          	addi	a0,gp,-1680 # 80000170 <g_gpio>
60002fd0:	908fe0ef          	jal	ra,600010d8 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:234
			vTaskDelay(13);
60002fd4:	00d00513          	li	a0,13
60002fd8:	a60ff0ef          	jal	ra,60002238 <vTaskDelay>
60002fdc:	f91ff06f          	j	60002f6c <blinkingLED+0x14>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:236
		} else {
			GPIO_set_output(gpio,GPIO_1,0);
60002fe0:	00000613          	li	a2,0
60002fe4:	00100593          	li	a1,1
60002fe8:	97018513          	addi	a0,gp,-1680 # 80000170 <g_gpio>
60002fec:	8ecfe0ef          	jal	ra,600010d8 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:237
			vTaskDelay(13);
60002ff0:	00d00513          	li	a0,13
60002ff4:	a44ff0ef          	jal	ra,60002238 <vTaskDelay>
C:\Users\cheec\Desktop\Master\RISC-V_FreeRTOS_Computer_Vision\IO_Testing\Creative_MiV_FreeRTOS_Demo\Debug/../main.c:227
		value = GPIO_get_inputs(gpio);
60002ff8:	f75ff06f          	j	60002f6c <blinkingLED+0x14>

60002ffc <siprintf>:
sprintf():
60002ffc:	f6010113          	addi	sp,sp,-160
60003000:	08f12a23          	sw	a5,148(sp)
60003004:	800007b7          	lui	a5,0x80000
60003008:	fff7c793          	not	a5,a5
6000300c:	00f12e23          	sw	a5,28(sp)
60003010:	00f12823          	sw	a5,16(sp)
60003014:	ffff07b7          	lui	a5,0xffff0
60003018:	20878793          	addi	a5,a5,520 # ffff0208 <__stack_top+0x7ffd4fb8>
6000301c:	08c12423          	sw	a2,136(sp)
60003020:	08d12623          	sw	a3,140(sp)
60003024:	08e12823          	sw	a4,144(sp)
60003028:	09012c23          	sw	a6,152(sp)
6000302c:	09112e23          	sw	a7,156(sp)
60003030:	00f12a23          	sw	a5,20(sp)
60003034:	81418793          	addi	a5,gp,-2028 # 80000014 <_impure_ptr>
60003038:	00a12423          	sw	a0,8(sp)
6000303c:	00a12c23          	sw	a0,24(sp)
60003040:	0007a503          	lw	a0,0(a5)
60003044:	08810693          	addi	a3,sp,136
60003048:	00058613          	mv	a2,a1
6000304c:	00810593          	addi	a1,sp,8
60003050:	06112e23          	sw	ra,124(sp)
60003054:	00d12223          	sw	a3,4(sp)
60003058:	180000ef          	jal	ra,600031d8 <_svfiprintf_r>
6000305c:	00812783          	lw	a5,8(sp)
60003060:	00078023          	sb	zero,0(a5)
60003064:	07c12083          	lw	ra,124(sp)
60003068:	0a010113          	addi	sp,sp,160
6000306c:	00008067          	ret

60003070 <__ssputs_r>:
__ssputs_r():
60003070:	fe010113          	addi	sp,sp,-32
60003074:	01212823          	sw	s2,16(sp)
60003078:	0085a903          	lw	s2,8(a1)
6000307c:	00812c23          	sw	s0,24(sp)
60003080:	01412423          	sw	s4,8(sp)
60003084:	01612023          	sw	s6,0(sp)
60003088:	00112e23          	sw	ra,28(sp)
6000308c:	00912a23          	sw	s1,20(sp)
60003090:	01312623          	sw	s3,12(sp)
60003094:	01512223          	sw	s5,4(sp)
60003098:	00058413          	mv	s0,a1
6000309c:	00060b13          	mv	s6,a2
600030a0:	00068a13          	mv	s4,a3
600030a4:	0d26ee63          	bltu	a3,s2,60003180 <__ssputs_r+0x110>
600030a8:	00c5d783          	lhu	a5,12(a1)
600030ac:	4807f713          	andi	a4,a5,1152
600030b0:	0c070663          	beqz	a4,6000317c <__ssputs_r+0x10c>
600030b4:	00042483          	lw	s1,0(s0)
600030b8:	0105a583          	lw	a1,16(a1)
600030bc:	01442703          	lw	a4,20(s0)
600030c0:	00050a93          	mv	s5,a0
600030c4:	40b489b3          	sub	s3,s1,a1
600030c8:	00300493          	li	s1,3
600030cc:	02e484b3          	mul	s1,s1,a4
600030d0:	00200713          	li	a4,2
600030d4:	02e4c4b3          	div	s1,s1,a4
600030d8:	00168713          	addi	a4,a3,1
600030dc:	01370733          	add	a4,a4,s3
600030e0:	00e4f463          	bgeu	s1,a4,600030e8 <__ssputs_r+0x78>
600030e4:	00070493          	mv	s1,a4
600030e8:	4007f793          	andi	a5,a5,1024
600030ec:	0c078463          	beqz	a5,600031b4 <__ssputs_r+0x144>
600030f0:	00048593          	mv	a1,s1
600030f4:	000a8513          	mv	a0,s5
600030f8:	37d000ef          	jal	ra,60003c74 <_malloc_r>
600030fc:	00050913          	mv	s2,a0
60003100:	04051263          	bnez	a0,60003144 <__ssputs_r+0xd4>
60003104:	00c00793          	li	a5,12
60003108:	00faa023          	sw	a5,0(s5)
6000310c:	00c45783          	lhu	a5,12(s0)
60003110:	fff00513          	li	a0,-1
60003114:	0407e793          	ori	a5,a5,64
60003118:	00f41623          	sh	a5,12(s0)
6000311c:	01c12083          	lw	ra,28(sp)
60003120:	01812403          	lw	s0,24(sp)
60003124:	01412483          	lw	s1,20(sp)
60003128:	01012903          	lw	s2,16(sp)
6000312c:	00c12983          	lw	s3,12(sp)
60003130:	00812a03          	lw	s4,8(sp)
60003134:	00412a83          	lw	s5,4(sp)
60003138:	00012b03          	lw	s6,0(sp)
6000313c:	02010113          	addi	sp,sp,32
60003140:	00008067          	ret
60003144:	01042583          	lw	a1,16(s0)
60003148:	00098613          	mv	a2,s3
6000314c:	d1dfe0ef          	jal	ra,60001e68 <memcpy>
60003150:	00c45783          	lhu	a5,12(s0)
60003154:	b7f7f793          	andi	a5,a5,-1153
60003158:	0807e793          	ori	a5,a5,128
6000315c:	00f41623          	sh	a5,12(s0)
60003160:	01242823          	sw	s2,16(s0)
60003164:	00942a23          	sw	s1,20(s0)
60003168:	01390933          	add	s2,s2,s3
6000316c:	413484b3          	sub	s1,s1,s3
60003170:	01242023          	sw	s2,0(s0)
60003174:	00942423          	sw	s1,8(s0)
60003178:	000a0913          	mv	s2,s4
6000317c:	012a7463          	bgeu	s4,s2,60003184 <__ssputs_r+0x114>
60003180:	000a0913          	mv	s2,s4
60003184:	00042503          	lw	a0,0(s0)
60003188:	00090613          	mv	a2,s2
6000318c:	000b0593          	mv	a1,s6
60003190:	185000ef          	jal	ra,60003b14 <memmove>
60003194:	00842783          	lw	a5,8(s0)
60003198:	00000513          	li	a0,0
6000319c:	412787b3          	sub	a5,a5,s2
600031a0:	00f42423          	sw	a5,8(s0)
600031a4:	00042783          	lw	a5,0(s0)
600031a8:	01278933          	add	s2,a5,s2
600031ac:	01242023          	sw	s2,0(s0)
600031b0:	f6dff06f          	j	6000311c <__ssputs_r+0xac>
600031b4:	00048613          	mv	a2,s1
600031b8:	000a8513          	mv	a0,s5
600031bc:	405000ef          	jal	ra,60003dc0 <_realloc_r>
600031c0:	00050913          	mv	s2,a0
600031c4:	f8051ee3          	bnez	a0,60003160 <__ssputs_r+0xf0>
600031c8:	01042583          	lw	a1,16(s0)
600031cc:	000a8513          	mv	a0,s5
600031d0:	1a1000ef          	jal	ra,60003b70 <_free_r>
600031d4:	f31ff06f          	j	60003104 <__ssputs_r+0x94>

600031d8 <_svfiprintf_r>:
_svfprintf_r():
600031d8:	00c5d783          	lhu	a5,12(a1)
600031dc:	f5010113          	addi	sp,sp,-176
600031e0:	0a912223          	sw	s1,164(sp)
600031e4:	0b212023          	sw	s2,160(sp)
600031e8:	09312e23          	sw	s3,156(sp)
600031ec:	0a112623          	sw	ra,172(sp)
600031f0:	0a812423          	sw	s0,168(sp)
600031f4:	09412c23          	sw	s4,152(sp)
600031f8:	09512a23          	sw	s5,148(sp)
600031fc:	09612823          	sw	s6,144(sp)
60003200:	09712623          	sw	s7,140(sp)
60003204:	09812423          	sw	s8,136(sp)
60003208:	09912223          	sw	s9,132(sp)
6000320c:	0807f793          	andi	a5,a5,128
60003210:	00050993          	mv	s3,a0
60003214:	00058913          	mv	s2,a1
60003218:	00060493          	mv	s1,a2
6000321c:	06078863          	beqz	a5,6000328c <_svfiprintf_r+0xb4>
60003220:	0105a783          	lw	a5,16(a1)
60003224:	06079463          	bnez	a5,6000328c <_svfiprintf_r+0xb4>
60003228:	04000593          	li	a1,64
6000322c:	00d12623          	sw	a3,12(sp)
60003230:	245000ef          	jal	ra,60003c74 <_malloc_r>
60003234:	00a92023          	sw	a0,0(s2)
60003238:	00a92823          	sw	a0,16(s2)
6000323c:	00c12683          	lw	a3,12(sp)
60003240:	04051263          	bnez	a0,60003284 <_svfiprintf_r+0xac>
60003244:	00c00793          	li	a5,12
60003248:	00f9a023          	sw	a5,0(s3)
6000324c:	fff00513          	li	a0,-1
60003250:	0ac12083          	lw	ra,172(sp)
60003254:	0a812403          	lw	s0,168(sp)
60003258:	0a412483          	lw	s1,164(sp)
6000325c:	0a012903          	lw	s2,160(sp)
60003260:	09c12983          	lw	s3,156(sp)
60003264:	09812a03          	lw	s4,152(sp)
60003268:	09412a83          	lw	s5,148(sp)
6000326c:	09012b03          	lw	s6,144(sp)
60003270:	08c12b83          	lw	s7,140(sp)
60003274:	08812c03          	lw	s8,136(sp)
60003278:	08412c83          	lw	s9,132(sp)
6000327c:	0b010113          	addi	sp,sp,176
60003280:	00008067          	ret
60003284:	04000793          	li	a5,64
60003288:	00f92a23          	sw	a5,20(s2)
6000328c:	02000793          	li	a5,32
60003290:	02f10ca3          	sb	a5,57(sp)
60003294:	03000793          	li	a5,48
60003298:	02012a23          	sw	zero,52(sp)
6000329c:	02f10d23          	sb	a5,58(sp)
600032a0:	00d12e23          	sw	a3,28(sp)
600032a4:	02500b93          	li	s7,37
600032a8:	00001a97          	auipc	s5,0x1
600032ac:	d60a8a93          	addi	s5,s5,-672 # 60004008 <_malloc_usable_size_r+0x15c>
600032b0:	00100c13          	li	s8,1
600032b4:	00a00b13          	li	s6,10
600032b8:	00048413          	mv	s0,s1
600032bc:	00044783          	lbu	a5,0(s0)
600032c0:	00078463          	beqz	a5,600032c8 <_svfiprintf_r+0xf0>
600032c4:	0d779863          	bne	a5,s7,60003394 <_svfiprintf_r+0x1bc>
600032c8:	40940cb3          	sub	s9,s0,s1
600032cc:	020c8663          	beqz	s9,600032f8 <_svfiprintf_r+0x120>
600032d0:	000c8693          	mv	a3,s9
600032d4:	00048613          	mv	a2,s1
600032d8:	00090593          	mv	a1,s2
600032dc:	00098513          	mv	a0,s3
600032e0:	d91ff0ef          	jal	ra,60003070 <__ssputs_r>
600032e4:	fff00793          	li	a5,-1
600032e8:	24f50a63          	beq	a0,a5,6000353c <_svfiprintf_r+0x364>
600032ec:	03412683          	lw	a3,52(sp)
600032f0:	019686b3          	add	a3,a3,s9
600032f4:	02d12a23          	sw	a3,52(sp)
600032f8:	00044783          	lbu	a5,0(s0)
600032fc:	24078063          	beqz	a5,6000353c <_svfiprintf_r+0x364>
60003300:	fff00793          	li	a5,-1
60003304:	00140493          	addi	s1,s0,1
60003308:	02012023          	sw	zero,32(sp)
6000330c:	02012623          	sw	zero,44(sp)
60003310:	02f12223          	sw	a5,36(sp)
60003314:	02012423          	sw	zero,40(sp)
60003318:	060101a3          	sb	zero,99(sp)
6000331c:	06012c23          	sw	zero,120(sp)
60003320:	0004c583          	lbu	a1,0(s1)
60003324:	00500613          	li	a2,5
60003328:	000a8513          	mv	a0,s5
6000332c:	7c4000ef          	jal	ra,60003af0 <memchr>
60003330:	00148413          	addi	s0,s1,1
60003334:	02012783          	lw	a5,32(sp)
60003338:	06051263          	bnez	a0,6000339c <_svfiprintf_r+0x1c4>
6000333c:	0107f713          	andi	a4,a5,16
60003340:	00070663          	beqz	a4,6000334c <_svfiprintf_r+0x174>
60003344:	02000713          	li	a4,32
60003348:	06e101a3          	sb	a4,99(sp)
6000334c:	0087f713          	andi	a4,a5,8
60003350:	00070663          	beqz	a4,6000335c <_svfiprintf_r+0x184>
60003354:	02b00713          	li	a4,43
60003358:	06e101a3          	sb	a4,99(sp)
6000335c:	0004c683          	lbu	a3,0(s1)
60003360:	02a00713          	li	a4,42
60003364:	04e68863          	beq	a3,a4,600033b4 <_svfiprintf_r+0x1dc>
60003368:	02c12783          	lw	a5,44(sp)
6000336c:	00048413          	mv	s0,s1
60003370:	00000693          	li	a3,0
60003374:	00900613          	li	a2,9
60003378:	00044703          	lbu	a4,0(s0)
6000337c:	00140593          	addi	a1,s0,1
60003380:	fd070713          	addi	a4,a4,-48 # 3fffffd0 <RAM_SIZE+0x3fefffd0>
60003384:	08e67a63          	bgeu	a2,a4,60003418 <_svfiprintf_r+0x240>
60003388:	04068263          	beqz	a3,600033cc <_svfiprintf_r+0x1f4>
6000338c:	02f12623          	sw	a5,44(sp)
60003390:	03c0006f          	j	600033cc <_svfiprintf_r+0x1f4>
60003394:	00140413          	addi	s0,s0,1
60003398:	f25ff06f          	j	600032bc <_svfiprintf_r+0xe4>
6000339c:	41550533          	sub	a0,a0,s5
600033a0:	00ac1533          	sll	a0,s8,a0
600033a4:	00a7e7b3          	or	a5,a5,a0
600033a8:	02f12023          	sw	a5,32(sp)
600033ac:	00040493          	mv	s1,s0
600033b0:	f71ff06f          	j	60003320 <_svfiprintf_r+0x148>
600033b4:	01c12703          	lw	a4,28(sp)
600033b8:	00470693          	addi	a3,a4,4
600033bc:	00072703          	lw	a4,0(a4)
600033c0:	00d12e23          	sw	a3,28(sp)
600033c4:	04074063          	bltz	a4,60003404 <_svfiprintf_r+0x22c>
600033c8:	02e12623          	sw	a4,44(sp)
600033cc:	00044703          	lbu	a4,0(s0)
600033d0:	02e00793          	li	a5,46
600033d4:	08f71463          	bne	a4,a5,6000345c <_svfiprintf_r+0x284>
600033d8:	00144703          	lbu	a4,1(s0)
600033dc:	02a00793          	li	a5,42
600033e0:	04f71a63          	bne	a4,a5,60003434 <_svfiprintf_r+0x25c>
600033e4:	01c12783          	lw	a5,28(sp)
600033e8:	00240413          	addi	s0,s0,2
600033ec:	00478713          	addi	a4,a5,4
600033f0:	0007a783          	lw	a5,0(a5)
600033f4:	00e12e23          	sw	a4,28(sp)
600033f8:	0207ca63          	bltz	a5,6000342c <_svfiprintf_r+0x254>
600033fc:	02f12223          	sw	a5,36(sp)
60003400:	05c0006f          	j	6000345c <_svfiprintf_r+0x284>
60003404:	40e00733          	neg	a4,a4
60003408:	0027e793          	ori	a5,a5,2
6000340c:	02e12623          	sw	a4,44(sp)
60003410:	02f12023          	sw	a5,32(sp)
60003414:	fb9ff06f          	j	600033cc <_svfiprintf_r+0x1f4>
60003418:	036787b3          	mul	a5,a5,s6
6000341c:	00100693          	li	a3,1
60003420:	00058413          	mv	s0,a1
60003424:	00e787b3          	add	a5,a5,a4
60003428:	f51ff06f          	j	60003378 <_svfiprintf_r+0x1a0>
6000342c:	fff00793          	li	a5,-1
60003430:	fcdff06f          	j	600033fc <_svfiprintf_r+0x224>
60003434:	00140413          	addi	s0,s0,1
60003438:	02012223          	sw	zero,36(sp)
6000343c:	00000693          	li	a3,0
60003440:	00000793          	li	a5,0
60003444:	00900613          	li	a2,9
60003448:	00044703          	lbu	a4,0(s0)
6000344c:	00140593          	addi	a1,s0,1
60003450:	fd070713          	addi	a4,a4,-48
60003454:	08e67c63          	bgeu	a2,a4,600034ec <_svfiprintf_r+0x314>
60003458:	fa0692e3          	bnez	a3,600033fc <_svfiprintf_r+0x224>
6000345c:	00044583          	lbu	a1,0(s0)
60003460:	00300613          	li	a2,3
60003464:	00001517          	auipc	a0,0x1
60003468:	bac50513          	addi	a0,a0,-1108 # 60004010 <_malloc_usable_size_r+0x164>
6000346c:	684000ef          	jal	ra,60003af0 <memchr>
60003470:	02050463          	beqz	a0,60003498 <_svfiprintf_r+0x2c0>
60003474:	00001797          	auipc	a5,0x1
60003478:	b9c78793          	addi	a5,a5,-1124 # 60004010 <_malloc_usable_size_r+0x164>
6000347c:	40f50533          	sub	a0,a0,a5
60003480:	04000793          	li	a5,64
60003484:	00a797b3          	sll	a5,a5,a0
60003488:	02012503          	lw	a0,32(sp)
6000348c:	00140413          	addi	s0,s0,1
60003490:	00f56533          	or	a0,a0,a5
60003494:	02a12023          	sw	a0,32(sp)
60003498:	00044583          	lbu	a1,0(s0)
6000349c:	00600613          	li	a2,6
600034a0:	00001517          	auipc	a0,0x1
600034a4:	b7450513          	addi	a0,a0,-1164 # 60004014 <_malloc_usable_size_r+0x168>
600034a8:	00140493          	addi	s1,s0,1
600034ac:	02b10c23          	sb	a1,56(sp)
600034b0:	640000ef          	jal	ra,60003af0 <memchr>
600034b4:	0a050063          	beqz	a0,60003554 <_svfiprintf_r+0x37c>
600034b8:	9fffd797          	auipc	a5,0x9fffd
600034bc:	b4878793          	addi	a5,a5,-1208 # 0 <HEAP_SIZE-0x1000>
600034c0:	04079863          	bnez	a5,60003510 <_svfiprintf_r+0x338>
600034c4:	02012703          	lw	a4,32(sp)
600034c8:	01c12783          	lw	a5,28(sp)
600034cc:	10077713          	andi	a4,a4,256
600034d0:	02070863          	beqz	a4,60003500 <_svfiprintf_r+0x328>
600034d4:	00478793          	addi	a5,a5,4
600034d8:	00f12e23          	sw	a5,28(sp)
600034dc:	03412783          	lw	a5,52(sp)
600034e0:	014787b3          	add	a5,a5,s4
600034e4:	02f12a23          	sw	a5,52(sp)
600034e8:	dd1ff06f          	j	600032b8 <_svfiprintf_r+0xe0>
600034ec:	036787b3          	mul	a5,a5,s6
600034f0:	00100693          	li	a3,1
600034f4:	00058413          	mv	s0,a1
600034f8:	00e787b3          	add	a5,a5,a4
600034fc:	f4dff06f          	j	60003448 <_svfiprintf_r+0x270>
60003500:	00778793          	addi	a5,a5,7
60003504:	ff87f793          	andi	a5,a5,-8
60003508:	00878793          	addi	a5,a5,8
6000350c:	fcdff06f          	j	600034d8 <_svfiprintf_r+0x300>
60003510:	01c10713          	addi	a4,sp,28
60003514:	00000697          	auipc	a3,0x0
60003518:	b5c68693          	addi	a3,a3,-1188 # 60003070 <__ssputs_r>
6000351c:	00090613          	mv	a2,s2
60003520:	02010593          	addi	a1,sp,32
60003524:	00098513          	mv	a0,s3
60003528:	00000097          	auipc	ra,0x0
6000352c:	000000e7          	jalr	zero # 0 <HEAP_SIZE-0x1000>
60003530:	fff00793          	li	a5,-1
60003534:	00050a13          	mv	s4,a0
60003538:	faf512e3          	bne	a0,a5,600034dc <_svfiprintf_r+0x304>
6000353c:	00c95783          	lhu	a5,12(s2)
60003540:	fff00513          	li	a0,-1
60003544:	0407f793          	andi	a5,a5,64
60003548:	d00794e3          	bnez	a5,60003250 <_svfiprintf_r+0x78>
6000354c:	03412503          	lw	a0,52(sp)
60003550:	d01ff06f          	j	60003250 <_svfiprintf_r+0x78>
60003554:	01c10713          	addi	a4,sp,28
60003558:	00000697          	auipc	a3,0x0
6000355c:	b1868693          	addi	a3,a3,-1256 # 60003070 <__ssputs_r>
60003560:	00090613          	mv	a2,s2
60003564:	02010593          	addi	a1,sp,32
60003568:	00098513          	mv	a0,s3
6000356c:	1b8000ef          	jal	ra,60003724 <_printf_i>
60003570:	fc1ff06f          	j	60003530 <_svfiprintf_r+0x358>

60003574 <_printf_common>:
_printf_common():
60003574:	fd010113          	addi	sp,sp,-48
60003578:	01512a23          	sw	s5,20(sp)
6000357c:	0105a783          	lw	a5,16(a1)
60003580:	00070a93          	mv	s5,a4
60003584:	0085a703          	lw	a4,8(a1)
60003588:	02812423          	sw	s0,40(sp)
6000358c:	02912223          	sw	s1,36(sp)
60003590:	01312e23          	sw	s3,28(sp)
60003594:	01412c23          	sw	s4,24(sp)
60003598:	02112623          	sw	ra,44(sp)
6000359c:	03212023          	sw	s2,32(sp)
600035a0:	01612823          	sw	s6,16(sp)
600035a4:	01712623          	sw	s7,12(sp)
600035a8:	00050993          	mv	s3,a0
600035ac:	00058413          	mv	s0,a1
600035b0:	00060493          	mv	s1,a2
600035b4:	00068a13          	mv	s4,a3
600035b8:	00e7d463          	bge	a5,a4,600035c0 <_printf_common+0x4c>
600035bc:	00070793          	mv	a5,a4
600035c0:	00f4a023          	sw	a5,0(s1)
600035c4:	04344703          	lbu	a4,67(s0)
600035c8:	00070663          	beqz	a4,600035d4 <_printf_common+0x60>
600035cc:	00178793          	addi	a5,a5,1
600035d0:	00f4a023          	sw	a5,0(s1)
600035d4:	00042783          	lw	a5,0(s0)
600035d8:	0207f793          	andi	a5,a5,32
600035dc:	00078863          	beqz	a5,600035ec <_printf_common+0x78>
600035e0:	0004a783          	lw	a5,0(s1)
600035e4:	00278793          	addi	a5,a5,2
600035e8:	00f4a023          	sw	a5,0(s1)
600035ec:	00042903          	lw	s2,0(s0)
600035f0:	00697913          	andi	s2,s2,6
600035f4:	00091e63          	bnez	s2,60003610 <_printf_common+0x9c>
600035f8:	01940b13          	addi	s6,s0,25
600035fc:	fff00b93          	li	s7,-1
60003600:	00c42783          	lw	a5,12(s0)
60003604:	0004a703          	lw	a4,0(s1)
60003608:	40e787b3          	sub	a5,a5,a4
6000360c:	08f94263          	blt	s2,a5,60003690 <_printf_common+0x11c>
60003610:	00042783          	lw	a5,0(s0)
60003614:	04344683          	lbu	a3,67(s0)
60003618:	0207f793          	andi	a5,a5,32
6000361c:	00d036b3          	snez	a3,a3
60003620:	0c079063          	bnez	a5,600036e0 <_printf_common+0x16c>
60003624:	04340613          	addi	a2,s0,67
60003628:	000a0593          	mv	a1,s4
6000362c:	00098513          	mv	a0,s3
60003630:	000a80e7          	jalr	s5
60003634:	fff00793          	li	a5,-1
60003638:	06f50863          	beq	a0,a5,600036a8 <_printf_common+0x134>
6000363c:	00042783          	lw	a5,0(s0)
60003640:	00400613          	li	a2,4
60003644:	0004a703          	lw	a4,0(s1)
60003648:	0067f793          	andi	a5,a5,6
6000364c:	00c42683          	lw	a3,12(s0)
60003650:	00000493          	li	s1,0
60003654:	00c79863          	bne	a5,a2,60003664 <_printf_common+0xf0>
60003658:	40e684b3          	sub	s1,a3,a4
6000365c:	0004d463          	bgez	s1,60003664 <_printf_common+0xf0>
60003660:	00000493          	li	s1,0
60003664:	00842783          	lw	a5,8(s0)
60003668:	01042703          	lw	a4,16(s0)
6000366c:	00f75663          	bge	a4,a5,60003678 <_printf_common+0x104>
60003670:	40e787b3          	sub	a5,a5,a4
60003674:	00f484b3          	add	s1,s1,a5
60003678:	00000913          	li	s2,0
6000367c:	01a40413          	addi	s0,s0,26
60003680:	fff00b13          	li	s6,-1
60003684:	09249063          	bne	s1,s2,60003704 <_printf_common+0x190>
60003688:	00000513          	li	a0,0
6000368c:	0200006f          	j	600036ac <_printf_common+0x138>
60003690:	00100693          	li	a3,1
60003694:	000b0613          	mv	a2,s6
60003698:	000a0593          	mv	a1,s4
6000369c:	00098513          	mv	a0,s3
600036a0:	000a80e7          	jalr	s5
600036a4:	03751a63          	bne	a0,s7,600036d8 <_printf_common+0x164>
600036a8:	fff00513          	li	a0,-1
600036ac:	02c12083          	lw	ra,44(sp)
600036b0:	02812403          	lw	s0,40(sp)
600036b4:	02412483          	lw	s1,36(sp)
600036b8:	02012903          	lw	s2,32(sp)
600036bc:	01c12983          	lw	s3,28(sp)
600036c0:	01812a03          	lw	s4,24(sp)
600036c4:	01412a83          	lw	s5,20(sp)
600036c8:	01012b03          	lw	s6,16(sp)
600036cc:	00c12b83          	lw	s7,12(sp)
600036d0:	03010113          	addi	sp,sp,48
600036d4:	00008067          	ret
600036d8:	00190913          	addi	s2,s2,1
600036dc:	f25ff06f          	j	60003600 <_printf_common+0x8c>
600036e0:	00d40733          	add	a4,s0,a3
600036e4:	03000613          	li	a2,48
600036e8:	04c701a3          	sb	a2,67(a4)
600036ec:	04544703          	lbu	a4,69(s0)
600036f0:	00168793          	addi	a5,a3,1
600036f4:	00f407b3          	add	a5,s0,a5
600036f8:	00268693          	addi	a3,a3,2
600036fc:	04e781a3          	sb	a4,67(a5)
60003700:	f25ff06f          	j	60003624 <_printf_common+0xb0>
60003704:	00100693          	li	a3,1
60003708:	00040613          	mv	a2,s0
6000370c:	000a0593          	mv	a1,s4
60003710:	00098513          	mv	a0,s3
60003714:	000a80e7          	jalr	s5
60003718:	f96508e3          	beq	a0,s6,600036a8 <_printf_common+0x134>
6000371c:	00190913          	addi	s2,s2,1
60003720:	f65ff06f          	j	60003684 <_printf_common+0x110>

60003724 <_printf_i>:
_printf_i():
60003724:	fd010113          	addi	sp,sp,-48
60003728:	02812423          	sw	s0,40(sp)
6000372c:	02912223          	sw	s1,36(sp)
60003730:	03212023          	sw	s2,32(sp)
60003734:	01312e23          	sw	s3,28(sp)
60003738:	02112623          	sw	ra,44(sp)
6000373c:	01412c23          	sw	s4,24(sp)
60003740:	01512a23          	sw	s5,20(sp)
60003744:	01612823          	sw	s6,16(sp)
60003748:	00068993          	mv	s3,a3
6000374c:	0185c683          	lbu	a3,24(a1)
60003750:	06e00793          	li	a5,110
60003754:	00060913          	mv	s2,a2
60003758:	00050493          	mv	s1,a0
6000375c:	00058413          	mv	s0,a1
60003760:	04358613          	addi	a2,a1,67
60003764:	28f68863          	beq	a3,a5,600039f4 <_printf_i+0x2d0>
60003768:	06d7ea63          	bltu	a5,a3,600037dc <_printf_i+0xb8>
6000376c:	06300793          	li	a5,99
60003770:	0af68e63          	beq	a3,a5,6000382c <_printf_i+0x108>
60003774:	00d7ee63          	bltu	a5,a3,60003790 <_printf_i+0x6c>
60003778:	2a068c63          	beqz	a3,60003a30 <_printf_i+0x30c>
6000377c:	05800793          	li	a5,88
60003780:	1ef68a63          	beq	a3,a5,60003974 <_printf_i+0x250>
60003784:	04240a93          	addi	s5,s0,66
60003788:	04d40123          	sb	a3,66(s0)
6000378c:	0b80006f          	j	60003844 <_printf_i+0x120>
60003790:	06400793          	li	a5,100
60003794:	00f68663          	beq	a3,a5,600037a0 <_printf_i+0x7c>
60003798:	06900793          	li	a5,105
6000379c:	fef694e3          	bne	a3,a5,60003784 <_printf_i+0x60>
600037a0:	00042783          	lw	a5,0(s0)
600037a4:	00072503          	lw	a0,0(a4)
600037a8:	0807f693          	andi	a3,a5,128
600037ac:	00450593          	addi	a1,a0,4
600037b0:	08068e63          	beqz	a3,6000384c <_printf_i+0x128>
600037b4:	00052783          	lw	a5,0(a0)
600037b8:	00b72023          	sw	a1,0(a4)
600037bc:	0007d863          	bgez	a5,600037cc <_printf_i+0xa8>
600037c0:	02d00713          	li	a4,45
600037c4:	40f007b3          	neg	a5,a5
600037c8:	04e401a3          	sb	a4,67(s0)
600037cc:	00001697          	auipc	a3,0x1
600037d0:	85068693          	addi	a3,a3,-1968 # 6000401c <_malloc_usable_size_r+0x170>
600037d4:	00a00713          	li	a4,10
600037d8:	0d80006f          	j	600038b0 <_printf_i+0x18c>
600037dc:	07300793          	li	a5,115
600037e0:	24f68e63          	beq	a3,a5,60003a3c <_printf_i+0x318>
600037e4:	02d7e263          	bltu	a5,a3,60003808 <_printf_i+0xe4>
600037e8:	06f00793          	li	a5,111
600037ec:	06f68e63          	beq	a3,a5,60003868 <_printf_i+0x144>
600037f0:	07000793          	li	a5,112
600037f4:	f8f698e3          	bne	a3,a5,60003784 <_printf_i+0x60>
600037f8:	0005a783          	lw	a5,0(a1)
600037fc:	0207e793          	ori	a5,a5,32
60003800:	00f5a023          	sw	a5,0(a1)
60003804:	0140006f          	j	60003818 <_printf_i+0xf4>
60003808:	07500793          	li	a5,117
6000380c:	04f68e63          	beq	a3,a5,60003868 <_printf_i+0x144>
60003810:	07800793          	li	a5,120
60003814:	f6f698e3          	bne	a3,a5,60003784 <_printf_i+0x60>
60003818:	07800793          	li	a5,120
6000381c:	04f402a3          	sb	a5,69(s0)
60003820:	00001697          	auipc	a3,0x1
60003824:	81068693          	addi	a3,a3,-2032 # 60004030 <_malloc_usable_size_r+0x184>
60003828:	1580006f          	j	60003980 <_printf_i+0x25c>
6000382c:	00072783          	lw	a5,0(a4)
60003830:	04258a93          	addi	s5,a1,66
60003834:	00478693          	addi	a3,a5,4
60003838:	0007a783          	lw	a5,0(a5)
6000383c:	00d72023          	sw	a3,0(a4)
60003840:	04f58123          	sb	a5,66(a1)
60003844:	00100793          	li	a5,1
60003848:	2240006f          	j	60003a6c <_printf_i+0x348>
6000384c:	0407f693          	andi	a3,a5,64
60003850:	00052783          	lw	a5,0(a0)
60003854:	00b72023          	sw	a1,0(a4)
60003858:	f60682e3          	beqz	a3,600037bc <_printf_i+0x98>
6000385c:	01079793          	slli	a5,a5,0x10
60003860:	4107d793          	srai	a5,a5,0x10
60003864:	f59ff06f          	j	600037bc <_printf_i+0x98>
60003868:	00042583          	lw	a1,0(s0)
6000386c:	00072783          	lw	a5,0(a4)
60003870:	0805f813          	andi	a6,a1,128
60003874:	00478513          	addi	a0,a5,4
60003878:	00080863          	beqz	a6,60003888 <_printf_i+0x164>
6000387c:	00a72023          	sw	a0,0(a4)
60003880:	0007a783          	lw	a5,0(a5)
60003884:	0140006f          	j	60003898 <_printf_i+0x174>
60003888:	0405f593          	andi	a1,a1,64
6000388c:	00a72023          	sw	a0,0(a4)
60003890:	fe0588e3          	beqz	a1,60003880 <_printf_i+0x15c>
60003894:	0007d783          	lhu	a5,0(a5)
60003898:	06f00713          	li	a4,111
6000389c:	14e68063          	beq	a3,a4,600039dc <_printf_i+0x2b8>
600038a0:	00000697          	auipc	a3,0x0
600038a4:	77c68693          	addi	a3,a3,1916 # 6000401c <_malloc_usable_size_r+0x170>
600038a8:	00a00713          	li	a4,10
600038ac:	040401a3          	sb	zero,67(s0)
600038b0:	00442583          	lw	a1,4(s0)
600038b4:	00b42423          	sw	a1,8(s0)
600038b8:	0005c863          	bltz	a1,600038c8 <_printf_i+0x1a4>
600038bc:	00042503          	lw	a0,0(s0)
600038c0:	ffb57513          	andi	a0,a0,-5
600038c4:	00a42023          	sw	a0,0(s0)
600038c8:	00079663          	bnez	a5,600038d4 <_printf_i+0x1b0>
600038cc:	00060a93          	mv	s5,a2
600038d0:	02058263          	beqz	a1,600038f4 <_printf_i+0x1d0>
600038d4:	00060a93          	mv	s5,a2
600038d8:	02e7f5b3          	remu	a1,a5,a4
600038dc:	fffa8a93          	addi	s5,s5,-1
600038e0:	00b685b3          	add	a1,a3,a1
600038e4:	0005c583          	lbu	a1,0(a1)
600038e8:	00ba8023          	sb	a1,0(s5)
600038ec:	02e7d5b3          	divu	a1,a5,a4
600038f0:	0ee7fe63          	bgeu	a5,a4,600039ec <_printf_i+0x2c8>
600038f4:	00800793          	li	a5,8
600038f8:	02f71463          	bne	a4,a5,60003920 <_printf_i+0x1fc>
600038fc:	00042783          	lw	a5,0(s0)
60003900:	0017f793          	andi	a5,a5,1
60003904:	00078e63          	beqz	a5,60003920 <_printf_i+0x1fc>
60003908:	00442703          	lw	a4,4(s0)
6000390c:	01042783          	lw	a5,16(s0)
60003910:	00e7c863          	blt	a5,a4,60003920 <_printf_i+0x1fc>
60003914:	03000793          	li	a5,48
60003918:	fefa8fa3          	sb	a5,-1(s5)
6000391c:	fffa8a93          	addi	s5,s5,-1
60003920:	41560633          	sub	a2,a2,s5
60003924:	00c42823          	sw	a2,16(s0)
60003928:	00098713          	mv	a4,s3
6000392c:	00090693          	mv	a3,s2
60003930:	00c10613          	addi	a2,sp,12
60003934:	00040593          	mv	a1,s0
60003938:	00048513          	mv	a0,s1
6000393c:	c39ff0ef          	jal	ra,60003574 <_printf_common>
60003940:	fff00a13          	li	s4,-1
60003944:	13451a63          	bne	a0,s4,60003a78 <_printf_i+0x354>
60003948:	fff00513          	li	a0,-1
6000394c:	02c12083          	lw	ra,44(sp)
60003950:	02812403          	lw	s0,40(sp)
60003954:	02412483          	lw	s1,36(sp)
60003958:	02012903          	lw	s2,32(sp)
6000395c:	01c12983          	lw	s3,28(sp)
60003960:	01812a03          	lw	s4,24(sp)
60003964:	01412a83          	lw	s5,20(sp)
60003968:	01012b03          	lw	s6,16(sp)
6000396c:	03010113          	addi	sp,sp,48
60003970:	00008067          	ret
60003974:	04d582a3          	sb	a3,69(a1)
60003978:	00000697          	auipc	a3,0x0
6000397c:	6a468693          	addi	a3,a3,1700 # 6000401c <_malloc_usable_size_r+0x170>
60003980:	00042583          	lw	a1,0(s0)
60003984:	00072503          	lw	a0,0(a4)
60003988:	0805f813          	andi	a6,a1,128
6000398c:	00052783          	lw	a5,0(a0)
60003990:	00450513          	addi	a0,a0,4
60003994:	02080863          	beqz	a6,600039c4 <_printf_i+0x2a0>
60003998:	00a72023          	sw	a0,0(a4)
6000399c:	0015f713          	andi	a4,a1,1
600039a0:	00070663          	beqz	a4,600039ac <_printf_i+0x288>
600039a4:	0205e593          	ori	a1,a1,32
600039a8:	00b42023          	sw	a1,0(s0)
600039ac:	01000713          	li	a4,16
600039b0:	ee079ee3          	bnez	a5,600038ac <_printf_i+0x188>
600039b4:	00042583          	lw	a1,0(s0)
600039b8:	fdf5f593          	andi	a1,a1,-33
600039bc:	00b42023          	sw	a1,0(s0)
600039c0:	eedff06f          	j	600038ac <_printf_i+0x188>
600039c4:	0405f813          	andi	a6,a1,64
600039c8:	00a72023          	sw	a0,0(a4)
600039cc:	fc0808e3          	beqz	a6,6000399c <_printf_i+0x278>
600039d0:	01079793          	slli	a5,a5,0x10
600039d4:	0107d793          	srli	a5,a5,0x10
600039d8:	fc5ff06f          	j	6000399c <_printf_i+0x278>
600039dc:	00000697          	auipc	a3,0x0
600039e0:	64068693          	addi	a3,a3,1600 # 6000401c <_malloc_usable_size_r+0x170>
600039e4:	00800713          	li	a4,8
600039e8:	ec5ff06f          	j	600038ac <_printf_i+0x188>
600039ec:	00058793          	mv	a5,a1
600039f0:	ee9ff06f          	j	600038d8 <_printf_i+0x1b4>
600039f4:	0005a683          	lw	a3,0(a1)
600039f8:	00072783          	lw	a5,0(a4)
600039fc:	0145a583          	lw	a1,20(a1)
60003a00:	0806f813          	andi	a6,a3,128
60003a04:	00478513          	addi	a0,a5,4
60003a08:	00080a63          	beqz	a6,60003a1c <_printf_i+0x2f8>
60003a0c:	00a72023          	sw	a0,0(a4)
60003a10:	0007a783          	lw	a5,0(a5)
60003a14:	00b7a023          	sw	a1,0(a5)
60003a18:	0180006f          	j	60003a30 <_printf_i+0x30c>
60003a1c:	00a72023          	sw	a0,0(a4)
60003a20:	0406f693          	andi	a3,a3,64
60003a24:	0007a783          	lw	a5,0(a5)
60003a28:	fe0686e3          	beqz	a3,60003a14 <_printf_i+0x2f0>
60003a2c:	00b79023          	sh	a1,0(a5)
60003a30:	00042823          	sw	zero,16(s0)
60003a34:	00060a93          	mv	s5,a2
60003a38:	ef1ff06f          	j	60003928 <_printf_i+0x204>
60003a3c:	00072783          	lw	a5,0(a4)
60003a40:	0045a603          	lw	a2,4(a1)
60003a44:	00000593          	li	a1,0
60003a48:	00478693          	addi	a3,a5,4
60003a4c:	00d72023          	sw	a3,0(a4)
60003a50:	0007aa83          	lw	s5,0(a5)
60003a54:	000a8513          	mv	a0,s5
60003a58:	098000ef          	jal	ra,60003af0 <memchr>
60003a5c:	00050663          	beqz	a0,60003a68 <_printf_i+0x344>
60003a60:	41550533          	sub	a0,a0,s5
60003a64:	00a42223          	sw	a0,4(s0)
60003a68:	00442783          	lw	a5,4(s0)
60003a6c:	00f42823          	sw	a5,16(s0)
60003a70:	040401a3          	sb	zero,67(s0)
60003a74:	eb5ff06f          	j	60003928 <_printf_i+0x204>
60003a78:	01042683          	lw	a3,16(s0)
60003a7c:	000a8613          	mv	a2,s5
60003a80:	00090593          	mv	a1,s2
60003a84:	00048513          	mv	a0,s1
60003a88:	000980e7          	jalr	s3
60003a8c:	eb450ee3          	beq	a0,s4,60003948 <_printf_i+0x224>
60003a90:	00042783          	lw	a5,0(s0)
60003a94:	0027f793          	andi	a5,a5,2
60003a98:	04079463          	bnez	a5,60003ae0 <_printf_i+0x3bc>
60003a9c:	00c12783          	lw	a5,12(sp)
60003aa0:	00c42503          	lw	a0,12(s0)
60003aa4:	eaf554e3          	bge	a0,a5,6000394c <_printf_i+0x228>
60003aa8:	00078513          	mv	a0,a5
60003aac:	ea1ff06f          	j	6000394c <_printf_i+0x228>
60003ab0:	00100693          	li	a3,1
60003ab4:	000a8613          	mv	a2,s5
60003ab8:	00090593          	mv	a1,s2
60003abc:	00048513          	mv	a0,s1
60003ac0:	000980e7          	jalr	s3
60003ac4:	e96502e3          	beq	a0,s6,60003948 <_printf_i+0x224>
60003ac8:	001a0a13          	addi	s4,s4,1
60003acc:	00c42783          	lw	a5,12(s0)
60003ad0:	00c12703          	lw	a4,12(sp)
60003ad4:	40e787b3          	sub	a5,a5,a4
60003ad8:	fcfa4ce3          	blt	s4,a5,60003ab0 <_printf_i+0x38c>
60003adc:	fc1ff06f          	j	60003a9c <_printf_i+0x378>
60003ae0:	00000a13          	li	s4,0
60003ae4:	01940a93          	addi	s5,s0,25
60003ae8:	fff00b13          	li	s6,-1
60003aec:	fe1ff06f          	j	60003acc <_printf_i+0x3a8>

60003af0 <memchr>:
memchr():
60003af0:	0ff5f593          	andi	a1,a1,255
60003af4:	00c50633          	add	a2,a0,a2
60003af8:	00c51663          	bne	a0,a2,60003b04 <memchr+0x14>
60003afc:	00000513          	li	a0,0
60003b00:	00008067          	ret
60003b04:	00054783          	lbu	a5,0(a0)
60003b08:	feb78ce3          	beq	a5,a1,60003b00 <memchr+0x10>
60003b0c:	00150513          	addi	a0,a0,1
60003b10:	fe9ff06f          	j	60003af8 <memchr+0x8>

60003b14 <memmove>:
memmove():
60003b14:	04a5fa63          	bgeu	a1,a0,60003b68 <memmove+0x54>
60003b18:	00c586b3          	add	a3,a1,a2
60003b1c:	04d57663          	bgeu	a0,a3,60003b68 <memmove+0x54>
60003b20:	fff64593          	not	a1,a2
60003b24:	00000793          	li	a5,0
60003b28:	fff78793          	addi	a5,a5,-1
60003b2c:	00f59463          	bne	a1,a5,60003b34 <memmove+0x20>
60003b30:	00008067          	ret
60003b34:	00f68733          	add	a4,a3,a5
60003b38:	00074803          	lbu	a6,0(a4)
60003b3c:	00c78733          	add	a4,a5,a2
60003b40:	00e50733          	add	a4,a0,a4
60003b44:	01070023          	sb	a6,0(a4)
60003b48:	fe1ff06f          	j	60003b28 <memmove+0x14>
60003b4c:	00f58733          	add	a4,a1,a5
60003b50:	00074683          	lbu	a3,0(a4)
60003b54:	00f50733          	add	a4,a0,a5
60003b58:	00178793          	addi	a5,a5,1
60003b5c:	00d70023          	sb	a3,0(a4)
60003b60:	fef616e3          	bne	a2,a5,60003b4c <memmove+0x38>
60003b64:	00008067          	ret
60003b68:	00000793          	li	a5,0
60003b6c:	ff5ff06f          	j	60003b60 <memmove+0x4c>

60003b70 <_free_r>:
_free_r():
60003b70:	10058063          	beqz	a1,60003c70 <_free_r+0x100>
60003b74:	ffc5a783          	lw	a5,-4(a1)
60003b78:	ff010113          	addi	sp,sp,-16
60003b7c:	00812423          	sw	s0,8(sp)
60003b80:	00112623          	sw	ra,12(sp)
60003b84:	00912223          	sw	s1,4(sp)
60003b88:	ffc58413          	addi	s0,a1,-4
60003b8c:	0007d463          	bgez	a5,60003b94 <_free_r+0x24>
60003b90:	00f40433          	add	s0,s0,a5
60003b94:	00050493          	mv	s1,a0
60003b98:	30c000ef          	jal	ra,60003ea4 <__malloc_lock>
60003b9c:	97818793          	addi	a5,gp,-1672 # 80000178 <__malloc_free_list>
60003ba0:	0007a783          	lw	a5,0(a5)
60003ba4:	02079263          	bnez	a5,60003bc8 <_free_r+0x58>
60003ba8:	00042223          	sw	zero,4(s0)
60003bac:	9681ac23          	sw	s0,-1672(gp) # 80000178 <__malloc_free_list>
60003bb0:	00812403          	lw	s0,8(sp)
60003bb4:	00c12083          	lw	ra,12(sp)
60003bb8:	00048513          	mv	a0,s1
60003bbc:	00412483          	lw	s1,4(sp)
60003bc0:	01010113          	addi	sp,sp,16
60003bc4:	2e40006f          	j	60003ea8 <__malloc_unlock>
60003bc8:	02f47663          	bgeu	s0,a5,60003bf4 <_free_r+0x84>
60003bcc:	00042683          	lw	a3,0(s0)
60003bd0:	00d40733          	add	a4,s0,a3
60003bd4:	00e79a63          	bne	a5,a4,60003be8 <_free_r+0x78>
60003bd8:	0007a703          	lw	a4,0(a5)
60003bdc:	0047a783          	lw	a5,4(a5)
60003be0:	00d70733          	add	a4,a4,a3
60003be4:	00e42023          	sw	a4,0(s0)
60003be8:	00f42223          	sw	a5,4(s0)
60003bec:	fc1ff06f          	j	60003bac <_free_r+0x3c>
60003bf0:	00070793          	mv	a5,a4
60003bf4:	0047a703          	lw	a4,4(a5)
60003bf8:	00070463          	beqz	a4,60003c00 <_free_r+0x90>
60003bfc:	fee47ae3          	bgeu	s0,a4,60003bf0 <_free_r+0x80>
60003c00:	0007a683          	lw	a3,0(a5)
60003c04:	00d78633          	add	a2,a5,a3
60003c08:	02861863          	bne	a2,s0,60003c38 <_free_r+0xc8>
60003c0c:	00042603          	lw	a2,0(s0)
60003c10:	00c686b3          	add	a3,a3,a2
60003c14:	00d7a023          	sw	a3,0(a5)
60003c18:	00d78633          	add	a2,a5,a3
60003c1c:	f8c71ae3          	bne	a4,a2,60003bb0 <_free_r+0x40>
60003c20:	00072603          	lw	a2,0(a4)
60003c24:	00472703          	lw	a4,4(a4)
60003c28:	00d606b3          	add	a3,a2,a3
60003c2c:	00d7a023          	sw	a3,0(a5)
60003c30:	00e7a223          	sw	a4,4(a5)
60003c34:	f7dff06f          	j	60003bb0 <_free_r+0x40>
60003c38:	00c47863          	bgeu	s0,a2,60003c48 <_free_r+0xd8>
60003c3c:	00c00793          	li	a5,12
60003c40:	00f4a023          	sw	a5,0(s1)
60003c44:	f6dff06f          	j	60003bb0 <_free_r+0x40>
60003c48:	00042603          	lw	a2,0(s0)
60003c4c:	00c406b3          	add	a3,s0,a2
60003c50:	00d71a63          	bne	a4,a3,60003c64 <_free_r+0xf4>
60003c54:	00072683          	lw	a3,0(a4)
60003c58:	00472703          	lw	a4,4(a4)
60003c5c:	00c686b3          	add	a3,a3,a2
60003c60:	00d42023          	sw	a3,0(s0)
60003c64:	00e42223          	sw	a4,4(s0)
60003c68:	0087a223          	sw	s0,4(a5)
60003c6c:	f45ff06f          	j	60003bb0 <_free_r+0x40>
60003c70:	00008067          	ret

60003c74 <_malloc_r>:
_malloc_r():
60003c74:	fe010113          	addi	sp,sp,-32
60003c78:	00912a23          	sw	s1,20(sp)
60003c7c:	00358493          	addi	s1,a1,3
60003c80:	ffc4f493          	andi	s1,s1,-4
60003c84:	00112e23          	sw	ra,28(sp)
60003c88:	00812c23          	sw	s0,24(sp)
60003c8c:	01212823          	sw	s2,16(sp)
60003c90:	01312623          	sw	s3,12(sp)
60003c94:	00848493          	addi	s1,s1,8
60003c98:	00c00793          	li	a5,12
60003c9c:	06f4f463          	bgeu	s1,a5,60003d04 <_malloc_r+0x90>
60003ca0:	00c00493          	li	s1,12
60003ca4:	06b4e263          	bltu	s1,a1,60003d08 <_malloc_r+0x94>
60003ca8:	00050913          	mv	s2,a0
60003cac:	1f8000ef          	jal	ra,60003ea4 <__malloc_lock>
60003cb0:	97818793          	addi	a5,gp,-1672 # 80000178 <__malloc_free_list>
60003cb4:	0007a703          	lw	a4,0(a5)
60003cb8:	00070413          	mv	s0,a4
60003cbc:	06041a63          	bnez	s0,60003d30 <_malloc_r+0xbc>
60003cc0:	97c18793          	addi	a5,gp,-1668 # 8000017c <__malloc_sbrk_start>
60003cc4:	0007a783          	lw	a5,0(a5)
60003cc8:	00079a63          	bnez	a5,60003cdc <_malloc_r+0x68>
60003ccc:	00000593          	li	a1,0
60003cd0:	00090513          	mv	a0,s2
60003cd4:	184000ef          	jal	ra,60003e58 <_sbrk_r>
60003cd8:	96a1ae23          	sw	a0,-1668(gp) # 8000017c <__malloc_sbrk_start>
60003cdc:	00048593          	mv	a1,s1
60003ce0:	00090513          	mv	a0,s2
60003ce4:	174000ef          	jal	ra,60003e58 <_sbrk_r>
60003ce8:	fff00993          	li	s3,-1
60003cec:	0b351a63          	bne	a0,s3,60003da0 <_malloc_r+0x12c>
60003cf0:	00c00793          	li	a5,12
60003cf4:	00f92023          	sw	a5,0(s2)
60003cf8:	00090513          	mv	a0,s2
60003cfc:	1ac000ef          	jal	ra,60003ea8 <__malloc_unlock>
60003d00:	0100006f          	j	60003d10 <_malloc_r+0x9c>
60003d04:	fa04d0e3          	bgez	s1,60003ca4 <_malloc_r+0x30>
60003d08:	00c00793          	li	a5,12
60003d0c:	00f52023          	sw	a5,0(a0)
60003d10:	00000513          	li	a0,0
60003d14:	01c12083          	lw	ra,28(sp)
60003d18:	01812403          	lw	s0,24(sp)
60003d1c:	01412483          	lw	s1,20(sp)
60003d20:	01012903          	lw	s2,16(sp)
60003d24:	00c12983          	lw	s3,12(sp)
60003d28:	02010113          	addi	sp,sp,32
60003d2c:	00008067          	ret
60003d30:	00042783          	lw	a5,0(s0)
60003d34:	409787b3          	sub	a5,a5,s1
60003d38:	0407ce63          	bltz	a5,60003d94 <_malloc_r+0x120>
60003d3c:	00b00693          	li	a3,11
60003d40:	00f6fa63          	bgeu	a3,a5,60003d54 <_malloc_r+0xe0>
60003d44:	00f42023          	sw	a5,0(s0)
60003d48:	00f40433          	add	s0,s0,a5
60003d4c:	00942023          	sw	s1,0(s0)
60003d50:	0100006f          	j	60003d60 <_malloc_r+0xec>
60003d54:	00442783          	lw	a5,4(s0)
60003d58:	02871a63          	bne	a4,s0,60003d8c <_malloc_r+0x118>
60003d5c:	96f1ac23          	sw	a5,-1672(gp) # 80000178 <__malloc_free_list>
60003d60:	00090513          	mv	a0,s2
60003d64:	144000ef          	jal	ra,60003ea8 <__malloc_unlock>
60003d68:	00b40513          	addi	a0,s0,11
60003d6c:	00440793          	addi	a5,s0,4
60003d70:	ff857513          	andi	a0,a0,-8
60003d74:	40f50733          	sub	a4,a0,a5
60003d78:	f8070ee3          	beqz	a4,60003d14 <_malloc_r+0xa0>
60003d7c:	00e40433          	add	s0,s0,a4
60003d80:	40a787b3          	sub	a5,a5,a0
60003d84:	00f42023          	sw	a5,0(s0)
60003d88:	f8dff06f          	j	60003d14 <_malloc_r+0xa0>
60003d8c:	00f72223          	sw	a5,4(a4)
60003d90:	fd1ff06f          	j	60003d60 <_malloc_r+0xec>
60003d94:	00040713          	mv	a4,s0
60003d98:	00442403          	lw	s0,4(s0)
60003d9c:	f21ff06f          	j	60003cbc <_malloc_r+0x48>
60003da0:	00350413          	addi	s0,a0,3
60003da4:	ffc47413          	andi	s0,s0,-4
60003da8:	fa8502e3          	beq	a0,s0,60003d4c <_malloc_r+0xd8>
60003dac:	40a405b3          	sub	a1,s0,a0
60003db0:	00090513          	mv	a0,s2
60003db4:	0a4000ef          	jal	ra,60003e58 <_sbrk_r>
60003db8:	f9351ae3          	bne	a0,s3,60003d4c <_malloc_r+0xd8>
60003dbc:	f35ff06f          	j	60003cf0 <_malloc_r+0x7c>

60003dc0 <_realloc_r>:
_realloc_r():
60003dc0:	00059663          	bnez	a1,60003dcc <_realloc_r+0xc>
60003dc4:	00060593          	mv	a1,a2
60003dc8:	eadff06f          	j	60003c74 <_malloc_r>
60003dcc:	fe010113          	addi	sp,sp,-32
60003dd0:	00812c23          	sw	s0,24(sp)
60003dd4:	00112e23          	sw	ra,28(sp)
60003dd8:	00912a23          	sw	s1,20(sp)
60003ddc:	01212823          	sw	s2,16(sp)
60003de0:	01312623          	sw	s3,12(sp)
60003de4:	00060413          	mv	s0,a2
60003de8:	02061663          	bnez	a2,60003e14 <_realloc_r+0x54>
60003dec:	d85ff0ef          	jal	ra,60003b70 <_free_r>
60003df0:	00000913          	li	s2,0
60003df4:	01c12083          	lw	ra,28(sp)
60003df8:	01812403          	lw	s0,24(sp)
60003dfc:	00090513          	mv	a0,s2
60003e00:	01412483          	lw	s1,20(sp)
60003e04:	01012903          	lw	s2,16(sp)
60003e08:	00c12983          	lw	s3,12(sp)
60003e0c:	02010113          	addi	sp,sp,32
60003e10:	00008067          	ret
60003e14:	00058493          	mv	s1,a1
60003e18:	00050993          	mv	s3,a0
60003e1c:	090000ef          	jal	ra,60003eac <_malloc_usable_size_r>
60003e20:	00048913          	mv	s2,s1
60003e24:	fc8578e3          	bgeu	a0,s0,60003df4 <_realloc_r+0x34>
60003e28:	00040593          	mv	a1,s0
60003e2c:	00098513          	mv	a0,s3
60003e30:	e45ff0ef          	jal	ra,60003c74 <_malloc_r>
60003e34:	00050913          	mv	s2,a0
60003e38:	fa050ee3          	beqz	a0,60003df4 <_realloc_r+0x34>
60003e3c:	00048593          	mv	a1,s1
60003e40:	00040613          	mv	a2,s0
60003e44:	824fe0ef          	jal	ra,60001e68 <memcpy>
60003e48:	00048593          	mv	a1,s1
60003e4c:	00098513          	mv	a0,s3
60003e50:	d21ff0ef          	jal	ra,60003b70 <_free_r>
60003e54:	fa1ff06f          	j	60003df4 <_realloc_r+0x34>

60003e58 <_sbrk_r>:
_sbrk_r():
60003e58:	ff010113          	addi	sp,sp,-16
60003e5c:	00812423          	sw	s0,8(sp)
60003e60:	00050413          	mv	s0,a0
60003e64:	00058513          	mv	a0,a1
60003e68:	20015797          	auipc	a5,0x20015
60003e6c:	3e07a023          	sw	zero,992(a5) # 80019248 <errno>
60003e70:	00112623          	sw	ra,12(sp)
60003e74:	ba1fc0ef          	jal	ra,60000a14 <_sbrk>
60003e78:	fff00793          	li	a5,-1
60003e7c:	00f51c63          	bne	a0,a5,60003e94 <_sbrk_r+0x3c>
60003e80:	20015797          	auipc	a5,0x20015
60003e84:	3c878793          	addi	a5,a5,968 # 80019248 <errno>
60003e88:	0007a783          	lw	a5,0(a5)
60003e8c:	00078463          	beqz	a5,60003e94 <_sbrk_r+0x3c>
60003e90:	00f42023          	sw	a5,0(s0)
60003e94:	00c12083          	lw	ra,12(sp)
60003e98:	00812403          	lw	s0,8(sp)
60003e9c:	01010113          	addi	sp,sp,16
60003ea0:	00008067          	ret

60003ea4 <__malloc_lock>:
__malloc_lock():
60003ea4:	00008067          	ret

60003ea8 <__malloc_unlock>:
__malloc_unlock():
60003ea8:	00008067          	ret

60003eac <_malloc_usable_size_r>:
_malloc_usable_size_r():
60003eac:	ffc5a783          	lw	a5,-4(a1)
60003eb0:	ffc78513          	addi	a0,a5,-4
60003eb4:	0007d863          	bgez	a5,60003ec4 <_malloc_usable_size_r+0x18>
60003eb8:	00a585b3          	add	a1,a1,a0
60003ebc:	0005a783          	lw	a5,0(a1)
60003ec0:	00f50533          	add	a0,a0,a5
60003ec4:	00008067          	ret
	...
60003ed0:	6568                	flw	fa0,76(a0)
60003ed2:	6c6c                	flw	fa1,92(s0)
60003ed4:	0000006f          	j	60003ed4 <_malloc_usable_size_r+0x28>
60003ed8:	4449                	li	s0,18
60003eda:	454c                	lw	a1,12(a0)
60003edc:	0000                	unimp
60003ede:	0000                	unimp
60003ee0:	0d0a                	slli	s10,s10,0x2
60003ee2:	4328                	lw	a0,64(a4)
60003ee4:	2029                	jal	60003eee <_malloc_usable_size_r+0x42>
60003ee6:	79706f43          	fmadd.s	ft10,ft0,fs7,fa5,unknown
60003eea:	6972                	flw	fs2,28(sp)
60003eec:	20746867          	0x20746867
60003ef0:	3032                	fld	ft0,296(sp)
60003ef2:	3931                	jal	60003b0e <memchr+0x1e>
60003ef4:	4620                	lw	s0,72(a2)
60003ef6:	7475                	lui	s0,0xffffd
60003ef8:	7275                	lui	tp,0xffffd
60003efa:	2065                	jal	60003fa2 <_malloc_usable_size_r+0xf6>
60003efc:	6c45                	lui	s8,0x11
60003efe:	6365                	lui	t1,0x19
60003f00:	7274                	flw	fa3,100(a2)
60003f02:	63696e6f          	jal	t3,6009a538 <__data_load+0x964c8>
60003f06:	202d2073          	csrs	hedeleg,s10
60003f0a:	61657243          	fmadd.s	ft4,fa0,fs6,fa2
60003f0e:	6974                	flw	fa3,84(a0)
60003f10:	6576                	flw	fa0,92(sp)
60003f12:	4220                	lw	s0,64(a2)
60003f14:	6472616f          	jal	sp,6002ad5a <__data_load+0x26cea>
60003f18:	0d0a                	slli	s10,s10,0x2
60003f1a:	0000                	unimp
60003f1c:	0d0a                	slli	s10,s10,0x2
60003f1e:	7246                	flw	ft4,112(sp)
60003f20:	6565                	lui	a0,0x19
60003f22:	5452                	lw	s0,52(sp)
60003f24:	5320534f          	fnmadd.d	ft6,ft0,fs2,fa0,unknown
60003f28:	6d69                	lui	s10,0x1a
60003f2a:	6c70                	flw	fa2,92(s0)
60003f2c:	2065                	jal	60003fd4 <_malloc_usable_size_r+0x128>
60003f2e:	6544                	flw	fs1,12(a0)
60003f30:	6f6d                	lui	t5,0x1b
60003f32:	0d0a                	slli	s10,s10,0x2
60003f34:	2020                	fld	fs0,64(s0)
60003f36:	6854                	flw	fa3,20(s0)
60003f38:	7369                	lui	t1,0xffffa
60003f3a:	6420                	flw	fs0,72(s0)
60003f3c:	6d65                	lui	s10,0x19
60003f3e:	7263206f          	j	60036664 <__data_load+0x325f4>
60003f42:	6165                	addi	sp,sp,112
60003f44:	6574                	flw	fa3,76(a0)
60003f46:	20332073          	csrs	hideleg,t1
60003f4a:	6c62                	flw	fs8,24(sp)
60003f4c:	6e69                	lui	t3,0x1a
60003f4e:	676e696b          	0x676e696b
60003f52:	4c20                	lw	s0,88(s0)
60003f54:	4445                	li	s0,17
60003f56:	7420                	flw	fs0,104(s0)
60003f58:	7361                	lui	t1,0xffff8
60003f5a:	6120736b          	0x6120736b
60003f5e:	646e                	flw	fs0,216(sp)
60003f60:	6120                	flw	fs0,64(a0)
60003f62:	76697463          	bgeu	s2,t1,600046ca <__data_load+0x65a>
60003f66:	7461                	lui	s0,0xffff8
60003f68:	2065                	jal	60004010 <_malloc_usable_size_r+0x164>
60003f6a:	6874                	flw	fa3,84(s0)
60003f6c:	2065                	jal	60004014 <_malloc_usable_size_r+0x168>
60003f6e:	7246                	flw	ft4,112(sp)
60003f70:	6565                	lui	a0,0x19
60003f72:	5452                	lw	s0,52(sp)
60003f74:	0d0a534f          	0xd0a534f
60003f78:	2020                	fld	fs0,64(s0)
60003f7a:	65686373          	csrrsi	t1,0x656,16
60003f7e:	7564                	flw	fs1,108(a0)
60003f80:	656c                	flw	fa1,76(a0)
60003f82:	2e72                	fld	ft8,280(sp)
60003f84:	4c20                	lw	s0,88(s0)
60003f86:	4445                	li	s0,17
60003f88:	2031                	jal	60003f94 <_malloc_usable_size_r+0xe8>
60003f8a:	6552                	flw	fa0,20(sp)
60003f8c:	2c64                	fld	fs1,216(s0)
60003f8e:	4c20                	lw	s0,88(s0)
60003f90:	4445                	li	s0,17
60003f92:	2032                	fld	ft0,264(sp)
60003f94:	65657247          	0x65657247
60003f98:	206e                	fld	ft0,216(sp)
60003f9a:	6e61                	lui	t3,0x18
60003f9c:	2064                	fld	fs1,192(s0)
60003f9e:	6552                	flw	fa0,20(sp)
60003fa0:	2064                	fld	fs1,192(s0)
60003fa2:	756f6873          	csrrsi	a6,0x756,30
60003fa6:	646c                	flw	fa1,76(s0)
60003fa8:	7320                	flw	fs0,96(a4)
60003faa:	6174                	flw	fa3,68(a0)
60003fac:	7472                	flw	fs0,60(sp)
60003fae:	6220                	flw	fs0,64(a2)
60003fb0:	696c                	flw	fa1,84(a0)
60003fb2:	6b6e                	flw	fs6,216(sp)
60003fb4:	6e69                	lui	t3,0x1a
60003fb6:	0d0a2e67          	0xd0a2e67
60003fba:	0000                	unimp
60003fbc:	480d                	li	a6,3
60003fbe:	6c65                	lui	s8,0x19
60003fc0:	6f6c                	flw	fa1,92(a4)
60003fc2:	5720                	lw	s0,104(a4)
60003fc4:	646c726f          	jal	tp,600cb60a <__data_load+0xc759a>
60003fc8:	2021                	jal	60003fd0 <_malloc_usable_size_r+0x124>
60003fca:	6c46                	flw	fs8,80(sp)
60003fcc:	7069                	c.lui	zero,0xffffa
60003fce:	7420                	flw	fs0,104(s0)
60003fd0:	6568                	flw	fa0,76(a0)
60003fd2:	7320                	flw	fs0,96(a4)
60003fd4:	63746977          	0x63746977
60003fd8:	2068                	fld	fa0,192(s0)
60003fda:	6f74                	flw	fa3,92(a4)
60003fdc:	7220                	flw	fs0,96(a2)
60003fde:	6e75                	lui	t3,0x1d
60003fe0:	6f20                	flw	fs0,88(a4)
60003fe2:	2f6e                	fld	ft10,216(sp)
60003fe4:	2066666f          	jal	a2,6006a1ea <__data_load+0x6617a>
60003fe8:	454c                	lw	a1,12(a0)
60003fea:	2e44                	fld	fs1,152(a2)
60003fec:	0d0a                	slli	s10,s10,0x2
60003fee:	0000                	unimp
60003ff0:	6c62                	flw	fs8,24(sp)
60003ff2:	6e69                	lui	t3,0x1a
60003ff4:	0000006b          	0x6b
60003ff8:	74697773          	csrrci	a4,0x746,18
60003ffc:	3d206863          	bltu	zero,s2,600043cc <__data_load+0x35c>
60004000:	2520                	fld	fs0,72(a0)
60004002:	0a64                	addi	s1,sp,284
60004004:	000d                	c.nop	3
60004006:	0000                	unimp
60004008:	2b302d23          	sw	s3,698(zero) # 2ba <HEAP_SIZE-0xd46>
6000400c:	0020                	addi	s0,sp,8
6000400e:	0000                	unimp
60004010:	6c68                	flw	fa0,92(s0)
60004012:	004c                	addi	a1,sp,4
60004014:	6665                	lui	a2,0x19
60004016:	47464567          	0x47464567
6000401a:	0000                	unimp
6000401c:	3130                	fld	fa2,96(a0)
6000401e:	3332                	fld	ft6,296(sp)
60004020:	3534                	fld	fa3,104(a0)
60004022:	3736                	fld	fa4,360(sp)
60004024:	3938                	fld	fa4,112(a0)
60004026:	4241                	li	tp,16
60004028:	46454443          	fmadd.q	fs0,fa0,ft4,fs0,rmm
6000402c:	0000                	unimp
6000402e:	0000                	unimp
60004030:	3130                	fld	fa2,96(a0)
60004032:	3332                	fld	ft6,296(sp)
60004034:	3534                	fld	fa3,104(a0)
60004036:	3736                	fld	fa4,360(sp)
60004038:	3938                	fld	fa4,112(a0)
6000403a:	6261                	lui	tp,0x18
6000403c:	66656463          	bltu	a0,t1,600046a4 <__data_load+0x634>
	...
