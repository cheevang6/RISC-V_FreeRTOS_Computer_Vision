
PF_MiV_OTB_Morse.elf:     file format elf32-littleriscv
PF_MiV_OTB_Morse.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x60000000

Program Header:
    LOAD off    0x00001000 vaddr 0x60000000 paddr 0x60000000 align 2**12
         filesz 0x00003ef0 memsz 0x00003ef0 flags r-x
    LOAD off    0x00005000 vaddr 0x80000000 paddr 0x60003ef0 align 2**12
         filesz 0x00000090 memsz 0x00000110 flags rw-
    LOAD off    0x00005110 vaddr 0x80000110 paddr 0x60003f80 align 2**12
         filesz 0x00000000 memsz 0x00019140 flags rw-
    LOAD off    0x00005250 vaddr 0x80019250 paddr 0x60003f80 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00005250 vaddr 0x8001a250 paddr 0x60003f80 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .text             00003ef0  60000000  60000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata            00000010  80000000  60003ef0  00005000  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data             00000080  80000010  60003f00  00005010  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss             00000080  80000090  60003f80  00005090  2**4  ALLOC
  4 .bss              00019140  80000110  60003f80  00005110  2**4  ALLOC
  5 .heap             00001000  80019250  60003f80  00005250  2**4  ALLOC
  6 .stack            00001000  8001a250  60003f80  00005250  2**4  ALLOC
  7 .riscv.attributes 0000001f  00000000  00000000  00005090  2**0  CONTENTS, READONLY
  8 .comment          00000043  00000000  00000000  000050af  2**0  CONTENTS, READONLY
  9 .debug_line       0000995c  00000000  00000000  000050f2  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info       0000a7de  00000000  00000000  0000ea4e  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev     00002073  00000000  00000000  0001922c  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges    00000840  00000000  00000000  0001b2a0  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00012ab2  00000000  00000000  0001bae0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges     00000710  00000000  00000000  0002e592  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro      0000493b  00000000  00000000  0002eca2  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame      00001d94  00000000  00000000  000335e0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
60000000 l    d  .text	00000000 .text
80000000 l    d  .sdata	00000000 .sdata
80000010 l    d  .data	00000000 .data
80000090 l    d  .sbss	00000000 .sbss
80000110 l    d  .bss	00000000 .bss
80019250 l    d  .heap	00000000 .heap
8001a250 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
6000000c l       .text	00000000 handle_reset
60000004 l       .text	00000000 nmi_vector
60000008 l       .text	00000000 trap_vector
60000034 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
60000160 l     F .text	00000060 copy_section
600001c0 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
600002c4 l     F .text	000000b8 PLIC_DisableIRQ
6000037c l     F .text	00000044 PLIC_ClaimIRQ
600003c0 l     F .text	0000004c PLIC_CompleteIRQ
80000090 l     O .sbss	00000008 g_systick_increment
60000460 l     F .text	000000a8 handle_m_timer_interrupt
60000508 l     F .text	00000070 handle_m_ext_interrupt
60000578 l     F .text	00000030 handle_m_soft_interrupt
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 hal_irq.c
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 core_i2c.c
60001228 l     F .text	00000050 enable_slave_if_required
00000000 l    df *ABS*	00000000 i2c_interrupt.c
00000000 l    df *ABS*	00000000 core_gpio.c
00000000 l    df *ABS*	00000000 heap_2.c
80000110 l     O .bss	00019000 ucHeap
80000098 l     O .sbss	00000008 xStart
800000a0 l     O .sbss	00000008 xEnd
80000000 l     O .sdata	00000004 xFreeBytesRemaining
800000a8 l     O .sbss	00000004 xHeapHasBeenInitialised.2779
60002388 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
600023fc l     F .text	0000004c raise_soft_interrupt
80000004 l     O .sdata	00000004 uxCriticalNesting
80000008 l     O .sdata	00000004 mtime
8000000c l     O .sdata	00000004 mtimecmp
600024bc l     F .text	000000cc prvSetNextTimerInterrupt
60002654 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80019110 l     O .bss	00000064 pxReadyTasksLists
80019174 l     O .bss	00000014 xDelayedTaskList1
80019188 l     O .bss	00000014 xDelayedTaskList2
800000b4 l     O .sbss	00000004 pxDelayedTaskList
800000b8 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001919c l     O .bss	00000014 xPendingReadyList
800191b0 l     O .bss	00000014 xTasksWaitingTermination
800000bc l     O .sbss	00000004 uxTasksDeleted
800191c4 l     O .bss	00000014 xSuspendedTaskList
800000c0 l     O .sbss	00000004 uxCurrentNumberOfTasks
800000c4 l     O .sbss	00000004 xTickCount
800000c8 l     O .sbss	00000004 uxTopReadyPriority
800000cc l     O .sbss	00000004 xSchedulerRunning
800000d0 l     O .sbss	00000004 uxPendedTicks
800000d4 l     O .sbss	00000004 xYieldPending
800000d8 l     O .sbss	00000004 xNumOfOverflows
800000dc l     O .sbss	00000004 uxTaskNumber
800000e0 l     O .sbss	00000004 xNextTaskUnblockTime
800000e4 l     O .sbss	00000004 uxSchedulerSuspended
600035a4 l     F .text	000000c0 prvAllocateTCBAndStack
6000330c l     F .text	00000138 prvInitialiseTCBVariables
60003444 l     F .text	000000c0 prvInitialiseTaskLists
600036a4 l     F .text	00000060 prvResetNextTaskUnblockTime
600032d8 l     F .text	00000034 prvIdleTask
60003504 l     F .text	000000a0 prvCheckTasksWaitingTermination
60003664 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 BasicIO.c
800000e8 l     O .sbss	00000008 g_gpio_in_PBs
800000f0 l     O .sbss	00000008 g_gpio_out_LEDs
800000f8 l     O .sbss	00000008 g_uart_term
00000000 l    df *ABS*	00000000 main.c
60003824 l     F .text	000000d0 PLIC_init
80000100 l     O .sbss	00000008 g_pin_led
800191d8 l     O .bss	0000006c i2c_camera
60003a30 l     F .text	00000044 vI2COV2640Camera
6000247c g     F .text	00000040 vPortExitCritical
00001000 g       *ABS*	00000000 STACK_SIZE
6000040c g     F .text	00000030 __disable_irq
60000804  w    F .text	00000020 External_11_IRQHandler
80000800 g       .sdata	00000000 __global_pointer$
60003f00 g       *ABS*	00000000 __data_load
60002714 g     F .text	000000cc SysTick_Handler
60000744  w    F .text	00000020 External_5_IRQHandler
60000b70 g       .text	00000000 HW_get_8bit_reg_field
800000b0 g     O .sbss	00000004 pxCurrentTCB
80000090 g       .sbss	00000000 __sbss_start
60000aa8 g       .text	00000000 HW_set_32bit_reg
60003704 g     F .text	000000c4 BasicIO_Init
60000924  w    F .text	00000020 External_20_IRQHandler
60000a44 g     F .text	0000003c HAL_disable_interrupts
600027e0 g     F .text	00000044 xPortStartScheduler
6000043c g     F .text	00000024 __enable_irq
60002bcc g     F .text	0000021c xTaskGenericCreate
80000000 g       .sdata	00000000 __sdata_start
60000a80 g     F .text	00000028 HAL_restore_interrupts
600022bc g     F .text	000000cc vPortFree
60000b48 g       .text	00000000 HW_set_8bit_reg_field
600009e4  w    F .text	00000020 External_26_IRQHandler
600005a8 g     F .text	000000fc handle_trap
600029c4 g     F .text	00000088 vListInsertEnd
00100000 g       *ABS*	00000000 RAM_SIZE
600007e4  w    F .text	00000020 External_10_IRQHandler
6000299c g     F .text	00000028 vListInitialiseItem
60003910 g     F .text	0000001c External_30_IRQHandler
60001278 g     F .text	00000a00 I2C_isr
600008c4  w    F .text	00000020 External_17_IRQHandler
8001a250 g       .heap	00000000 _heap_end
80019250 g       .bss	00000000 __bss_end
600020e0 g     F .text	000001dc pvPortMalloc
60000210 g     F .text	00000098 _init
60002938 g     F .text	00000064 vListInitialise
60000b38 g       .text	00000000 HW_set_8bit_reg
60000b40 g       .text	00000000 HW_get_8bit_reg
60002060 g     F .text	00000080 GPIO_enable_irq
80000110 g       .sbss	00000000 __sbss_end
60000ab8 g       .text	00000000 HW_set_32bit_reg_field
60003a00 g     F .text	00000014 vApplicationMallocFailedHook
600009c4  w    F .text	00000020 External_25_IRQHandler
8001b250 g       .stack	00000000 __stack_top
6000392c g     F .text	0000001c External_29_IRQHandler
60000d4c g     F .text	000000b0 UART_polled_tx_string
60000844  w    F .text	00000020 External_13_IRQHandler
600006e4  w    F .text	00000020 External_2_IRQHandler
00001000 g       *ABS*	00000000 HEAP_SIZE
60000824  w    F .text	00000020 External_12_IRQHandler
60000c98 g     F .text	000000b4 UART_send
60000000 g       .text	00000000 _start
60002e78 g     F .text	00000028 vTaskSuspendAll
60002a4c g     F .text	00000098 uxListRemove
60003ef0 g       *ABS*	00000000 __sdata_load
80000090 g       .data	00000000 __data_end
600031ec g     F .text	000000ec vTaskSwitchContext
600008e4  w    F .text	00000020 External_18_IRQHandler
60000ae0 g       .text	00000000 HW_get_32bit_reg_field
60001cb8 g     F .text	00000170 GPIO_init
60000964  w    F .text	00000020 External_22_IRQHandler
60000884  w    F .text	00000020 External_15_IRQHandler
60002910 g     F .text	00000028 vPortYield
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80000110 g       .bss	00000000 __bss_start
600008a4  w    F .text	00000020 External_16_IRQHandler
60002ae4 g     F .text	000000e8 memset
60003948 g     F .text	000000b8 main
60000a24  w    F .text	00000020 External_28_IRQHandler
60001c78 g     F .text	00000020 I2C_enable_irq
60000af8 g       .text	00000000 HW_get_16bit_reg
80000010 g       .sdata	00000000 __sdata_end
600010c4 g     F .text	00000164 I2C_read
8001a250 g       .heap	00000000 __heap_end
60000864  w    F .text	00000020 External_14_IRQHandler
600002a8 g     F .text	0000001c _fini
600037c8 g     F .text	0000005c UART_Tx_Msg
60002ea0 g     F .text	00000160 xTaskResumeAll
60002de8 g     F .text	00000090 vTaskStartScheduler
80000010 g     O .data	00000080 ext_irq_handler_table
60000b00 g       .text	00000000 HW_set_16bit_reg_field
8001a250 g       .stack	00000000 __stack_bottom
60002824 g     F .text	000000ec Software_IRQHandler
60000a04  w    F .text	00000020 External_27_IRQHandler
600007a4  w    F .text	00000020 External_8_IRQHandler
600007c4  w    F .text	00000020 External_9_IRQHandler
80019250 g       .heap	00000000 __heap_start
600006a4  w    F .text	00000020 Invalid_IRQHandler
60000704  w    F .text	00000020 External_3_IRQHandler
60003000 g     F .text	000001ec xTaskIncrementTick
60000dfc g     F .text	00000168 I2C_init
800000ac g     O .sbss	00000004 g_startscheduler
60000904  w    F .text	00000020 External_19_IRQHandler
80019250 g       .bss	00000000 _end
60002588 g     F .text	000000cc vPortSetupTimer
60001c98 g     F .text	00000020 I2C_disable_irq
60000b80 g     F .text	00000118 UART_init
60000ab0 g       .text	00000000 HW_get_32bit_reg
60000af0 g       .text	00000000 HW_set_16bit_reg
60002680 g     F .text	00000094 pxPortInitialiseStack
600006c4  w    F .text	00000020 External_1_IRQHandler
60000764  w    F .text	00000020 External_6_IRQHandler
600038f4 g     F .text	0000001c External_31_IRQHandler
60002448 g     F .text	00000034 vPortEnterCritical
80000010 g       .data	00000000 __data_start
60000944  w    F .text	00000020 External_21_IRQHandler
60000b28 g       .text	00000000 HW_get_16bit_reg_field
60000984  w    F .text	00000020 External_23_IRQHandler
600009a4  w    F .text	00000020 External_24_IRQHandler
60001e28 g     F .text	00000238 GPIO_set_output
60000724  w    F .text	00000020 External_4_IRQHandler
60000f64 g     F .text	00000160 I2C_write
60000784  w    F .text	00000020 External_7_IRQHandler
60003a14 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

60000000 <_start>:
_start():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
60000000:	00c0006f          	j	6000000c <handle_reset>

60000004 <nmi_vector>:
nmi_vector():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
60000004:	0000006f          	j	60000004 <nmi_vector>

60000008 <trap_vector>:
trap_vector():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
60000008:	02c0006f          	j	60000034 <trap_entry>

6000000c <handle_reset>:
handle_reset():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
6000000c:	00000297          	auipc	t0,0x0
60000010:	02828293          	addi	t0,t0,40 # 60000034 <trap_entry>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
60000014:	30529073          	csrw	mtvec,t0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
60000018:	30005073          	csrwi	mstatus,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
6000001c:	30405073          	csrwi	mie,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:64

# Ensure the instruction is not optimized, since gp is not yet set

.option norelax
  # initialize global pointer
  la gp, __global_pointer$
60000020:	20000197          	auipc	gp,0x20000
60000024:	7e018193          	addi	gp,gp,2016 # 80000800 <__global_pointer$>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:69

.option pop

  # initialize stack pointer
  la sp, __stack_top
60000028:	2001b117          	auipc	sp,0x2001b
6000002c:	22810113          	addi	sp,sp,552 # 8001b250 <__stack_top>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:72

  # perform the rest of initialization in C
  j _init
60000030:	1e00006f          	j	60000210 <_init>

60000034 <trap_entry>:
trap_entry():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:76


trap_entry:
  addi sp, sp, -32*REGBYTES
60000034:	f8010113          	addi	sp,sp,-128
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:78

  SREG x1, 0 * REGBYTES(sp)
60000038:	00112023          	sw	ra,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:79
  SREG x2, 1 * REGBYTES(sp)
6000003c:	00212223          	sw	sp,4(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:80
  SREG x3, 2 * REGBYTES(sp)
60000040:	00312423          	sw	gp,8(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:81
  SREG x4, 3 * REGBYTES(sp)
60000044:	00412623          	sw	tp,12(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:82
  SREG x5, 4 * REGBYTES(sp)
60000048:	00512823          	sw	t0,16(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:83
  SREG x6, 5 * REGBYTES(sp)
6000004c:	00612a23          	sw	t1,20(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:84
  SREG x7, 6 * REGBYTES(sp)
60000050:	00712c23          	sw	t2,24(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:85
  SREG x8, 7 * REGBYTES(sp)
60000054:	00812e23          	sw	s0,28(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:86
  SREG x9, 8 * REGBYTES(sp)
60000058:	02912023          	sw	s1,32(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:87
  SREG x10, 9 * REGBYTES(sp)
6000005c:	02a12223          	sw	a0,36(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:88
  SREG x11, 10 * REGBYTES(sp)
60000060:	02b12423          	sw	a1,40(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:89
  SREG x12, 11 * REGBYTES(sp)
60000064:	02c12623          	sw	a2,44(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:90
  SREG x13, 12 * REGBYTES(sp)
60000068:	02d12823          	sw	a3,48(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:91
  SREG x14, 13 * REGBYTES(sp)
6000006c:	02e12a23          	sw	a4,52(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:92
  SREG x15, 14 * REGBYTES(sp)
60000070:	02f12c23          	sw	a5,56(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:93
  SREG x16, 15 * REGBYTES(sp)
60000074:	03012e23          	sw	a6,60(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:94
  SREG x17, 16 * REGBYTES(sp)
60000078:	05112023          	sw	a7,64(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:95
  SREG x18, 17 * REGBYTES(sp)
6000007c:	05212223          	sw	s2,68(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:96
  SREG x19, 18 * REGBYTES(sp)
60000080:	05312423          	sw	s3,72(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:97
  SREG x20, 19 * REGBYTES(sp)
60000084:	05412623          	sw	s4,76(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:98
  SREG x21, 20 * REGBYTES(sp)
60000088:	05512823          	sw	s5,80(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:99
  SREG x22, 21 * REGBYTES(sp)
6000008c:	05612a23          	sw	s6,84(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:100
  SREG x23, 22 * REGBYTES(sp)
60000090:	05712c23          	sw	s7,88(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:101
  SREG x24, 23 * REGBYTES(sp)
60000094:	05812e23          	sw	s8,92(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:102
  SREG x25, 24 * REGBYTES(sp)
60000098:	07912023          	sw	s9,96(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:103
  SREG x26, 25 * REGBYTES(sp)
6000009c:	07a12223          	sw	s10,100(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:104
  SREG x27, 26 * REGBYTES(sp)
600000a0:	07b12423          	sw	s11,104(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:105
  SREG x28, 27 * REGBYTES(sp)
600000a4:	07c12623          	sw	t3,108(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:106
  SREG x29, 28 * REGBYTES(sp)
600000a8:	07d12823          	sw	t4,112(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:107
  SREG x30, 29 * REGBYTES(sp)
600000ac:	07e12a23          	sw	t5,116(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:108
  SREG x31, 30 * REGBYTES(sp)
600000b0:	07f12c23          	sw	t6,120(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:111


  csrr t0, mepc
600000b4:	341022f3          	csrr	t0,mepc
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:112
  SREG t0, 31 * REGBYTES(sp)
600000b8:	06512e23          	sw	t0,124(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:114

  csrr a0, mcause
600000bc:	34202573          	csrr	a0,mcause
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:115
  csrr a1, mepc
600000c0:	341025f3          	csrr	a1,mepc
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:116
  mv a2, sp
600000c4:	00010613          	mv	a2,sp
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:117
  jal handle_trap
600000c8:	4e0000ef          	jal	ra,600005a8 <handle_trap>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:118
  csrw mepc, a0
600000cc:	34151073          	csrw	mepc,a0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:121

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
600000d0:	000022b7          	lui	t0,0x2
600000d4:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE+0x800>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:122
  csrs mstatus, t0
600000d8:	3002a073          	csrs	mstatus,t0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:124

  LREG x1, 0 * REGBYTES(sp)
600000dc:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:125
  LREG x2, 1 * REGBYTES(sp)
600000e0:	00412103          	lw	sp,4(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:126
  LREG x3, 2 * REGBYTES(sp)
600000e4:	00812183          	lw	gp,8(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:127
  LREG x4, 3 * REGBYTES(sp)
600000e8:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:128
  LREG x5, 4 * REGBYTES(sp)
600000ec:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:129
  LREG x6, 5 * REGBYTES(sp)
600000f0:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:130
  LREG x7, 6 * REGBYTES(sp)
600000f4:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:131
  LREG x8, 7 * REGBYTES(sp)
600000f8:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:132
  LREG x9, 8 * REGBYTES(sp)
600000fc:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:133
  LREG x10, 9 * REGBYTES(sp)
60000100:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:134
  LREG x11, 10 * REGBYTES(sp)
60000104:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:135
  LREG x12, 11 * REGBYTES(sp)
60000108:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:136
  LREG x13, 12 * REGBYTES(sp)
6000010c:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:137
  LREG x14, 13 * REGBYTES(sp)
60000110:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:138
  LREG x15, 14 * REGBYTES(sp)
60000114:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:139
  LREG x16, 15 * REGBYTES(sp)
60000118:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:140
  LREG x17, 16 * REGBYTES(sp)
6000011c:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:141
  LREG x18, 17 * REGBYTES(sp)
60000120:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:142
  LREG x19, 18 * REGBYTES(sp)
60000124:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:143
  LREG x20, 19 * REGBYTES(sp)
60000128:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:144
  LREG x21, 20 * REGBYTES(sp)
6000012c:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:145
  LREG x22, 21 * REGBYTES(sp)
60000130:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:146
  LREG x23, 22 * REGBYTES(sp)
60000134:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:147
  LREG x24, 23 * REGBYTES(sp)
60000138:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:148
  LREG x25, 24 * REGBYTES(sp)
6000013c:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:149
  LREG x26, 25 * REGBYTES(sp)
60000140:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:150
  LREG x27, 26 * REGBYTES(sp)
60000144:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:151
  LREG x28, 27 * REGBYTES(sp)
60000148:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:152
  LREG x29, 28 * REGBYTES(sp)
6000014c:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:153
  LREG x30, 29 * REGBYTES(sp)
60000150:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:154
  LREG x31, 30 * REGBYTES(sp)
60000154:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:156

  addi sp, sp, 32*REGBYTES
60000158:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/entry.S:157
  mret
6000015c:	30200073          	mret

60000160 <copy_section>:
copy_section():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:37
extern uint32_t     __bss_start;
extern uint32_t     __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
60000160:	fe010113          	addi	sp,sp,-32
60000164:	00812e23          	sw	s0,28(sp)
60000168:	02010413          	addi	s0,sp,32
6000016c:	fea42623          	sw	a0,-20(s0)
60000170:	feb42423          	sw	a1,-24(s0)
60000174:	fec42223          	sw	a2,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
60000178:	02c0006f          	j	600001a4 <copy_section+0x44>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:40
    {
        *p_vma = *p_load;
6000017c:	fec42783          	lw	a5,-20(s0)
60000180:	0007a703          	lw	a4,0(a5)
60000184:	fe842783          	lw	a5,-24(s0)
60000188:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:41
        ++p_load;
6000018c:	fec42783          	lw	a5,-20(s0)
60000190:	00478793          	addi	a5,a5,4
60000194:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:42
        ++p_vma;
60000198:	fe842783          	lw	a5,-24(s0)
6000019c:	00478793          	addi	a5,a5,4
600001a0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
600001a4:	fe842703          	lw	a4,-24(s0)
600001a8:	fe442783          	lw	a5,-28(s0)
600001ac:	fce7f8e3          	bgeu	a5,a4,6000017c <copy_section+0x1c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:44
    }
}
600001b0:	00000013          	nop
600001b4:	01c12403          	lw	s0,28(sp)
600001b8:	02010113          	addi	sp,sp,32
600001bc:	00008067          	ret

600001c0 <zero_section>:
zero_section():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:47

static void zero_section(uint32_t * start, uint32_t * end)
{
600001c0:	fd010113          	addi	sp,sp,-48
600001c4:	02812623          	sw	s0,44(sp)
600001c8:	03010413          	addi	s0,sp,48
600001cc:	fca42e23          	sw	a0,-36(s0)
600001d0:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
600001d4:	fdc42783          	lw	a5,-36(s0)
600001d8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
600001dc:	0180006f          	j	600001f4 <zero_section+0x34>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
600001e0:	fec42783          	lw	a5,-20(s0)
600001e4:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:53
        ++p_zero;
600001e8:	fec42783          	lw	a5,-20(s0)
600001ec:	00478793          	addi	a5,a5,4
600001f0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
600001f4:	fec42703          	lw	a4,-20(s0)
600001f8:	fd842783          	lw	a5,-40(s0)
600001fc:	fee7f2e3          	bgeu	a5,a4,600001e0 <zero_section+0x20>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:55
    }
}
60000200:	00000013          	nop
60000204:	02c12403          	lw	s0,44(sp)
60000208:	03010113          	addi	sp,sp,48
6000020c:	00008067          	ret

60000210 <_init>:
_init():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:58

void _init(void)
{
60000210:	fe010113          	addi	sp,sp,-32
60000214:	00112e23          	sw	ra,28(sp)
60000218:	00812c23          	sw	s0,24(sp)
6000021c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
60000220:	600047b7          	lui	a5,0x60004
60000224:	a8078793          	addi	a5,a5,-1408 # 60003a80 <vI2COV2640Camera+0x50>
60000228:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
6000022c:	fec42783          	lw	a5,-20(s0)
60000230:	fef42023          	sw	a5,-32(s0)
60000234:	fe042223          	sw	zero,-28(s0)
60000238:	fe042423          	sw	zero,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:63

    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
6000023c:	81018613          	addi	a2,gp,-2032 # 80000010 <__sdata_end>
60000240:	800007b7          	lui	a5,0x80000
60000244:	00078593          	mv	a1,a5
60000248:	600047b7          	lui	a5,0x60004
6000024c:	ef078513          	addi	a0,a5,-272 # 60003ef0 <__sdata_load>
60000250:	f11ff0ef          	jal	ra,60000160 <copy_section>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:64
    copy_section(&__data_load, &__data_start, &__data_end);
60000254:	89018613          	addi	a2,gp,-1904 # 80000090 <__data_end>
60000258:	81018593          	addi	a1,gp,-2032 # 80000010 <__sdata_end>
6000025c:	600047b7          	lui	a5,0x60004
60000260:	f0078513          	addi	a0,a5,-256 # 60003f00 <__data_load>
60000264:	efdff0ef          	jal	ra,60000160 <copy_section>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:65
    zero_section(&__sbss_start, &__sbss_end);
60000268:	91018593          	addi	a1,gp,-1776 # 80000110 <__sbss_end>
6000026c:	89018513          	addi	a0,gp,-1904 # 80000090 <__data_end>
60000270:	f51ff0ef          	jal	ra,600001c0 <zero_section>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:66
    zero_section(&__bss_start, &__bss_end);
60000274:	800197b7          	lui	a5,0x80019
60000278:	25078593          	addi	a1,a5,592 # 80019250 <__stack_top+0xffffe000>
6000027c:	91018513          	addi	a0,gp,-1776 # 80000110 <__sbss_end>
60000280:	f41ff0ef          	jal	ra,600001c0 <zero_section>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:68
    
    main(1, argv);
60000284:	fe040793          	addi	a5,s0,-32
60000288:	00078593          	mv	a1,a5
6000028c:	00100513          	li	a0,1
60000290:	6b8030ef          	jal	ra,60003948 <main>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:69
}
60000294:	00000013          	nop
60000298:	01c12083          	lw	ra,28(sp)
6000029c:	01812403          	lw	s0,24(sp)
600002a0:	02010113          	addi	sp,sp,32
600002a4:	00008067          	ret

600002a8 <_fini>:
_fini():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:74

/* Function called after main() finishes */
void
_fini()
{
600002a8:	ff010113          	addi	sp,sp,-16
600002ac:	00812623          	sw	s0,12(sp)
600002b0:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/init.c:75
}
600002b4:	00000013          	nop
600002b8:	00c12403          	lw	s0,12(sp)
600002bc:	01010113          	addi	sp,sp,16
600002c0:	00008067          	ret

600002c4 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
600002c4:	fd010113          	addi	sp,sp,-48
600002c8:	02812623          	sw	s0,44(sp)
600002cc:	03010413          	addi	s0,sp,48
600002d0:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
600002d4:	f14027f3          	csrr	a5,mhartid
600002d8:	fef42623          	sw	a5,-20(s0)
600002dc:	fec42783          	lw	a5,-20(s0)
600002e0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
600002e4:	40000737          	lui	a4,0x40000
600002e8:	fdc42783          	lw	a5,-36(s0)
600002ec:	0057d793          	srli	a5,a5,0x5
600002f0:	fe842683          	lw	a3,-24(s0)
600002f4:	00569693          	slli	a3,a3,0x5
600002f8:	00f686b3          	add	a3,a3,a5
600002fc:	000017b7          	lui	a5,0x1
60000300:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000304:	00f687b3          	add	a5,a3,a5
60000308:	00279793          	slli	a5,a5,0x2
6000030c:	00f707b3          	add	a5,a4,a5
60000310:	0007a783          	lw	a5,0(a5)
60000314:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
60000318:	fdc42783          	lw	a5,-36(s0)
6000031c:	01f7f793          	andi	a5,a5,31
60000320:	00100713          	li	a4,1
60000324:	00f717b3          	sll	a5,a4,a5
60000328:	fff7c793          	not	a5,a5
6000032c:	fe442703          	lw	a4,-28(s0)
60000330:	00f777b3          	and	a5,a4,a5
60000334:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
60000338:	40000737          	lui	a4,0x40000
6000033c:	fdc42783          	lw	a5,-36(s0)
60000340:	0057d793          	srli	a5,a5,0x5
60000344:	fe842683          	lw	a3,-24(s0)
60000348:	00569693          	slli	a3,a3,0x5
6000034c:	00f686b3          	add	a3,a3,a5
60000350:	000017b7          	lui	a5,0x1
60000354:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60000358:	00f687b3          	add	a5,a3,a5
6000035c:	00279793          	slli	a5,a5,0x2
60000360:	00f707b3          	add	a5,a4,a5
60000364:	fe442703          	lw	a4,-28(s0)
60000368:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:181
}
6000036c:	00000013          	nop
60000370:	02c12403          	lw	s0,44(sp)
60000374:	03010113          	addi	sp,sp,48
60000378:	00008067          	ret

6000037c <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
6000037c:	fe010113          	addi	sp,sp,-32
60000380:	00812e23          	sw	s0,28(sp)
60000384:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
60000388:	f14027f3          	csrr	a5,mhartid
6000038c:	fef42623          	sw	a5,-20(s0)
60000390:	fec42783          	lw	a5,-20(s0)
60000394:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
60000398:	40000737          	lui	a4,0x40000
6000039c:	fe842783          	lw	a5,-24(s0)
600003a0:	20078793          	addi	a5,a5,512
600003a4:	00c79793          	slli	a5,a5,0xc
600003a8:	00f707b3          	add	a5,a4,a5
600003ac:	0047a783          	lw	a5,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:209
}
600003b0:	00078513          	mv	a0,a5
600003b4:	01c12403          	lw	s0,28(sp)
600003b8:	02010113          	addi	sp,sp,32
600003bc:	00008067          	ret

600003c0 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
600003c0:	fd010113          	addi	sp,sp,-48
600003c4:	02812623          	sw	s0,44(sp)
600003c8:	03010413          	addi	s0,sp,48
600003cc:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
600003d0:	f14027f3          	csrr	a5,mhartid
600003d4:	fef42623          	sw	a5,-20(s0)
600003d8:	fec42783          	lw	a5,-20(s0)
600003dc:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
600003e0:	40000737          	lui	a4,0x40000
600003e4:	fe842783          	lw	a5,-24(s0)
600003e8:	20078793          	addi	a5,a5,512
600003ec:	00c79793          	slli	a5,a5,0xc
600003f0:	00f707b3          	add	a5,a4,a5
600003f4:	fdc42703          	lw	a4,-36(s0)
600003f8:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_plic.h:220
}
600003fc:	00000013          	nop
60000400:	02c12403          	lw	s0,44(sp)
60000404:	03010113          	addi	sp,sp,48
60000408:	00008067          	ret

6000040c <__disable_irq>:
__disable_irq():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:77

/*------------------------------------------------------------------------------
 * Disable all interrupts.
 */
void __disable_irq(void)
{
6000040c:	fe010113          	addi	sp,sp,-32
60000410:	00812e23          	sw	s0,28(sp)
60000414:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:78
    clear_csr(mstatus, MSTATUS_MPIE);
60000418:	08000793          	li	a5,128
6000041c:	3007b7f3          	csrrc	a5,mstatus,a5
60000420:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:79
    clear_csr(mstatus, MSTATUS_MIE);
60000424:	300477f3          	csrrci	a5,mstatus,8
60000428:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:80
}
6000042c:	00000013          	nop
60000430:	01c12403          	lw	s0,28(sp)
60000434:	02010113          	addi	sp,sp,32
60000438:	00008067          	ret

6000043c <__enable_irq>:
__enable_irq():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:86

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
6000043c:	fe010113          	addi	sp,sp,-32
60000440:	00812e23          	sw	s0,28(sp)
60000444:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:87
    set_csr(mstatus, MSTATUS_MIE);
60000448:	300467f3          	csrrsi	a5,mstatus,8
6000044c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:88
}
60000450:	00000013          	nop
60000454:	01c12403          	lw	s0,28(sp)
60000458:	02010113          	addi	sp,sp,32
6000045c:	00008067          	ret

60000460 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:119

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
static void handle_m_timer_interrupt(void)
{
60000460:	fe010113          	addi	sp,sp,-32
60000464:	00112e23          	sw	ra,28(sp)
60000468:	00812c23          	sw	s0,24(sp)
6000046c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:120
    clear_csr(mie, MIP_MTIP);
60000470:	08000793          	li	a5,128
60000474:	3047b7f3          	csrrc	a5,mie,a5
60000478:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:122

    SysTick_Handler();
6000047c:	298020ef          	jal	ra,60002714 <SysTick_Handler>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:124

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
60000480:	44000737          	lui	a4,0x44000
60000484:	0000c7b7          	lui	a5,0xc
60000488:	00f707b3          	add	a5,a4,a5
6000048c:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE+0xaffc>
60000490:	ff87a783          	lw	a5,-8(a5)
60000494:	8901a583          	lw	a1,-1904(gp) # 80000090 <__data_end>
60000498:	8941a603          	lw	a2,-1900(gp) # 80000094 <__data_end+0x4>
6000049c:	44000537          	lui	a0,0x44000
600004a0:	f1402773          	csrr	a4,mhartid
600004a4:	fee42423          	sw	a4,-24(s0)
600004a8:	fe842883          	lw	a7,-24(s0)
600004ac:	00b786b3          	add	a3,a5,a1
600004b0:	00068313          	mv	t1,a3
600004b4:	00f33333          	sltu	t1,t1,a5
600004b8:	00c80733          	add	a4,a6,a2
600004bc:	00e307b3          	add	a5,t1,a4
600004c0:	00078713          	mv	a4,a5
600004c4:	00068793          	mv	a5,a3
600004c8:	00070813          	mv	a6,a4
600004cc:	00001737          	lui	a4,0x1
600004d0:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0x800>
600004d4:	00e88733          	add	a4,a7,a4
600004d8:	00371713          	slli	a4,a4,0x3
600004dc:	00e50733          	add	a4,a0,a4
600004e0:	00f72023          	sw	a5,0(a4)
600004e4:	01072223          	sw	a6,4(a4)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:126

    set_csr(mie, MIP_MTIP);
600004e8:	08000793          	li	a5,128
600004ec:	3047a7f3          	csrrs	a5,mie,a5
600004f0:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:127
}
600004f4:	00000013          	nop
600004f8:	01c12083          	lw	ra,28(sp)
600004fc:	01812403          	lw	s0,24(sp)
60000500:	02010113          	addi	sp,sp,32
60000504:	00008067          	ret

60000508 <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:172

/*------------------------------------------------------------------------------
 *
 */
static void handle_m_ext_interrupt(void)
{
60000508:	fe010113          	addi	sp,sp,-32
6000050c:	00112e23          	sw	ra,28(sp)
60000510:	00812c23          	sw	s0,24(sp)
60000514:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:173
    uint32_t int_num  = PLIC_ClaimIRQ();
60000518:	e65ff0ef          	jal	ra,6000037c <PLIC_ClaimIRQ>
6000051c:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:174
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
60000520:	fe0405a3          	sb	zero,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:176

    disable = ext_irq_handler_table[int_num]();
60000524:	800007b7          	lui	a5,0x80000
60000528:	fec42703          	lw	a4,-20(s0)
6000052c:	00271713          	slli	a4,a4,0x2
60000530:	01078793          	addi	a5,a5,16 # 80000010 <__stack_top+0xfffe4dc0>
60000534:	00f707b3          	add	a5,a4,a5
60000538:	0007a783          	lw	a5,0(a5)
6000053c:	000780e7          	jalr	a5
60000540:	00050793          	mv	a5,a0
60000544:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:178

    PLIC_CompleteIRQ(int_num);
60000548:	fec42503          	lw	a0,-20(s0)
6000054c:	e75ff0ef          	jal	ra,600003c0 <PLIC_CompleteIRQ>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:180

    if(EXT_IRQ_DISABLE == disable)
60000550:	feb44703          	lbu	a4,-21(s0)
60000554:	00100793          	li	a5,1
60000558:	00f71663          	bne	a4,a5,60000564 <handle_m_ext_interrupt+0x5c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:182
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
6000055c:	fec42503          	lw	a0,-20(s0)
60000560:	d65ff0ef          	jal	ra,600002c4 <PLIC_DisableIRQ>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:184
    }
}
60000564:	00000013          	nop
60000568:	01c12083          	lw	ra,28(sp)
6000056c:	01812403          	lw	s0,24(sp)
60000570:	02010113          	addi	sp,sp,32
60000574:	00008067          	ret

60000578 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:187

static void handle_m_soft_interrupt(void)
{
60000578:	ff010113          	addi	sp,sp,-16
6000057c:	00112623          	sw	ra,12(sp)
60000580:	00812423          	sw	s0,8(sp)
60000584:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:188
    Software_IRQHandler();
60000588:	29c020ef          	jal	ra,60002824 <Software_IRQHandler>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:191

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00U;
6000058c:	440007b7          	lui	a5,0x44000
60000590:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:192
}
60000594:	00000013          	nop
60000598:	00c12083          	lw	ra,12(sp)
6000059c:	00812403          	lw	s0,8(sp)
600005a0:	01010113          	addi	sp,sp,16
600005a4:	00008067          	ret

600005a8 <handle_trap>:
handle_trap():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:198

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t mepc)
{
600005a8:	fb010113          	addi	sp,sp,-80
600005ac:	04112623          	sw	ra,76(sp)
600005b0:	04812423          	sw	s0,72(sp)
600005b4:	05010413          	addi	s0,sp,80
600005b8:	faa42e23          	sw	a0,-68(s0)
600005bc:	fab42c23          	sw	a1,-72(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:199
    if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
600005c0:	fbc42783          	lw	a5,-68(s0)
600005c4:	0207d263          	bgez	a5,600005e8 <handle_trap+0x40>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:199 (discriminator 1)
600005c8:	fbc42703          	lw	a4,-68(s0)
600005cc:	800007b7          	lui	a5,0x80000
600005d0:	fff7c793          	not	a5,a5
600005d4:	00f77733          	and	a4,a4,a5
600005d8:	00b00793          	li	a5,11
600005dc:	00f71663          	bne	a4,a5,600005e8 <handle_trap+0x40>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:201
    {
        handle_m_ext_interrupt();
600005e0:	f29ff0ef          	jal	ra,60000508 <handle_m_ext_interrupt>
600005e4:	0a80006f          	j	6000068c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:203
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
600005e8:	fbc42783          	lw	a5,-68(s0)
600005ec:	0207d263          	bgez	a5,60000610 <handle_trap+0x68>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:203 (discriminator 1)
600005f0:	fbc42703          	lw	a4,-68(s0)
600005f4:	800007b7          	lui	a5,0x80000
600005f8:	fff7c793          	not	a5,a5
600005fc:	00f77733          	and	a4,a4,a5
60000600:	00700793          	li	a5,7
60000604:	00f71663          	bne	a4,a5,60000610 <handle_trap+0x68>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:205
    {
        handle_m_timer_interrupt();
60000608:	e59ff0ef          	jal	ra,60000460 <handle_m_timer_interrupt>
6000060c:	0800006f          	j	6000068c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:207
    }
    else if ( (mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
60000610:	fbc42783          	lw	a5,-68(s0)
60000614:	0207d263          	bgez	a5,60000638 <handle_trap+0x90>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:207 (discriminator 1)
60000618:	fbc42703          	lw	a4,-68(s0)
6000061c:	800007b7          	lui	a5,0x80000
60000620:	fff7c793          	not	a5,a5
60000624:	00f77733          	and	a4,a4,a5
60000628:	00300793          	li	a5,3
6000062c:	00f71663          	bne	a4,a5,60000638 <handle_trap+0x90>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:209
    {
        handle_m_soft_interrupt();
60000630:	f49ff0ef          	jal	ra,60000578 <handle_m_soft_interrupt>
60000634:	0580006f          	j	6000068c <handle_trap+0xe4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:234
         B Instruction page fault
         C Load page fault                (mtval/mbadaddr is the address)
         E Store page fault               (mtval/mbadaddr is the address)
        */

         uintptr_t mip      = read_csr(mip);      /* interrupt pending */
60000638:	344027f3          	csrr	a5,mip
6000063c:	fef42623          	sw	a5,-20(s0)
60000640:	fec42783          	lw	a5,-20(s0)
60000644:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:235
         uintptr_t mbadaddr = read_csr(mbadaddr); /* additional info and meaning depends on mcause */
60000648:	343027f3          	csrr	a5,mtval
6000064c:	fef42223          	sw	a5,-28(s0)
60000650:	fe442783          	lw	a5,-28(s0)
60000654:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:236
         uintptr_t mtvec    = read_csr(mtvec);    /* trap vector */
60000658:	305027f3          	csrr	a5,mtvec
6000065c:	fcf42e23          	sw	a5,-36(s0)
60000660:	fdc42783          	lw	a5,-36(s0)
60000664:	fcf42c23          	sw	a5,-40(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:237
         uintptr_t mscratch = read_csr(mscratch); /* temporary, sometimes might hold temporary value of a0 */
60000668:	340027f3          	csrr	a5,mscratch
6000066c:	fcf42a23          	sw	a5,-44(s0)
60000670:	fd442783          	lw	a5,-44(s0)
60000674:	fcf42823          	sw	a5,-48(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:238
         uintptr_t mstatus  = read_csr(mstatus);  /* status contains many smaller fields: */
60000678:	300027f3          	csrr	a5,mstatus
6000067c:	fcf42623          	sw	a5,-52(s0)
60000680:	fcc42783          	lw	a5,-52(s0)
60000684:	fcf42423          	sw	a5,-56(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:241

		/* breakpoint*/
        __asm("ebreak");
60000688:	00100073          	ebreak
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:246
#else
        _exit(1 + mcause);
#endif
    }
    return mepc;
6000068c:	fb842783          	lw	a5,-72(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal.c:247
}
60000690:	00078513          	mv	a0,a5
60000694:	04c12083          	lw	ra,76(sp)
60000698:	04812403          	lw	s0,72(sp)
6000069c:	05010113          	addi	sp,sp,80
600006a0:	00008067          	ret

600006a4 <Invalid_IRQHandler>:
Invalid_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:35
	/*Default handler*/
}

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t Invalid_IRQHandler(void)
{
600006a4:	ff010113          	addi	sp,sp,-16
600006a8:	00812623          	sw	s0,12(sp)
600006ac:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:36
    return(0U); /*Default handler*/
600006b0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:37
}
600006b4:	00078513          	mv	a0,a5
600006b8:	00c12403          	lw	s0,12(sp)
600006bc:	01010113          	addi	sp,sp,16
600006c0:	00008067          	ret

600006c4 <External_1_IRQHandler>:
External_1_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:41

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_1_IRQHandler(void)
{
600006c4:	ff010113          	addi	sp,sp,-16
600006c8:	00812623          	sw	s0,12(sp)
600006cc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:42
    return(0U); /*Default handler*/
600006d0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:43
}
600006d4:	00078513          	mv	a0,a5
600006d8:	00c12403          	lw	s0,12(sp)
600006dc:	01010113          	addi	sp,sp,16
600006e0:	00008067          	ret

600006e4 <External_2_IRQHandler>:
External_2_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:47

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_2_IRQHandler(void)
{
600006e4:	ff010113          	addi	sp,sp,-16
600006e8:	00812623          	sw	s0,12(sp)
600006ec:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:48
    return(0U); /*Default handler*/
600006f0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:49
}
600006f4:	00078513          	mv	a0,a5
600006f8:	00c12403          	lw	s0,12(sp)
600006fc:	01010113          	addi	sp,sp,16
60000700:	00008067          	ret

60000704 <External_3_IRQHandler>:
External_3_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:53

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_3_IRQHandler(void)
{
60000704:	ff010113          	addi	sp,sp,-16
60000708:	00812623          	sw	s0,12(sp)
6000070c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:54
    return(0U); /*Default handler*/
60000710:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:55
}
60000714:	00078513          	mv	a0,a5
60000718:	00c12403          	lw	s0,12(sp)
6000071c:	01010113          	addi	sp,sp,16
60000720:	00008067          	ret

60000724 <External_4_IRQHandler>:
External_4_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:59

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_4_IRQHandler(void)
{
60000724:	ff010113          	addi	sp,sp,-16
60000728:	00812623          	sw	s0,12(sp)
6000072c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:60
	return(0U); /*Default handler*/
60000730:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:61
}
60000734:	00078513          	mv	a0,a5
60000738:	00c12403          	lw	s0,12(sp)
6000073c:	01010113          	addi	sp,sp,16
60000740:	00008067          	ret

60000744 <External_5_IRQHandler>:
External_5_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:65

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_5_IRQHandler(void)
{
60000744:	ff010113          	addi	sp,sp,-16
60000748:	00812623          	sw	s0,12(sp)
6000074c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:66
    return(0U); /*Default handler*/
60000750:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:67
}
60000754:	00078513          	mv	a0,a5
60000758:	00c12403          	lw	s0,12(sp)
6000075c:	01010113          	addi	sp,sp,16
60000760:	00008067          	ret

60000764 <External_6_IRQHandler>:
External_6_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:71

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_6_IRQHandler(void)
{
60000764:	ff010113          	addi	sp,sp,-16
60000768:	00812623          	sw	s0,12(sp)
6000076c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:72
    return(0U); /*Default handler*/
60000770:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:73
}
60000774:	00078513          	mv	a0,a5
60000778:	00c12403          	lw	s0,12(sp)
6000077c:	01010113          	addi	sp,sp,16
60000780:	00008067          	ret

60000784 <External_7_IRQHandler>:
External_7_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:77

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_7_IRQHandler(void)
{
60000784:	ff010113          	addi	sp,sp,-16
60000788:	00812623          	sw	s0,12(sp)
6000078c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0U); /*Default handler*/
60000790:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:79
}
60000794:	00078513          	mv	a0,a5
60000798:	00c12403          	lw	s0,12(sp)
6000079c:	01010113          	addi	sp,sp,16
600007a0:	00008067          	ret

600007a4 <External_8_IRQHandler>:
External_8_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:83

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_8_IRQHandler(void)
{
600007a4:	ff010113          	addi	sp,sp,-16
600007a8:	00812623          	sw	s0,12(sp)
600007ac:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:84
    return(0U); /*Default handler*/
600007b0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:85
}
600007b4:	00078513          	mv	a0,a5
600007b8:	00c12403          	lw	s0,12(sp)
600007bc:	01010113          	addi	sp,sp,16
600007c0:	00008067          	ret

600007c4 <External_9_IRQHandler>:
External_9_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:89

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_9_IRQHandler(void)
{
600007c4:	ff010113          	addi	sp,sp,-16
600007c8:	00812623          	sw	s0,12(sp)
600007cc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:90
    return(0U); /*Default handler*/
600007d0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:91
}
600007d4:	00078513          	mv	a0,a5
600007d8:	00c12403          	lw	s0,12(sp)
600007dc:	01010113          	addi	sp,sp,16
600007e0:	00008067          	ret

600007e4 <External_10_IRQHandler>:
External_10_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:95

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_10_IRQHandler(void)
{
600007e4:	ff010113          	addi	sp,sp,-16
600007e8:	00812623          	sw	s0,12(sp)
600007ec:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:96
    return(0U); /*Default handler*/
600007f0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:97
}
600007f4:	00078513          	mv	a0,a5
600007f8:	00c12403          	lw	s0,12(sp)
600007fc:	01010113          	addi	sp,sp,16
60000800:	00008067          	ret

60000804 <External_11_IRQHandler>:
External_11_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:101

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_11_IRQHandler(void)
{
60000804:	ff010113          	addi	sp,sp,-16
60000808:	00812623          	sw	s0,12(sp)
6000080c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:102
    return(0U); /*Default handler*/
60000810:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:103
}
60000814:	00078513          	mv	a0,a5
60000818:	00c12403          	lw	s0,12(sp)
6000081c:	01010113          	addi	sp,sp,16
60000820:	00008067          	ret

60000824 <External_12_IRQHandler>:
External_12_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:107

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_12_IRQHandler(void)
{
60000824:	ff010113          	addi	sp,sp,-16
60000828:	00812623          	sw	s0,12(sp)
6000082c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:108
	return(0U); /*Default handler*/
60000830:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:109
}
60000834:	00078513          	mv	a0,a5
60000838:	00c12403          	lw	s0,12(sp)
6000083c:	01010113          	addi	sp,sp,16
60000840:	00008067          	ret

60000844 <External_13_IRQHandler>:
External_13_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:113

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_13_IRQHandler(void)
{
60000844:	ff010113          	addi	sp,sp,-16
60000848:	00812623          	sw	s0,12(sp)
6000084c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:114
	return(0U); /*Default handler*/
60000850:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:115
}
60000854:	00078513          	mv	a0,a5
60000858:	00c12403          	lw	s0,12(sp)
6000085c:	01010113          	addi	sp,sp,16
60000860:	00008067          	ret

60000864 <External_14_IRQHandler>:
External_14_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:119

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_14_IRQHandler(void)
{
60000864:	ff010113          	addi	sp,sp,-16
60000868:	00812623          	sw	s0,12(sp)
6000086c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:120
	return(0U); /*Default handler*/
60000870:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:121
}
60000874:	00078513          	mv	a0,a5
60000878:	00c12403          	lw	s0,12(sp)
6000087c:	01010113          	addi	sp,sp,16
60000880:	00008067          	ret

60000884 <External_15_IRQHandler>:
External_15_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:125

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_15_IRQHandler(void)
{
60000884:	ff010113          	addi	sp,sp,-16
60000888:	00812623          	sw	s0,12(sp)
6000088c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:126
	return(0U); /*Default handler*/
60000890:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:127
}
60000894:	00078513          	mv	a0,a5
60000898:	00c12403          	lw	s0,12(sp)
6000089c:	01010113          	addi	sp,sp,16
600008a0:	00008067          	ret

600008a4 <External_16_IRQHandler>:
External_16_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:131

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_16_IRQHandler(void)
{
600008a4:	ff010113          	addi	sp,sp,-16
600008a8:	00812623          	sw	s0,12(sp)
600008ac:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:132
	return(0U); /*Default handler*/
600008b0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:133
}
600008b4:	00078513          	mv	a0,a5
600008b8:	00c12403          	lw	s0,12(sp)
600008bc:	01010113          	addi	sp,sp,16
600008c0:	00008067          	ret

600008c4 <External_17_IRQHandler>:
External_17_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:137

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_17_IRQHandler(void)
{
600008c4:	ff010113          	addi	sp,sp,-16
600008c8:	00812623          	sw	s0,12(sp)
600008cc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:138
	return(0U); /*Default handler*/
600008d0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:139
}
600008d4:	00078513          	mv	a0,a5
600008d8:	00c12403          	lw	s0,12(sp)
600008dc:	01010113          	addi	sp,sp,16
600008e0:	00008067          	ret

600008e4 <External_18_IRQHandler>:
External_18_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:143

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_18_IRQHandler(void)
{
600008e4:	ff010113          	addi	sp,sp,-16
600008e8:	00812623          	sw	s0,12(sp)
600008ec:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:144
	return(0U); /*Default handler*/
600008f0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:145
}
600008f4:	00078513          	mv	a0,a5
600008f8:	00c12403          	lw	s0,12(sp)
600008fc:	01010113          	addi	sp,sp,16
60000900:	00008067          	ret

60000904 <External_19_IRQHandler>:
External_19_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:149

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_19_IRQHandler(void)
{
60000904:	ff010113          	addi	sp,sp,-16
60000908:	00812623          	sw	s0,12(sp)
6000090c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:150
	return(0U); /*Default handler*/
60000910:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:151
}
60000914:	00078513          	mv	a0,a5
60000918:	00c12403          	lw	s0,12(sp)
6000091c:	01010113          	addi	sp,sp,16
60000920:	00008067          	ret

60000924 <External_20_IRQHandler>:
External_20_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:155

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_20_IRQHandler(void)
{
60000924:	ff010113          	addi	sp,sp,-16
60000928:	00812623          	sw	s0,12(sp)
6000092c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:156
	return(0U); /*Default handler*/
60000930:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:157
}
60000934:	00078513          	mv	a0,a5
60000938:	00c12403          	lw	s0,12(sp)
6000093c:	01010113          	addi	sp,sp,16
60000940:	00008067          	ret

60000944 <External_21_IRQHandler>:
External_21_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:161

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_21_IRQHandler(void)
{
60000944:	ff010113          	addi	sp,sp,-16
60000948:	00812623          	sw	s0,12(sp)
6000094c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:162
	return(0U); /*Default handler*/
60000950:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:163
}
60000954:	00078513          	mv	a0,a5
60000958:	00c12403          	lw	s0,12(sp)
6000095c:	01010113          	addi	sp,sp,16
60000960:	00008067          	ret

60000964 <External_22_IRQHandler>:
External_22_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:167

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_22_IRQHandler(void)
{
60000964:	ff010113          	addi	sp,sp,-16
60000968:	00812623          	sw	s0,12(sp)
6000096c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:168
	return(0U); /*Default handler*/
60000970:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:169
}
60000974:	00078513          	mv	a0,a5
60000978:	00c12403          	lw	s0,12(sp)
6000097c:	01010113          	addi	sp,sp,16
60000980:	00008067          	ret

60000984 <External_23_IRQHandler>:
External_23_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:173

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_23_IRQHandler(void)
{
60000984:	ff010113          	addi	sp,sp,-16
60000988:	00812623          	sw	s0,12(sp)
6000098c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:174
	return(0U); /*Default handler*/
60000990:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:175
}
60000994:	00078513          	mv	a0,a5
60000998:	00c12403          	lw	s0,12(sp)
6000099c:	01010113          	addi	sp,sp,16
600009a0:	00008067          	ret

600009a4 <External_24_IRQHandler>:
External_24_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:179

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_24_IRQHandler(void)
{
600009a4:	ff010113          	addi	sp,sp,-16
600009a8:	00812623          	sw	s0,12(sp)
600009ac:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:180
	return(0U); /*Default handler*/
600009b0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:181
}
600009b4:	00078513          	mv	a0,a5
600009b8:	00c12403          	lw	s0,12(sp)
600009bc:	01010113          	addi	sp,sp,16
600009c0:	00008067          	ret

600009c4 <External_25_IRQHandler>:
External_25_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:185

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_25_IRQHandler(void)
{
600009c4:	ff010113          	addi	sp,sp,-16
600009c8:	00812623          	sw	s0,12(sp)
600009cc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:186
	return(0U); /*Default handler*/
600009d0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:187
}
600009d4:	00078513          	mv	a0,a5
600009d8:	00c12403          	lw	s0,12(sp)
600009dc:	01010113          	addi	sp,sp,16
600009e0:	00008067          	ret

600009e4 <External_26_IRQHandler>:
External_26_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:191

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_26_IRQHandler(void)
{
600009e4:	ff010113          	addi	sp,sp,-16
600009e8:	00812623          	sw	s0,12(sp)
600009ec:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:192
	return(0U); /*Default handler*/
600009f0:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:193
}
600009f4:	00078513          	mv	a0,a5
600009f8:	00c12403          	lw	s0,12(sp)
600009fc:	01010113          	addi	sp,sp,16
60000a00:	00008067          	ret

60000a04 <External_27_IRQHandler>:
External_27_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:197

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_27_IRQHandler(void)
{
60000a04:	ff010113          	addi	sp,sp,-16
60000a08:	00812623          	sw	s0,12(sp)
60000a0c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:198
	return(0U); /*Default handler*/
60000a10:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:199
}
60000a14:	00078513          	mv	a0,a5
60000a18:	00c12403          	lw	s0,12(sp)
60000a1c:	01010113          	addi	sp,sp,16
60000a20:	00008067          	ret

60000a24 <External_28_IRQHandler>:
External_28_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:203

/*Weakly linked handler. Will be replaced with user's definition if provided*/
__attribute__((weak)) uint8_t External_28_IRQHandler(void)
{
60000a24:	ff010113          	addi	sp,sp,-16
60000a28:	00812623          	sw	s0,12(sp)
60000a2c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:204
	return(0U); /*Default handler*/
60000a30:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../riscv_hal/riscv_hal_stubs.c:205
}
60000a34:	00078513          	mv	a0,a5
60000a38:	00c12403          	lw	s0,12(sp)
60000a3c:	01010113          	addi	sp,sp,16
60000a40:	00008067          	ret

60000a44 <HAL_disable_interrupts>:
HAL_disable_interrupts():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:23
}

/*------------------------------------------------------------------------------
 * 
 */
psr_t HAL_disable_interrupts(void) {
60000a44:	fe010113          	addi	sp,sp,-32
60000a48:	00112e23          	sw	ra,28(sp)
60000a4c:	00812c23          	sw	s0,24(sp)
60000a50:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:25
    psr_t psr;
    psr = read_csr(mstatus);
60000a54:	300027f3          	csrr	a5,mstatus
60000a58:	fef42623          	sw	a5,-20(s0)
60000a5c:	fec42783          	lw	a5,-20(s0)
60000a60:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:26
    __disable_irq();
60000a64:	9a9ff0ef          	jal	ra,6000040c <__disable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:27
    return(psr);
60000a68:	fe842783          	lw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:28
}
60000a6c:	00078513          	mv	a0,a5
60000a70:	01c12083          	lw	ra,28(sp)
60000a74:	01812403          	lw	s0,24(sp)
60000a78:	02010113          	addi	sp,sp,32
60000a7c:	00008067          	ret

60000a80 <HAL_restore_interrupts>:
HAL_restore_interrupts():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:33

/*------------------------------------------------------------------------------
 * 
 */
void HAL_restore_interrupts(psr_t saved_psr) {
60000a80:	fe010113          	addi	sp,sp,-32
60000a84:	00812e23          	sw	s0,28(sp)
60000a88:	02010413          	addi	s0,sp,32
60000a8c:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:34
    write_csr(mstatus, saved_psr);
60000a90:	fec42783          	lw	a5,-20(s0)
60000a94:	30079073          	csrw	mstatus,a5
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hal_irq.c:35
}
60000a98:	00000013          	nop
60000a9c:	01c12403          	lw	s0,28(sp)
60000aa0:	02010113          	addi	sp,sp,32
60000aa4:	00008067          	ret

60000aa8 <HW_set_32bit_reg>:
HW_set_32bit_reg():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
60000aa8:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:37
    ret
60000aac:	00008067          	ret

60000ab0 <HW_get_32bit_reg>:
HW_get_32bit_reg():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
60000ab0:	00052503          	lw	a0,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:48
    ret
60000ab4:	00008067          	ret

60000ab8 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
60000ab8:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
60000abc:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
60000ac0:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
60000ac4:	00052303          	lw	t1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:64
    mv t2, a2
60000ac8:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:65
    not t2, t2
60000acc:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
60000ad0:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
60000ad4:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
60000ad8:	00652023          	sw	t1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:69
    ret
60000adc:	00008067          	ret

60000ae0 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
60000ae0:	00052503          	lw	a0,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
60000ae4:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
60000ae8:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:86
    ret
60000aec:	00008067          	ret

60000af0 <HW_set_16bit_reg>:
HW_set_16bit_reg():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
60000af0:	00b51023          	sh	a1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:97
    ret
60000af4:	00008067          	ret

60000af8 <HW_get_16bit_reg>:
HW_get_16bit_reg():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
60000af8:	00051503          	lh	a0,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:108
    ret
60000afc:	00008067          	ret

60000b00 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
60000b00:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
60000b04:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
60000b08:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
60000b0c:	00051303          	lh	t1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:125
    mv t2, a2
60000b10:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:126
    not t2, t2
60000b14:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
60000b18:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
60000b1c:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
60000b20:	00651023          	sh	t1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:130
    ret
60000b24:	00008067          	ret

60000b28 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
60000b28:	00051503          	lh	a0,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
60000b2c:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
60000b30:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:147
    ret
60000b34:	00008067          	ret

60000b38 <HW_set_8bit_reg>:
HW_set_8bit_reg():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
60000b38:	00b50023          	sb	a1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:158
    ret
60000b3c:	00008067          	ret

60000b40 <HW_get_8bit_reg>:
HW_get_8bit_reg():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
60000b40:	00050503          	lb	a0,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:169
    ret
60000b44:	00008067          	ret

60000b48 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
60000b48:	00068e13          	mv	t3,a3
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
60000b4c:	00be1e33          	sll	t3,t3,a1
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
60000b50:	00ce7e33          	and	t3,t3,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
60000b54:	00050303          	lb	t1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:185
    mv t2, a2
60000b58:	00060393          	mv	t2,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:186
    not t2, t2
60000b5c:	fff3c393          	not	t2,t2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
60000b60:	00737333          	and	t1,t1,t2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
60000b64:	01c36333          	or	t1,t1,t3
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
60000b68:	00650023          	sb	t1,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:190
    ret
60000b6c:	00008067          	ret

60000b70 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
60000b70:	00050503          	lb	a0,0(a0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
60000b74:	00c57533          	and	a0,a0,a2
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
60000b78:	00b55533          	srl	a0,a0,a1
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../hal/hw_reg_access.S:207
    ret
60000b7c:	00008067          	ret

60000b80 <UART_init>:
UART_init():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:45
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
60000b80:	fd010113          	addi	sp,sp,-48
60000b84:	02112623          	sw	ra,44(sp)
60000b88:	02812423          	sw	s0,40(sp)
60000b8c:	03010413          	addi	s0,sp,48
60000b90:	fca42e23          	sw	a0,-36(s0)
60000b94:	fcb42c23          	sw	a1,-40(s0)
60000b98:	00060793          	mv	a5,a2
60000b9c:	00068713          	mv	a4,a3
60000ba0:	fcf41b23          	sh	a5,-42(s0)
60000ba4:	00070793          	mv	a5,a4
60000ba8:	fcf40aa3          	sb	a5,-43(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:52
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
60000bac:	fdc42783          	lw	a5,-36(s0)
60000bb0:	0c078a63          	beqz	a5,60000c84 <UART_init+0x104>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:52 (discriminator 1)
60000bb4:	fd544703          	lbu	a4,-43(s0)
60000bb8:	00700793          	li	a5,7
60000bbc:	0ce7e463          	bltu	a5,a4,60000c84 <UART_init+0x104>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
        ( line_config <= MAX_LINE_CONFIG ) &&
60000bc0:	fd645703          	lhu	a4,-42(s0)
60000bc4:	000027b7          	lui	a5,0x2
60000bc8:	0af77e63          	bgeu	a4,a5,60000c84 <UART_init+0x104>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:59
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
60000bcc:	fd842783          	lw	a5,-40(s0)
60000bd0:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE+0x1008>
60000bd4:	fd645783          	lhu	a5,-42(s0)
60000bd8:	0ff7f793          	andi	a5,a5,255
60000bdc:	00078593          	mv	a1,a5
60000be0:	00070513          	mv	a0,a4
60000be4:	f55ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:66
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
60000be8:	fd842783          	lw	a5,-40(s0)
60000bec:	00c78693          	addi	a3,a5,12
60000bf0:	fd544703          	lbu	a4,-43(s0)
60000bf4:	fd645783          	lhu	a5,-42(s0)
60000bf8:	4057d793          	srai	a5,a5,0x5
60000bfc:	7f87f793          	andi	a5,a5,2040
60000c00:	00f767b3          	or	a5,a4,a5
60000c04:	00078593          	mv	a1,a5
60000c08:	00068513          	mv	a0,a3
60000c0c:	f2dff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:70
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
60000c10:	fdc42783          	lw	a5,-36(s0)
60000c14:	fd842703          	lw	a4,-40(s0)
60000c18:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:93
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000c1c:	fdc42783          	lw	a5,-36(s0)
60000c20:	0007a783          	lw	a5,0(a5)
60000c24:	01078793          	addi	a5,a5,16
60000c28:	00078513          	mv	a0,a5
60000c2c:	f15ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
60000c30:	00050793          	mv	a5,a0
60000c34:	0027f793          	andi	a5,a5,2
60000c38:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:95
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
60000c3c:	0380006f          	j	60000c74 <UART_init+0xf4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:97
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
60000c40:	fdc42783          	lw	a5,-36(s0)
60000c44:	0007a783          	lw	a5,0(a5)
60000c48:	00478793          	addi	a5,a5,4
60000c4c:	00078513          	mv	a0,a5
60000c50:	ef1ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000c54:	fdc42783          	lw	a5,-36(s0)
60000c58:	0007a783          	lw	a5,0(a5)
60000c5c:	01078793          	addi	a5,a5,16
60000c60:	00078513          	mv	a0,a5
60000c64:	eddff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
60000c68:	00050793          	mv	a5,a0
60000c6c:	0027f793          	andi	a5,a5,2
60000c70:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:95
        while ( rx_full )
60000c74:	fef44783          	lbu	a5,-17(s0)
60000c78:	fc0794e3          	bnez	a5,60000c40 <UART_init+0xc0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:105
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
60000c7c:	fdc42783          	lw	a5,-36(s0)
60000c80:	00078223          	sb	zero,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:107
    }
}
60000c84:	00000013          	nop
60000c88:	02c12083          	lw	ra,44(sp)
60000c8c:	02812403          	lw	s0,40(sp)
60000c90:	03010113          	addi	sp,sp,48
60000c94:	00008067          	ret

60000c98 <UART_send>:
UART_send():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:120
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
60000c98:	fd010113          	addi	sp,sp,-48
60000c9c:	02112623          	sw	ra,44(sp)
60000ca0:	02812423          	sw	s0,40(sp)
60000ca4:	03010413          	addi	s0,sp,48
60000ca8:	fca42e23          	sw	a0,-36(s0)
60000cac:	fcb42c23          	sw	a1,-40(s0)
60000cb0:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:128

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
60000cb4:	fdc42783          	lw	a5,-36(s0)
60000cb8:	08078063          	beqz	a5,60000d38 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:128 (discriminator 1)
60000cbc:	fd842783          	lw	a5,-40(s0)
60000cc0:	06078c63          	beqz	a5,60000d38 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:129
        (tx_buffer != NULL_BUFFER)   &&
60000cc4:	fd442783          	lw	a5,-44(s0)
60000cc8:	06078863          	beqz	a5,60000d38 <UART_send+0xa0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
60000ccc:	fe042623          	sw	zero,-20(s0)
60000cd0:	05c0006f          	j	60000d2c <UART_send+0x94>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:136 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000cd4:	fdc42783          	lw	a5,-36(s0)
60000cd8:	0007a783          	lw	a5,0(a5)
60000cdc:	01078793          	addi	a5,a5,16
60000ce0:	00078513          	mv	a0,a5
60000ce4:	e5dff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
60000ce8:	00050793          	mv	a5,a0
60000cec:	0017f793          	andi	a5,a5,1
60000cf0:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:138 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
60000cf4:	feb44783          	lbu	a5,-21(s0)
60000cf8:	fc078ee3          	beqz	a5,60000cd4 <UART_send+0x3c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:140 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
60000cfc:	fdc42783          	lw	a5,-36(s0)
60000d00:	0007a683          	lw	a3,0(a5)
60000d04:	fd842703          	lw	a4,-40(s0)
60000d08:	fec42783          	lw	a5,-20(s0)
60000d0c:	00f707b3          	add	a5,a4,a5
60000d10:	0007c783          	lbu	a5,0(a5)
60000d14:	00078593          	mv	a1,a5
60000d18:	00068513          	mv	a0,a3
60000d1c:	e1dff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
60000d20:	fec42783          	lw	a5,-20(s0)
60000d24:	00178793          	addi	a5,a5,1
60000d28:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:132 (discriminator 1)
60000d2c:	fec42703          	lw	a4,-20(s0)
60000d30:	fd442783          	lw	a5,-44(s0)
60000d34:	faf760e3          	bltu	a4,a5,60000cd4 <UART_send+0x3c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:144
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
60000d38:	00000013          	nop
60000d3c:	02c12083          	lw	ra,44(sp)
60000d40:	02812403          	lw	s0,40(sp)
60000d44:	03010113          	addi	sp,sp,48
60000d48:	00008067          	ret

60000d4c <UART_polled_tx_string>:
UART_polled_tx_string():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:238
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
60000d4c:	fd010113          	addi	sp,sp,-48
60000d50:	02112623          	sw	ra,44(sp)
60000d54:	02812423          	sw	s0,40(sp)
60000d58:	03010413          	addi	s0,sp,48
60000d5c:	fca42e23          	sw	a0,-36(s0)
60000d60:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
60000d64:	fdc42783          	lw	a5,-36(s0)
60000d68:	08078063          	beqz	a5,60000de8 <UART_polled_tx_string+0x9c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:245 (discriminator 1)
60000d6c:	fd842783          	lw	a5,-40(s0)
60000d70:	06078c63          	beqz	a5,60000de8 <UART_polled_tx_string+0x9c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:247
    {
        char_idx = 0U;
60000d74:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000d78:	05c0006f          	j	60000dd4 <UART_polled_tx_string+0x88>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:252 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
60000d7c:	fdc42783          	lw	a5,-36(s0)
60000d80:	0007a783          	lw	a5,0(a5)
60000d84:	01078793          	addi	a5,a5,16
60000d88:	00078513          	mv	a0,a5
60000d8c:	db5ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
60000d90:	00050793          	mv	a5,a0
60000d94:	0017f793          	andi	a5,a5,1
60000d98:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:254 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
60000d9c:	feb44783          	lbu	a5,-21(s0)
60000da0:	fc078ee3          	beqz	a5,60000d7c <UART_polled_tx_string+0x30>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:256
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
60000da4:	fdc42783          	lw	a5,-36(s0)
60000da8:	0007a683          	lw	a3,0(a5)
60000dac:	fd842703          	lw	a4,-40(s0)
60000db0:	fec42783          	lw	a5,-20(s0)
60000db4:	00f707b3          	add	a5,a4,a5
60000db8:	0007c783          	lbu	a5,0(a5)
60000dbc:	00078593          	mv	a1,a5
60000dc0:	00068513          	mv	a0,a3
60000dc4:	d75ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:258
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
60000dc8:	fec42783          	lw	a5,-20(s0)
60000dcc:	00178793          	addi	a5,a5,1
60000dd0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
60000dd4:	fd842703          	lw	a4,-40(s0)
60000dd8:	fec42783          	lw	a5,-20(s0)
60000ddc:	00f707b3          	add	a5,a4,a5
60000de0:	0007c783          	lbu	a5,0(a5)
60000de4:	f8079ce3          	bnez	a5,60000d7c <UART_polled_tx_string+0x30>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreUARTapb/core_uart_apb.c:261
        }
    }
}
60000de8:	00000013          	nop
60000dec:	02c12083          	lw	ra,44(sp)
60000df0:	02812403          	lw	s0,40(sp)
60000df4:	03010113          	addi	sp,sp,48
60000df8:	00008067          	ret

60000dfc <I2C_init>:
I2C_init():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:103
    i2c_instance_t * this_i2c,
    addr_t base_address,
    uint8_t ser_address,
    i2c_clock_divider_t ser_clock_speed
)
{
60000dfc:	fd010113          	addi	sp,sp,-48
60000e00:	02112623          	sw	ra,44(sp)
60000e04:	02812423          	sw	s0,40(sp)
60000e08:	03010413          	addi	s0,sp,48
60000e0c:	fca42e23          	sw	a0,-36(s0)
60000e10:	fcb42c23          	sw	a1,-40(s0)
60000e14:	00060793          	mv	a5,a2
60000e18:	fcd42823          	sw	a3,-48(s0)
60000e1c:	fcf40ba3          	sb	a5,-41(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:105
    psr_t saved_psr;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
60000e20:	fd042783          	lw	a5,-48(s0)
60000e24:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:111
    
    /*
     * We need to disable ints while doing this as there is no guarantee we
     * have not been called already and the ISR is active.
     */
    saved_psr = HAL_disable_interrupts();
60000e28:	c1dff0ef          	jal	ra,60000a44 <HAL_disable_interrupts>
60000e2c:	fea42423          	sw	a0,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:119
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    memset(this_i2c, 0, sizeof(i2c_instance_t));
60000e30:	06c00613          	li	a2,108
60000e34:	00000593          	li	a1,0
60000e38:	fdc42503          	lw	a0,-36(s0)
60000e3c:	4a9010ef          	jal	ra,60002ae4 <memset>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:124
    
    /*
     * Set base address of I2C hardware used by this instance.
     */
    this_i2c->base_address = base_address;
60000e40:	fdc42783          	lw	a5,-36(s0)
60000e44:	fd842703          	lw	a4,-40(s0)
60000e48:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:129

    /*
     * Update Serial address of the device
     */
    this_i2c->ser_address = ((uint_fast8_t)ser_address << 1u);
60000e4c:	fd744783          	lbu	a5,-41(s0)
60000e50:	00179713          	slli	a4,a5,0x1
60000e54:	fdc42783          	lw	a5,-36(s0)
60000e58:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:134
    
    /*
     * Configure hardware.
     */
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x00); /* Reset I2C hardware. */
60000e5c:	fdc42783          	lw	a5,-36(s0)
60000e60:	0007a783          	lw	a5,0(a5)
60000e64:	00000693          	li	a3,0
60000e68:	04000613          	li	a2,64
60000e6c:	00600593          	li	a1,6
60000e70:	00078513          	mv	a0,a5
60000e74:	cd5ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:135
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x01); /* set enable bit */
60000e78:	fdc42783          	lw	a5,-36(s0)
60000e7c:	0007a783          	lw	a5,0(a5)
60000e80:	00100693          	li	a3,1
60000e84:	04000613          	li	a2,64
60000e88:	00600593          	li	a1,6
60000e8c:	00078513          	mv	a0,a5
60000e90:	cb9ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:136
    HAL_set_8bit_reg_field(this_i2c->base_address, CR2, ( (clock_speed >> 2) & 0x01) );
60000e94:	fdc42783          	lw	a5,-36(s0)
60000e98:	0007a703          	lw	a4,0(a5)
60000e9c:	fec42783          	lw	a5,-20(s0)
60000ea0:	0027d793          	srli	a5,a5,0x2
60000ea4:	0017f793          	andi	a5,a5,1
60000ea8:	00078693          	mv	a3,a5
60000eac:	08000613          	li	a2,128
60000eb0:	00700593          	li	a1,7
60000eb4:	00070513          	mv	a0,a4
60000eb8:	c91ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:137
    HAL_set_8bit_reg_field(this_i2c->base_address, CR1, ( (clock_speed >> 1) & 0x01) );
60000ebc:	fdc42783          	lw	a5,-36(s0)
60000ec0:	0007a703          	lw	a4,0(a5)
60000ec4:	fec42783          	lw	a5,-20(s0)
60000ec8:	0017d793          	srli	a5,a5,0x1
60000ecc:	0017f793          	andi	a5,a5,1
60000ed0:	00078693          	mv	a3,a5
60000ed4:	00200613          	li	a2,2
60000ed8:	00100593          	li	a1,1
60000edc:	00070513          	mv	a0,a4
60000ee0:	c69ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:138
    HAL_set_8bit_reg_field(this_i2c->base_address, CR0, ( clock_speed & 0x01) );
60000ee4:	fdc42783          	lw	a5,-36(s0)
60000ee8:	0007a703          	lw	a4,0(a5)
60000eec:	fec42783          	lw	a5,-20(s0)
60000ef0:	0017f793          	andi	a5,a5,1
60000ef4:	00078693          	mv	a3,a5
60000ef8:	00100613          	li	a2,1
60000efc:	00000593          	li	a1,0
60000f00:	00070513          	mv	a0,a4
60000f04:	c45ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:140

    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS, this_i2c->ser_address);
60000f08:	fdc42783          	lw	a5,-36(s0)
60000f0c:	0007a783          	lw	a5,0(a5)
60000f10:	00c78713          	addi	a4,a5,12
60000f14:	fdc42783          	lw	a5,-36(s0)
60000f18:	0047a783          	lw	a5,4(a5)
60000f1c:	00078593          	mv	a1,a5
60000f20:	00070513          	mv	a0,a4
60000f24:	c15ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:141
    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS1, this_i2c->ser_address);
60000f28:	fdc42783          	lw	a5,-36(s0)
60000f2c:	0007a783          	lw	a5,0(a5)
60000f30:	01c78713          	addi	a4,a5,28
60000f34:	fdc42783          	lw	a5,-36(s0)
60000f38:	0047a783          	lw	a5,4(a5)
60000f3c:	00078593          	mv	a1,a5
60000f40:	00070513          	mv	a0,a4
60000f44:	bf5ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:146
    
    /*
     * Finally safe to enable interrupts.
     */
    HAL_restore_interrupts( saved_psr );
60000f48:	fe842503          	lw	a0,-24(s0)
60000f4c:	b35ff0ef          	jal	ra,60000a80 <HAL_restore_interrupts>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:147
}
60000f50:	00000013          	nop
60000f54:	02c12083          	lw	ra,44(sp)
60000f58:	02812403          	lw	s0,40(sp)
60000f5c:	03010113          	addi	sp,sp,48
60000f60:	00008067          	ret

60000f64 <I2C_write>:
I2C_write():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:214
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
60000f64:	fd010113          	addi	sp,sp,-48
60000f68:	02112623          	sw	ra,44(sp)
60000f6c:	02812423          	sw	s0,40(sp)
60000f70:	03010413          	addi	s0,sp,48
60000f74:	fca42e23          	sw	a0,-36(s0)
60000f78:	00058793          	mv	a5,a1
60000f7c:	fcc42a23          	sw	a2,-44(s0)
60000f80:	fcf40da3          	sb	a5,-37(s0)
60000f84:	00068793          	mv	a5,a3
60000f88:	fcf41c23          	sh	a5,-40(s0)
60000f8c:	00070793          	mv	a5,a4
60000f90:	fcf40d23          	sb	a5,-38(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:218
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
60000f94:	ab1ff0ef          	jal	ra,60000a44 <HAL_disable_interrupts>
60000f98:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:221

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
60000f9c:	fdc42783          	lw	a5,-36(s0)
60000fa0:	00c7c783          	lbu	a5,12(a5)
60000fa4:	00079863          	bnez	a5,60000fb4 <I2C_write+0x50>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:223
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
60000fa8:	fdc42783          	lw	a5,-36(s0)
60000fac:	00100713          	li	a4,1
60000fb0:	00e78623          	sb	a4,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:227
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
60000fb4:	fdc42783          	lw	a5,-36(s0)
60000fb8:	00100713          	li	a4,1
60000fbc:	06e78523          	sb	a4,106(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:230

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
60000fc0:	fdb44783          	lbu	a5,-37(s0)
60000fc4:	00179713          	slli	a4,a5,0x1
60000fc8:	fdc42783          	lw	a5,-36(s0)
60000fcc:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:231
    this_i2c->dir = WRITE_DIR;
60000fd0:	fdc42783          	lw	a5,-36(s0)
60000fd4:	0207a223          	sw	zero,36(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:232
    this_i2c->master_tx_buffer = write_buffer;
60000fd8:	fdc42783          	lw	a5,-36(s0)
60000fdc:	fd442703          	lw	a4,-44(s0)
60000fe0:	00e7ac23          	sw	a4,24(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:233
    this_i2c->master_tx_size = write_size;
60000fe4:	fd845703          	lhu	a4,-40(s0)
60000fe8:	fdc42783          	lw	a5,-36(s0)
60000fec:	00e7ae23          	sw	a4,28(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:234
    this_i2c->master_tx_idx = 0u;
60000ff0:	fdc42783          	lw	a5,-36(s0)
60000ff4:	0207a023          	sw	zero,32(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:237

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
60000ff8:	fdc42783          	lw	a5,-36(s0)
60000ffc:	00100713          	li	a4,1
60001000:	02e7aa23          	sw	a4,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:238
    this_i2c->options = options;
60001004:	fdc42783          	lw	a5,-36(s0)
60001008:	fda44703          	lbu	a4,-38(s0)
6000100c:	00e78a23          	sb	a4,20(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:240

    if(I2C_IN_PROGRESS == this_i2c->slave_status)
60001010:	fdc42783          	lw	a5,-36(s0)
60001014:	0547a703          	lw	a4,84(a5)
60001018:	00100793          	li	a5,1
6000101c:	00f71a63          	bne	a4,a5,60001030 <I2C_write+0xcc>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:242
    {
        this_i2c->is_transaction_pending = 1u;
60001020:	fdc42783          	lw	a5,-36(s0)
60001024:	00100713          	li	a4,1
60001028:	06e784a3          	sb	a4,105(a5)
6000102c:	0200006f          	j	6000104c <I2C_write+0xe8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:246
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
60001030:	fdc42783          	lw	a5,-36(s0)
60001034:	0007a783          	lw	a5,0(a5)
60001038:	00100693          	li	a3,1
6000103c:	02000613          	li	a2,32
60001040:	00500593          	li	a1,5
60001044:	00078513          	mv	a0,a5
60001048:	b01ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:254
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
6000104c:	fdc42783          	lw	a5,-36(s0)
60001050:	0687c703          	lbu	a4,104(a5)
60001054:	00100793          	li	a5,1
60001058:	02f71063          	bne	a4,a5,60001078 <I2C_write+0x114>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:256
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
6000105c:	fdc42783          	lw	a5,-36(s0)
60001060:	0007a783          	lw	a5,0(a5)
60001064:	00000693          	li	a3,0
60001068:	00800613          	li	a2,8
6000106c:	00300593          	li	a1,3
60001070:	00078513          	mv	a0,a5
60001074:	ad5ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:259
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
60001078:	fdc42783          	lw	a5,-36(s0)
6000107c:	0007a783          	lw	a5,0(a5)
60001080:	00478793          	addi	a5,a5,4
60001084:	00078513          	mv	a0,a5
60001088:	ab9ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
6000108c:	00050793          	mv	a5,a0
60001090:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:260
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
60001094:	feb44783          	lbu	a5,-21(s0)
60001098:	0ff7f793          	andi	a5,a5,255
6000109c:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:263

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
600010a0:	fdc42503          	lw	a0,-36(s0)
600010a4:	3d5000ef          	jal	ra,60001c78 <I2C_enable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:265

    HAL_restore_interrupts( saved_psr );
600010a8:	fec42503          	lw	a0,-20(s0)
600010ac:	9d5ff0ef          	jal	ra,60000a80 <HAL_restore_interrupts>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:266
}
600010b0:	00000013          	nop
600010b4:	02c12083          	lw	ra,44(sp)
600010b8:	02812403          	lw	s0,40(sp)
600010bc:	03010113          	addi	sp,sp,48
600010c0:	00008067          	ret

600010c4 <I2C_read>:
I2C_read():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:280
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
600010c4:	fd010113          	addi	sp,sp,-48
600010c8:	02112623          	sw	ra,44(sp)
600010cc:	02812423          	sw	s0,40(sp)
600010d0:	03010413          	addi	s0,sp,48
600010d4:	fca42e23          	sw	a0,-36(s0)
600010d8:	00058793          	mv	a5,a1
600010dc:	fcc42a23          	sw	a2,-44(s0)
600010e0:	fcf40da3          	sb	a5,-37(s0)
600010e4:	00068793          	mv	a5,a3
600010e8:	fcf41c23          	sh	a5,-40(s0)
600010ec:	00070793          	mv	a5,a4
600010f0:	fcf40d23          	sb	a5,-38(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:284
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
600010f4:	951ff0ef          	jal	ra,60000a44 <HAL_disable_interrupts>
600010f8:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:287
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
600010fc:	fdc42783          	lw	a5,-36(s0)
60001100:	00c7c783          	lbu	a5,12(a5)
60001104:	00079863          	bnez	a5,60001114 <I2C_read+0x50>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:289
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
60001108:	fdc42783          	lw	a5,-36(s0)
6000110c:	00200713          	li	a4,2
60001110:	00e78623          	sb	a4,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:293
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
60001114:	fdc42783          	lw	a5,-36(s0)
60001118:	00200713          	li	a4,2
6000111c:	06e78523          	sb	a4,106(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:296

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
60001120:	fdb44783          	lbu	a5,-37(s0)
60001124:	00179713          	slli	a4,a5,0x1
60001128:	fdc42783          	lw	a5,-36(s0)
6000112c:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:298

    this_i2c->dir = READ_DIR;
60001130:	fdc42783          	lw	a5,-36(s0)
60001134:	00100713          	li	a4,1
60001138:	02e7a223          	sw	a4,36(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:300

    this_i2c->master_rx_buffer = read_buffer;
6000113c:	fdc42783          	lw	a5,-36(s0)
60001140:	fd442703          	lw	a4,-44(s0)
60001144:	02e7a423          	sw	a4,40(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:301
    this_i2c->master_rx_size = read_size;
60001148:	fd845703          	lhu	a4,-40(s0)
6000114c:	fdc42783          	lw	a5,-36(s0)
60001150:	02e7a623          	sw	a4,44(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:302
    this_i2c->master_rx_idx = 0u;
60001154:	fdc42783          	lw	a5,-36(s0)
60001158:	0207a823          	sw	zero,48(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:305

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
6000115c:	fdc42783          	lw	a5,-36(s0)
60001160:	00100713          	li	a4,1
60001164:	02e7aa23          	sw	a4,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:307

    this_i2c->options = options;
60001168:	fdc42783          	lw	a5,-36(s0)
6000116c:	fda44703          	lbu	a4,-38(s0)
60001170:	00e78a23          	sb	a4,20(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:309
    
    if(I2C_IN_PROGRESS == this_i2c->slave_status)
60001174:	fdc42783          	lw	a5,-36(s0)
60001178:	0547a703          	lw	a4,84(a5)
6000117c:	00100793          	li	a5,1
60001180:	00f71a63          	bne	a4,a5,60001194 <I2C_read+0xd0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:311
    {
        this_i2c->is_transaction_pending = 1u;
60001184:	fdc42783          	lw	a5,-36(s0)
60001188:	00100713          	li	a4,1
6000118c:	06e784a3          	sb	a4,105(a5)
60001190:	0200006f          	j	600011b0 <I2C_read+0xec>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:315
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
60001194:	fdc42783          	lw	a5,-36(s0)
60001198:	0007a783          	lw	a5,0(a5)
6000119c:	00100693          	li	a3,1
600011a0:	02000613          	li	a2,32
600011a4:	00500593          	li	a1,5
600011a8:	00078513          	mv	a0,a5
600011ac:	99dff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:323
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
600011b0:	fdc42783          	lw	a5,-36(s0)
600011b4:	0687c703          	lbu	a4,104(a5)
600011b8:	00100793          	li	a5,1
600011bc:	02f71063          	bne	a4,a5,600011dc <I2C_read+0x118>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:325
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
600011c0:	fdc42783          	lw	a5,-36(s0)
600011c4:	0007a783          	lw	a5,0(a5)
600011c8:	00000693          	li	a3,0
600011cc:	00800613          	li	a2,8
600011d0:	00300593          	li	a1,3
600011d4:	00078513          	mv	a0,a5
600011d8:	971ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:328
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
600011dc:	fdc42783          	lw	a5,-36(s0)
600011e0:	0007a783          	lw	a5,0(a5)
600011e4:	00478793          	addi	a5,a5,4
600011e8:	00078513          	mv	a0,a5
600011ec:	955ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
600011f0:	00050793          	mv	a5,a0
600011f4:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:329
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
600011f8:	feb44783          	lbu	a5,-21(s0)
600011fc:	0ff7f793          	andi	a5,a5,255
60001200:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:332

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
60001204:	fdc42503          	lw	a0,-36(s0)
60001208:	271000ef          	jal	ra,60001c78 <I2C_enable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:333
    HAL_restore_interrupts( saved_psr );
6000120c:	fec42503          	lw	a0,-20(s0)
60001210:	871ff0ef          	jal	ra,60000a80 <HAL_restore_interrupts>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:334
}
60001214:	00000013          	nop
60001218:	02c12083          	lw	ra,44(sp)
6000121c:	02812403          	lw	s0,40(sp)
60001220:	03010113          	addi	sp,sp,48
60001224:	00008067          	ret

60001228 <enable_slave_if_required>:
enable_slave_if_required():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:671
 */
static void enable_slave_if_required
(
    i2c_instance_t * this_i2c
)
{
60001228:	fe010113          	addi	sp,sp,-32
6000122c:	00112e23          	sw	ra,28(sp)
60001230:	00812c23          	sw	s0,24(sp)
60001234:	02010413          	addi	s0,sp,32
60001238:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:676
    /*
     * This function is only called from within the ISR and so does not need
     * guarding on the register access.
     */
    if( 0 != this_i2c->is_slave_enabled )
6000123c:	fec42783          	lw	a5,-20(s0)
60001240:	0607c783          	lbu	a5,96(a5)
60001244:	02078063          	beqz	a5,60001264 <enable_slave_if_required+0x3c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:678
    {
        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
60001248:	fec42783          	lw	a5,-20(s0)
6000124c:	0007a783          	lw	a5,0(a5)
60001250:	00100693          	li	a3,1
60001254:	00400613          	li	a2,4
60001258:	00200593          	li	a1,2
6000125c:	00078513          	mv	a0,a5
60001260:	8e9ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:680
    }
}
60001264:	00000013          	nop
60001268:	01c12083          	lw	ra,28(sp)
6000126c:	01812403          	lw	s0,24(sp)
60001270:	02010113          	addi	sp,sp,32
60001274:	00008067          	ret

60001278 <I2C_isr>:
I2C_isr():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:775
 */
void I2C_isr
(
    i2c_instance_t * this_i2c
)
{
60001278:	fd010113          	addi	sp,sp,-48
6000127c:	02112623          	sw	ra,44(sp)
60001280:	02812423          	sw	s0,40(sp)
60001284:	02912223          	sw	s1,36(sp)
60001288:	03010413          	addi	s0,sp,48
6000128c:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:779
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
60001290:	00100793          	li	a5,1
60001294:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:781

    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
60001298:	fdc42783          	lw	a5,-36(s0)
6000129c:	0007a783          	lw	a5,0(a5)
600012a0:	00478793          	addi	a5,a5,4
600012a4:	00078513          	mv	a0,a5
600012a8:	899ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
600012ac:	00050793          	mv	a5,a0
600012b0:	fef403a3          	sb	a5,-25(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:783
    
    switch( status )
600012b4:	fe744783          	lbu	a5,-25(s0)
600012b8:	0ff7f793          	andi	a5,a5,255
600012bc:	ff878793          	addi	a5,a5,-8
600012c0:	0d800713          	li	a4,216
600012c4:	0cf760e3          	bltu	a4,a5,60001b84 <I2C_isr+0x90c>
600012c8:	00279713          	slli	a4,a5,0x2
600012cc:	600047b7          	lui	a5,0x60004
600012d0:	a8878793          	addi	a5,a5,-1400 # 60003a88 <vI2COV2640Camera+0x58>
600012d4:	00f707b3          	add	a5,a4,a5
600012d8:	0007a783          	lw	a5,0(a5)
600012dc:	00078067          	jr	a5
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:789
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            HAL_set_8bit_reg_field( this_i2c->base_address, STA, 0x00u);
600012e0:	fdc42783          	lw	a5,-36(s0)
600012e4:	0007a783          	lw	a5,0(a5)
600012e8:	00000693          	li	a3,0
600012ec:	02000613          	li	a2,32
600012f0:	00500593          	li	a1,5
600012f4:	00078513          	mv	a0,a5
600012f8:	851ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:790
            HAL_set_8bit_reg( this_i2c->base_address, DATA, this_i2c->target_addr); /* write call address */
600012fc:	fdc42783          	lw	a5,-36(s0)
60001300:	0007a783          	lw	a5,0(a5)
60001304:	00878713          	addi	a4,a5,8
60001308:	fdc42783          	lw	a5,-36(s0)
6000130c:	0087a783          	lw	a5,8(a5)
60001310:	00078593          	mv	a1,a5
60001314:	00070513          	mv	a0,a4
60001318:	821ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:791
            HAL_set_8bit_reg_field( this_i2c->base_address, DIR, this_i2c->dir); /* set direction bit */
6000131c:	fdc42783          	lw	a5,-36(s0)
60001320:	0007a783          	lw	a5,0(a5)
60001324:	00878713          	addi	a4,a5,8
60001328:	fdc42783          	lw	a5,-36(s0)
6000132c:	0247a783          	lw	a5,36(a5)
60001330:	00078693          	mv	a3,a5
60001334:	00100613          	li	a2,1
60001338:	00000593          	li	a1,0
6000133c:	00070513          	mv	a0,a4
60001340:	809ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:792
            if(this_i2c->dir == WRITE_DIR)
60001344:	fdc42783          	lw	a5,-36(s0)
60001348:	0247a783          	lw	a5,36(a5)
6000134c:	00079863          	bnez	a5,6000135c <I2C_isr+0xe4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:794
            {
                 this_i2c->master_tx_idx = 0u;
60001350:	fdc42783          	lw	a5,-36(s0)
60001354:	0207a023          	sw	zero,32(a5)
60001358:	00c0006f          	j	60001364 <I2C_isr+0xec>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:798
            }
            else
            {
                 this_i2c->master_rx_idx = 0u;
6000135c:	fdc42783          	lw	a5,-36(s0)
60001360:	0207a823          	sw	zero,48(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:806
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
60001364:	fdc42783          	lw	a5,-36(s0)
60001368:	0697c783          	lbu	a5,105(a5)
6000136c:	00078663          	beqz	a5,60001378 <I2C_isr+0x100>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:808
            {
                this_i2c->is_transaction_pending = 0u;
60001370:	fdc42783          	lw	a5,-36(s0)
60001374:	060784a3          	sb	zero,105(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:815

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
60001378:	fdc42783          	lw	a5,-36(s0)
6000137c:	00c7c703          	lbu	a4,12(a5)
60001380:	fdc42783          	lw	a5,-36(s0)
60001384:	06a7c783          	lbu	a5,106(a5)
60001388:	06f706e3          	beq	a4,a5,60001bf4 <I2C_isr+0x97c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:817
            {
                this_i2c->transaction = this_i2c->pending_transaction;
6000138c:	fdc42783          	lw	a5,-36(s0)
60001390:	06a7c703          	lbu	a4,106(a5)
60001394:	fdc42783          	lw	a5,-36(s0)
60001398:	00e78623          	sb	a4,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:819
            }
            break;
6000139c:	0590006f          	j	60001bf4 <I2C_isr+0x97c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:823
            
        case ST_LOST_ARB:
              /* Set start bit.  Let's keep trying!  Don't give up! */
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
600013a0:	fdc42783          	lw	a5,-36(s0)
600013a4:	0007a783          	lw	a5,0(a5)
600013a8:	00100693          	li	a3,1
600013ac:	02000613          	li	a2,32
600013b0:	00500593          	li	a1,5
600013b4:	00078513          	mv	a0,a5
600013b8:	f90ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:824
              break;
600013bc:	0650006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:833
              break;

        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
600013c0:	fdc42783          	lw	a5,-36(s0)
600013c4:	0007a783          	lw	a5,0(a5)
600013c8:	00100693          	li	a3,1
600013cc:	01000613          	li	a2,16
600013d0:	00400593          	li	a1,4
600013d4:	00078513          	mv	a0,a5
600013d8:	f70ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:834
            this_i2c->master_status = I2C_FAILED;
600013dc:	fdc42783          	lw	a5,-36(s0)
600013e0:	00200713          	li	a4,2
600013e4:	02e7aa23          	sw	a4,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:835
            this_i2c->transaction = NO_TRANSACTION;
600013e8:	fdc42783          	lw	a5,-36(s0)
600013ec:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:836
            enable_slave_if_required(this_i2c);
600013f0:	fdc42503          	lw	a0,-36(s0)
600013f4:	e35ff0ef          	jal	ra,60001228 <enable_slave_if_required>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:837
            break;
600013f8:	0290006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:842
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
600013fc:	fdc42783          	lw	a5,-36(s0)
60001400:	0207a703          	lw	a4,32(a5)
60001404:	fdc42783          	lw	a5,-36(s0)
60001408:	01c7a783          	lw	a5,28(a5)
6000140c:	04f77063          	bgeu	a4,a5,6000144c <I2C_isr+0x1d4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:844
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
60001410:	fdc42783          	lw	a5,-36(s0)
60001414:	0007a783          	lw	a5,0(a5)
60001418:	00878513          	addi	a0,a5,8
6000141c:	fdc42783          	lw	a5,-36(s0)
60001420:	0187a703          	lw	a4,24(a5)
60001424:	fdc42783          	lw	a5,-36(s0)
60001428:	0207a783          	lw	a5,32(a5)
6000142c:	00178613          	addi	a2,a5,1
60001430:	fdc42683          	lw	a3,-36(s0)
60001434:	02c6a023          	sw	a2,32(a3)
60001438:	00f707b3          	add	a5,a4,a5
6000143c:	0007c783          	lbu	a5,0(a5)
60001440:	00078593          	mv	a1,a5
60001444:	ef4ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:876
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
60001448:	7d80006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:846
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
6000144c:	fdc42783          	lw	a5,-36(s0)
60001450:	00c7c703          	lbu	a4,12(a5)
60001454:	00300793          	li	a5,3
60001458:	02f71863          	bne	a4,a5,60001488 <I2C_isr+0x210>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:850
                 this_i2c->dir = READ_DIR;
6000145c:	fdc42783          	lw	a5,-36(s0)
60001460:	00100713          	li	a4,1
60001464:	02e7a223          	sw	a4,36(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:851
                 HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
60001468:	fdc42783          	lw	a5,-36(s0)
6000146c:	0007a783          	lw	a5,0(a5)
60001470:	00100693          	li	a3,1
60001474:	02000613          	li	a2,32
60001478:	00500593          	li	a1,5
6000147c:	00078513          	mv	a0,a5
60001480:	ec8ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:876
            break;
60001484:	79c0006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:859
                this_i2c->transaction = NO_TRANSACTION;
60001488:	fdc42783          	lw	a5,-36(s0)
6000148c:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:860
                hold_bus = this_i2c->options & I2C_HOLD_BUS;
60001490:	fdc42783          	lw	a5,-36(s0)
60001494:	0147c783          	lbu	a5,20(a5)
60001498:	0017f793          	andi	a5,a5,1
6000149c:	fef40723          	sb	a5,-18(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:863
                this_i2c->bus_status  = hold_bus;
600014a0:	fdc42783          	lw	a5,-36(s0)
600014a4:	fee44703          	lbu	a4,-18(s0)
600014a8:	06e78423          	sb	a4,104(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:864
                if ( hold_bus == 0u )
600014ac:	fee44783          	lbu	a5,-18(s0)
600014b0:	02079663          	bnez	a5,600014dc <I2C_isr+0x264>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:866
                    HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
600014b4:	fdc42783          	lw	a5,-36(s0)
600014b8:	0007a783          	lw	a5,0(a5)
600014bc:	00100693          	li	a3,1
600014c0:	01000613          	li	a2,16
600014c4:	00400593          	li	a1,4
600014c8:	00078513          	mv	a0,a5
600014cc:	e7cff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:867
                    enable_slave_if_required(this_i2c);
600014d0:	fdc42503          	lw	a0,-36(s0)
600014d4:	d55ff0ef          	jal	ra,60001228 <enable_slave_if_required>
600014d8:	0100006f          	j	600014e8 <I2C_isr+0x270>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:871
                    I2C_disable_irq( this_i2c );
600014dc:	fdc42503          	lw	a0,-36(s0)
600014e0:	7b8000ef          	jal	ra,60001c98 <I2C_disable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:872
                    clear_irq = 0u;
600014e4:	fe0407a3          	sb	zero,-17(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:874
                this_i2c->master_status = I2C_SUCCESS;
600014e8:	fdc42783          	lw	a5,-36(s0)
600014ec:	0207aa23          	sw	zero,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:876
            break;
600014f0:	7300006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:884
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);/* xmt stop condition */
600014f4:	fdc42783          	lw	a5,-36(s0)
600014f8:	0007a783          	lw	a5,0(a5)
600014fc:	00100693          	li	a3,1
60001500:	01000613          	li	a2,16
60001504:	00400593          	li	a1,4
60001508:	00078513          	mv	a0,a5
6000150c:	e3cff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:885
            this_i2c->master_status = I2C_FAILED;
60001510:	fdc42783          	lw	a5,-36(s0)
60001514:	00200713          	li	a4,2
60001518:	02e7aa23          	sw	a4,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:891

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
6000151c:	fdc42783          	lw	a5,-36(s0)
60001520:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:892
            enable_slave_if_required(this_i2c);
60001524:	fdc42503          	lw	a0,-36(s0)
60001528:	d01ff0ef          	jal	ra,60001228 <enable_slave_if_required>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:893
            break;
6000152c:	6f40006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:902
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
60001530:	fdc42783          	lw	a5,-36(s0)
60001534:	02c7a703          	lw	a4,44(a5)
60001538:	00100793          	li	a5,1
6000153c:	02e7f263          	bgeu	a5,a4,60001560 <I2C_isr+0x2e8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:904
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
60001540:	fdc42783          	lw	a5,-36(s0)
60001544:	0007a783          	lw	a5,0(a5)
60001548:	00100693          	li	a3,1
6000154c:	00400613          	li	a2,4
60001550:	00200593          	li	a1,2
60001554:	00078513          	mv	a0,a5
60001558:	df0ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:917
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
6000155c:	6c40006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:906
            else if(1u == this_i2c->master_rx_size)
60001560:	fdc42783          	lw	a5,-36(s0)
60001564:	02c7a703          	lw	a4,44(a5)
60001568:	00100793          	li	a5,1
6000156c:	02f71263          	bne	a4,a5,60001590 <I2C_isr+0x318>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:908
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
60001570:	fdc42783          	lw	a5,-36(s0)
60001574:	0007a783          	lw	a5,0(a5)
60001578:	00000693          	li	a3,0
6000157c:	00400613          	li	a2,4
60001580:	00200593          	li	a1,2
60001584:	00078513          	mv	a0,a5
60001588:	dc0ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:917
            break;
6000158c:	6940006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:912
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
60001590:	fdc42783          	lw	a5,-36(s0)
60001594:	0007a783          	lw	a5,0(a5)
60001598:	00100693          	li	a3,1
6000159c:	00400613          	li	a2,4
600015a0:	00200593          	li	a1,2
600015a4:	00078513          	mv	a0,a5
600015a8:	da0ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:913
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
600015ac:	fdc42783          	lw	a5,-36(s0)
600015b0:	0007a783          	lw	a5,0(a5)
600015b4:	00100693          	li	a3,1
600015b8:	01000613          	li	a2,16
600015bc:	00400593          	li	a1,4
600015c0:	00078513          	mv	a0,a5
600015c4:	d84ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:914
                this_i2c->master_status = I2C_SUCCESS;
600015c8:	fdc42783          	lw	a5,-36(s0)
600015cc:	0207aa23          	sw	zero,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:915
                this_i2c->transaction = NO_TRANSACTION;
600015d0:	fdc42783          	lw	a5,-36(s0)
600015d4:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:917
            break;
600015d8:	6480006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:920
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
600015dc:	fdc42783          	lw	a5,-36(s0)
600015e0:	0007a783          	lw	a5,0(a5)
600015e4:	00100693          	li	a3,1
600015e8:	01000613          	li	a2,16
600015ec:	00400593          	li	a1,4
600015f0:	00078513          	mv	a0,a5
600015f4:	d54ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:921
            this_i2c->master_status = I2C_FAILED;
600015f8:	fdc42783          	lw	a5,-36(s0)
600015fc:	00200713          	li	a4,2
60001600:	02e7aa23          	sw	a4,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:927

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
60001604:	fdc42783          	lw	a5,-36(s0)
60001608:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:928
            enable_slave_if_required(this_i2c);
6000160c:	fdc42503          	lw	a0,-36(s0)
60001610:	c19ff0ef          	jal	ra,60001228 <enable_slave_if_required>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:929
            break;
60001614:	60c0006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:933
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
60001618:	fdc42783          	lw	a5,-36(s0)
6000161c:	0007a783          	lw	a5,0(a5)
60001620:	00878593          	addi	a1,a5,8
60001624:	fdc42783          	lw	a5,-36(s0)
60001628:	0287a703          	lw	a4,40(a5)
6000162c:	fdc42783          	lw	a5,-36(s0)
60001630:	0307a783          	lw	a5,48(a5)
60001634:	00178613          	addi	a2,a5,1
60001638:	fdc42683          	lw	a3,-36(s0)
6000163c:	02c6a823          	sw	a2,48(a3)
60001640:	00f704b3          	add	s1,a4,a5
60001644:	00058513          	mv	a0,a1
60001648:	cf8ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
6000164c:	00050793          	mv	a5,a0
60001650:	00f48023          	sb	a5,0(s1)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:934
            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
60001654:	fdc42783          	lw	a5,-36(s0)
60001658:	0307a703          	lw	a4,48(a5)
6000165c:	fdc42783          	lw	a5,-36(s0)
60001660:	02c7a783          	lw	a5,44(a5)
60001664:	fff78793          	addi	a5,a5,-1
60001668:	58f76a63          	bltu	a4,a5,60001bfc <I2C_isr+0x984>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:938
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
6000166c:	fdc42783          	lw	a5,-36(s0)
60001670:	0007a783          	lw	a5,0(a5)
60001674:	00000693          	li	a3,0
60001678:	00400613          	li	a2,4
6000167c:	00200593          	li	a1,2
60001680:	00078513          	mv	a0,a5
60001684:	cc4ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:940
            }
            break;
60001688:	5740006f          	j	60001bfc <I2C_isr+0x984>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:944
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
6000168c:	fdc42783          	lw	a5,-36(s0)
60001690:	0007a783          	lw	a5,0(a5)
60001694:	00878693          	addi	a3,a5,8
60001698:	fdc42783          	lw	a5,-36(s0)
6000169c:	0287a703          	lw	a4,40(a5)
600016a0:	fdc42783          	lw	a5,-36(s0)
600016a4:	0307a783          	lw	a5,48(a5)
600016a8:	00f704b3          	add	s1,a4,a5
600016ac:	00068513          	mv	a0,a3
600016b0:	c90ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
600016b4:	00050793          	mv	a5,a0
600016b8:	00f48023          	sb	a5,0(s1)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:946
          
            hold_bus = this_i2c->options & I2C_HOLD_BUS; 
600016bc:	fdc42783          	lw	a5,-36(s0)
600016c0:	0147c783          	lbu	a5,20(a5)
600016c4:	0017f793          	andi	a5,a5,1
600016c8:	fef40723          	sb	a5,-18(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:949

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
600016cc:	fdc42783          	lw	a5,-36(s0)
600016d0:	fee44703          	lbu	a4,-18(s0)
600016d4:	06e78423          	sb	a4,104(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:950
            if ( hold_bus == 0u )
600016d8:	fee44783          	lbu	a5,-18(s0)
600016dc:	02079663          	bnez	a5,60001708 <I2C_isr+0x490>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:952
            { 
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
600016e0:	fdc42783          	lw	a5,-36(s0)
600016e4:	0007a783          	lw	a5,0(a5)
600016e8:	00100693          	li	a3,1
600016ec:	01000613          	li	a2,16
600016f0:	00400593          	li	a1,4
600016f4:	00078513          	mv	a0,a5
600016f8:	c50ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:955

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
600016fc:	fdc42503          	lw	a0,-36(s0)
60001700:	b29ff0ef          	jal	ra,60001228 <enable_slave_if_required>
60001704:	0100006f          	j	60001714 <I2C_isr+0x49c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:959
            }
            else
            {
                I2C_disable_irq( this_i2c );
60001708:	fdc42503          	lw	a0,-36(s0)
6000170c:	58c000ef          	jal	ra,60001c98 <I2C_disable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:960
                clear_irq = 0u;
60001710:	fe0407a3          	sb	zero,-17(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:966
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
60001714:	fdc42783          	lw	a5,-36(s0)
60001718:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:967
            this_i2c->master_status = I2C_SUCCESS;
6000171c:	fdc42783          	lw	a5,-36(s0)
60001720:	0207aa23          	sw	zero,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:968
            break;
60001724:	4fc0006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:973
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
60001728:	fdc42783          	lw	a5,-36(s0)
6000172c:	0007a783          	lw	a5,0(a5)
60001730:	00100693          	li	a3,1
60001734:	00400613          	li	a2,4
60001738:	00200593          	li	a1,2
6000173c:	00078513          	mv	a0,a5
60001740:	c08ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:975

            this_i2c->transaction = NO_TRANSACTION;
60001744:	fdc42783          	lw	a5,-36(s0)
60001748:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:976
            this_i2c->slave_status = I2C_SUCCESS;
6000174c:	fdc42783          	lw	a5,-36(s0)
60001750:	0407aa23          	sw	zero,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:979
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
60001754:	fdc42783          	lw	a5,-36(s0)
60001758:	0697c783          	lbu	a5,105(a5)
6000175c:	4a078463          	beqz	a5,60001c04 <I2C_isr+0x98c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:981
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
60001760:	fdc42783          	lw	a5,-36(s0)
60001764:	0007a783          	lw	a5,0(a5)
60001768:	00100693          	li	a3,1
6000176c:	02000613          	li	a2,32
60001770:	00500593          	li	a1,5
60001774:	00078513          	mv	a0,a5
60001778:	bd0ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:983
            }
            break;
6000177c:	4880006f          	j	60001c04 <I2C_isr+0x98c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:991
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
60001780:	fdc42783          	lw	a5,-36(s0)
60001784:	00100713          	li	a4,1
60001788:	06e784a3          	sb	a4,105(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:996
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
6000178c:	fdc42783          	lw	a5,-36(s0)
60001790:	00400713          	li	a4,4
60001794:	00e78623          	sb	a4,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:997
            this_i2c->slave_rx_idx = 0u;
60001798:	fdc42783          	lw	a5,-36(s0)
6000179c:	0407a823          	sw	zero,80(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:998
            this_i2c->random_read_addr = 0u;
600017a0:	fdc42783          	lw	a5,-36(s0)
600017a4:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1003
            /*
             * If Start Bit is set clear it, but store that information since it is because of
             * pending transaction
             */
            if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
600017a8:	fdc42783          	lw	a5,-36(s0)
600017ac:	0007a783          	lw	a5,0(a5)
600017b0:	02000613          	li	a2,32
600017b4:	00500593          	li	a1,5
600017b8:	00078513          	mv	a0,a5
600017bc:	bb4ff0ef          	jal	ra,60000b70 <HW_get_8bit_reg_field>
600017c0:	00050793          	mv	a5,a0
600017c4:	02078663          	beqz	a5,600017f0 <I2C_isr+0x578>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1005
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
600017c8:	fdc42783          	lw	a5,-36(s0)
600017cc:	0007a783          	lw	a5,0(a5)
600017d0:	00000693          	li	a3,0
600017d4:	02000613          	li	a2,32
600017d8:	00500593          	li	a1,5
600017dc:	00078513          	mv	a0,a5
600017e0:	b68ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1006
                this_i2c->is_transaction_pending = 1u;
600017e4:	fdc42783          	lw	a5,-36(s0)
600017e8:	00100713          	li	a4,1
600017ec:	06e784a3          	sb	a4,105(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1008
            }
            this_i2c->slave_status = I2C_IN_PROGRESS;
600017f0:	fdc42783          	lw	a5,-36(s0)
600017f4:	00100713          	li	a4,1
600017f8:	04e7aa23          	sw	a4,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1014
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
600017fc:	4240006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1018
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
60001800:	fdc42783          	lw	a5,-36(s0)
60001804:	0487a783          	lw	a5,72(a5)
60001808:	06078c63          	beqz	a5,60001880 <I2C_isr+0x608>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1019
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
6000180c:	fdc42783          	lw	a5,-36(s0)
60001810:	0507a703          	lw	a4,80(a5)
60001814:	fdc42783          	lw	a5,-36(s0)
60001818:	04c7a783          	lw	a5,76(a5)
6000181c:	06f77263          	bgeu	a4,a5,60001880 <I2C_isr+0x608>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1021
            {
                data = HAL_get_8bit_reg(this_i2c->base_address, DATA);
60001820:	fdc42783          	lw	a5,-36(s0)
60001824:	0007a783          	lw	a5,0(a5)
60001828:	00878793          	addi	a5,a5,8
6000182c:	00078513          	mv	a0,a5
60001830:	b10ff0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
60001834:	00050793          	mv	a5,a0
60001838:	fef406a3          	sb	a5,-19(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1022
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
6000183c:	fdc42783          	lw	a5,-36(s0)
60001840:	0487a703          	lw	a4,72(a5)
60001844:	fdc42783          	lw	a5,-36(s0)
60001848:	0507a783          	lw	a5,80(a5)
6000184c:	00178613          	addi	a2,a5,1
60001850:	fdc42683          	lw	a3,-36(s0)
60001854:	04c6a823          	sw	a2,80(a3)
60001858:	00f707b3          	add	a5,a4,a5
6000185c:	fed44703          	lbu	a4,-19(s0)
60001860:	00e78023          	sb	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1031
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
60001864:	fdc42783          	lw	a5,-36(s0)
60001868:	0107a783          	lw	a5,16(a5)
6000186c:	00879713          	slli	a4,a5,0x8
60001870:	fed44783          	lbu	a5,-19(s0)
60001874:	00f70733          	add	a4,a4,a5
60001878:	fdc42783          	lw	a5,-36(s0)
6000187c:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1037
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
60001880:	fdc42783          	lw	a5,-36(s0)
60001884:	0507a703          	lw	a4,80(a5)
60001888:	fdc42783          	lw	a5,-36(s0)
6000188c:	04c7a783          	lw	a5,76(a5)
60001890:	36f76e63          	bltu	a4,a5,60001c0c <I2C_isr+0x994>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1040
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
60001894:	fdc42783          	lw	a5,-36(s0)
60001898:	0007a783          	lw	a5,0(a5)
6000189c:	00000693          	li	a3,0
600018a0:	00400613          	li	a2,4
600018a4:	00200593          	li	a1,2
600018a8:	00078513          	mv	a0,a5
600018ac:	a9cff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1042
            }
            break;
600018b0:	35c0006f          	j	60001c0c <I2C_isr+0x994>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1050
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
600018b4:	fdc42783          	lw	a5,-36(s0)
600018b8:	00c7c703          	lbu	a4,12(a5)
600018bc:	00400793          	li	a5,4
600018c0:	0cf71263          	bne	a4,a5,60001984 <I2C_isr+0x70c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1052
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
600018c4:	fdc42783          	lw	a5,-36(s0)
600018c8:	0507a703          	lw	a4,80(a5)
600018cc:	fdc42783          	lw	a5,-36(s0)
600018d0:	0587a783          	lw	a5,88(a5)
600018d4:	00f71a63          	bne	a4,a5,600018e8 <I2C_isr+0x670>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1054
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
600018d8:	fdc42783          	lw	a5,-36(s0)
600018dc:	0107a703          	lw	a4,16(a5)
600018e0:	fdc42783          	lw	a5,-36(s0)
600018e4:	04e7a223          	sw	a4,68(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1057
                }
                /* Call the slave's write transaction handler if it exists. */
                if ( this_i2c->slave_write_handler != 0u )
600018e8:	fdc42783          	lw	a5,-36(s0)
600018ec:	05c7a783          	lw	a5,92(a5)
600018f0:	06078a63          	beqz	a5,60001964 <I2C_isr+0x6ec>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1060
                {
                    i2c_slave_handler_ret_t h_ret;
                    h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
600018f4:	fdc42783          	lw	a5,-36(s0)
600018f8:	05c7a683          	lw	a3,92(a5)
600018fc:	fdc42783          	lw	a5,-36(s0)
60001900:	0487a703          	lw	a4,72(a5)
60001904:	fdc42783          	lw	a5,-36(s0)
60001908:	0507a783          	lw	a5,80(a5)
6000190c:	01079793          	slli	a5,a5,0x10
60001910:	0107d793          	srli	a5,a5,0x10
60001914:	00078613          	mv	a2,a5
60001918:	00070593          	mv	a1,a4
6000191c:	fdc42503          	lw	a0,-36(s0)
60001920:	000680e7          	jalr	a3
60001924:	fea42423          	sw	a0,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1061
                    if ( I2C_REENABLE_SLAVE_RX == h_ret )
60001928:	fe842783          	lw	a5,-24(s0)
6000192c:	00079863          	bnez	a5,6000193c <I2C_isr+0x6c4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1067
                    {
                        /* There is a small risk that the write handler could
                         * call I2C_disable_slave() but return
                         * I2C_REENABLE_SLAVE_RX in error so we only enable
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
60001930:	fdc42503          	lw	a0,-36(s0)
60001934:	8f5ff0ef          	jal	ra,60001228 <enable_slave_if_required>
60001938:	05c0006f          	j	60001994 <I2C_isr+0x71c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1071
                    }
                    else
                    {
                        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x0u );
6000193c:	fdc42783          	lw	a5,-36(s0)
60001940:	0007a783          	lw	a5,0(a5)
60001944:	00000693          	li	a3,0
60001948:	00400613          	li	a2,4
6000194c:	00200593          	li	a1,2
60001950:	00078513          	mv	a0,a5
60001954:	9f4ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1075
                        /* Clear slave mode flag as well otherwise in mixed
                         * master/slave applications, the AA bit will get set by
                         * subsequent master operations. */
                        this_i2c->is_slave_enabled = 0u;
60001958:	fdc42783          	lw	a5,-36(s0)
6000195c:	06078023          	sb	zero,96(a5)
60001960:	0340006f          	j	60001994 <I2C_isr+0x71c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1081
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
60001964:	fdc42783          	lw	a5,-36(s0)
60001968:	0007a783          	lw	a5,0(a5)
6000196c:	00100693          	li	a3,1
60001970:	00400613          	li	a2,4
60001974:	00200593          	li	a1,2
60001978:	00078513          	mv	a0,a5
6000197c:	9ccff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
60001980:	0140006f          	j	60001994 <I2C_isr+0x71c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1090
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
60001984:	fdc42783          	lw	a5,-36(s0)
60001988:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1096
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
6000198c:	fdc42503          	lw	a0,-36(s0)
60001990:	899ff0ef          	jal	ra,60001228 <enable_slave_if_required>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1100
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = I2C_SUCCESS;
60001994:	fdc42783          	lw	a5,-36(s0)
60001998:	0407aa23          	sw	zero,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1103
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
6000199c:	fdc42783          	lw	a5,-36(s0)
600019a0:	0697c783          	lbu	a5,105(a5)
600019a4:	02078063          	beqz	a5,600019c4 <I2C_isr+0x74c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1105
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
600019a8:	fdc42783          	lw	a5,-36(s0)
600019ac:	0007a783          	lw	a5,0(a5)
600019b0:	00100693          	li	a3,1
600019b4:	02000613          	li	a2,32
600019b8:	00500593          	li	a1,5
600019bc:	00078513          	mv	a0,a5
600019c0:	988ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1112

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
600019c4:	fdc42783          	lw	a5,-36(s0)
600019c8:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1114

            break;
600019cc:	2540006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1121
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
600019d0:	fdc42783          	lw	a5,-36(s0)
600019d4:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1126
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
600019d8:	fdc42783          	lw	a5,-36(s0)
600019dc:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1130
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->slave_status)
600019e0:	fdc42783          	lw	a5,-36(s0)
600019e4:	0547a703          	lw	a4,84(a5)
600019e8:	00100793          	li	a5,1
600019ec:	00f71863          	bne	a4,a5,600019fc <I2C_isr+0x784>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1132
            {
                this_i2c->slave_status = I2C_FAILED;
600019f0:	fdc42783          	lw	a5,-36(s0)
600019f4:	00200713          	li	a4,2
600019f8:	04e7aa23          	sw	a4,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1135
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
600019fc:	fdc42503          	lw	a0,-36(s0)
60001a00:	829ff0ef          	jal	ra,60001228 <enable_slave_if_required>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1137

            break;
60001a04:	21c0006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1143
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:       /* Arbitration lost, and: */
        case ST_RACK:           /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
60001a08:	fe744783          	lbu	a5,-25(s0)
60001a0c:	0ff7f713          	andi	a4,a5,255
60001a10:	0a800793          	li	a5,168
60001a14:	06f71663          	bne	a4,a5,60001a80 <I2C_isr+0x808>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1145
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
60001a18:	fdc42783          	lw	a5,-36(s0)
60001a1c:	00500713          	li	a4,5
60001a20:	00e78623          	sb	a4,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1146
                this_i2c->random_read_addr = 0u;
60001a24:	fdc42783          	lw	a5,-36(s0)
60001a28:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1147
                this_i2c->slave_status = I2C_IN_PROGRESS;
60001a2c:	fdc42783          	lw	a5,-36(s0)
60001a30:	00100713          	li	a4,1
60001a34:	04e7aa23          	sw	a4,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1151
                /* If Start Bit is set clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
60001a38:	fdc42783          	lw	a5,-36(s0)
60001a3c:	0007a783          	lw	a5,0(a5)
60001a40:	02000613          	li	a2,32
60001a44:	00500593          	li	a1,5
60001a48:	00078513          	mv	a0,a5
60001a4c:	924ff0ef          	jal	ra,60000b70 <HW_get_8bit_reg_field>
60001a50:	00050793          	mv	a5,a0
60001a54:	02078663          	beqz	a5,60001a80 <I2C_isr+0x808>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1153
                {
                    HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
60001a58:	fdc42783          	lw	a5,-36(s0)
60001a5c:	0007a783          	lw	a5,0(a5)
60001a60:	00000693          	li	a3,0
60001a64:	02000613          	li	a2,32
60001a68:	00500593          	li	a1,5
60001a6c:	00078513          	mv	a0,a5
60001a70:	8d8ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1154
                    this_i2c->is_transaction_pending = 1u;
60001a74:	fdc42783          	lw	a5,-36(s0)
60001a78:	00100713          	li	a4,1
60001a7c:	06e784a3          	sb	a4,105(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1157
                 }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
60001a80:	fdc42783          	lw	a5,-36(s0)
60001a84:	0447a703          	lw	a4,68(a5)
60001a88:	fdc42783          	lw	a5,-36(s0)
60001a8c:	0407a783          	lw	a5,64(a5)
60001a90:	02f76063          	bltu	a4,a5,60001ab0 <I2C_isr+0x838>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1161
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, 0xFFu);
60001a94:	fdc42783          	lw	a5,-36(s0)
60001a98:	0007a783          	lw	a5,0(a5)
60001a9c:	00878793          	addi	a5,a5,8
60001aa0:	0ff00593          	li	a1,255
60001aa4:	00078513          	mv	a0,a5
60001aa8:	890ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
60001aac:	03c0006f          	j	60001ae8 <I2C_isr+0x870>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1166
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++]);
60001ab0:	fdc42783          	lw	a5,-36(s0)
60001ab4:	0007a783          	lw	a5,0(a5)
60001ab8:	00878513          	addi	a0,a5,8
60001abc:	fdc42783          	lw	a5,-36(s0)
60001ac0:	03c7a703          	lw	a4,60(a5)
60001ac4:	fdc42783          	lw	a5,-36(s0)
60001ac8:	0447a783          	lw	a5,68(a5)
60001acc:	00178613          	addi	a2,a5,1
60001ad0:	fdc42683          	lw	a3,-36(s0)
60001ad4:	04c6a223          	sw	a2,68(a3)
60001ad8:	00f707b3          	add	a5,a4,a5
60001adc:	0007c783          	lbu	a5,0(a5)
60001ae0:	00078593          	mv	a1,a5
60001ae4:	854ff0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1169
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
60001ae8:	fdc42783          	lw	a5,-36(s0)
60001aec:	0447a703          	lw	a4,68(a5)
60001af0:	fdc42783          	lw	a5,-36(s0)
60001af4:	0407a783          	lw	a5,64(a5)
60001af8:	10f76e63          	bltu	a4,a5,60001c14 <I2C_isr+0x99c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1171
            {
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
60001afc:	fdc42783          	lw	a5,-36(s0)
60001b00:	0007a783          	lw	a5,0(a5)
60001b04:	00000693          	li	a3,0
60001b08:	00400613          	li	a2,4
60001b0c:	00200593          	li	a1,2
60001b10:	00078513          	mv	a0,a5
60001b14:	834ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1174
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
60001b18:	fdc42783          	lw	a5,-36(s0)
60001b1c:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1176
            }
            break;
60001b20:	0f40006f          	j	60001c14 <I2C_isr+0x99c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1183
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
60001b24:	fdc42783          	lw	a5,-36(s0)
60001b28:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1184
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u); 
60001b2c:	fdc42783          	lw	a5,-36(s0)
60001b30:	0007a783          	lw	a5,0(a5)
60001b34:	00100693          	li	a3,1
60001b38:	00400613          	li	a2,4
60001b3c:	00200593          	li	a1,2
60001b40:	00078513          	mv	a0,a5
60001b44:	804ff0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1187

            /*  Mark previous state as complete */
            this_i2c->slave_status = I2C_SUCCESS;
60001b48:	fdc42783          	lw	a5,-36(s0)
60001b4c:	0407aa23          	sw	zero,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1189
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
60001b50:	fdc42783          	lw	a5,-36(s0)
60001b54:	0697c783          	lbu	a5,105(a5)
60001b58:	02078063          	beqz	a5,60001b78 <I2C_isr+0x900>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1191
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
60001b5c:	fdc42783          	lw	a5,-36(s0)
60001b60:	0007a783          	lw	a5,0(a5)
60001b64:	00100693          	li	a3,1
60001b68:	02000613          	li	a2,32
60001b6c:	00500593          	li	a1,5
60001b70:	00078513          	mv	a0,a5
60001b74:	fd5fe0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1197
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
60001b78:	fdc42783          	lw	a5,-36(s0)
60001b7c:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1199

            break;
60001b80:	0a00006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1208
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
60001b84:	fdc42783          	lw	a5,-36(s0)
60001b88:	0007a783          	lw	a5,0(a5)
60001b8c:	00000693          	li	a3,0
60001b90:	02000613          	li	a2,32
60001b94:	00500593          	li	a1,5
60001b98:	00078513          	mv	a0,a5
60001b9c:	fadfe0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1213
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
60001ba0:	fdc42783          	lw	a5,-36(s0)
60001ba4:	00078623          	sb	zero,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1218
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
60001ba8:	fdc42783          	lw	a5,-36(s0)
60001bac:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1222
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->master_status)
60001bb0:	fdc42783          	lw	a5,-36(s0)
60001bb4:	0347a703          	lw	a4,52(a5)
60001bb8:	00100793          	li	a5,1
60001bbc:	00f71863          	bne	a4,a5,60001bcc <I2C_isr+0x954>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1224
            {
                this_i2c->master_status = I2C_FAILED;
60001bc0:	fdc42783          	lw	a5,-36(s0)
60001bc4:	00200713          	li	a4,2
60001bc8:	02e7aa23          	sw	a4,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1227
            }

            if(I2C_IN_PROGRESS == this_i2c->slave_status)
60001bcc:	fdc42783          	lw	a5,-36(s0)
60001bd0:	0547a703          	lw	a4,84(a5)
60001bd4:	00100793          	li	a5,1
60001bd8:	04f71263          	bne	a4,a5,60001c1c <I2C_isr+0x9a4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1229
            {
                this_i2c->slave_status = I2C_FAILED;
60001bdc:	fdc42783          	lw	a5,-36(s0)
60001be0:	00200713          	li	a4,2
60001be4:	04e7aa23          	sw	a4,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1232
            }

            break;
60001be8:	0340006f          	j	60001c1c <I2C_isr+0x9a4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:828
              break;
60001bec:	00000013          	nop
60001bf0:	0300006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:819
            break;
60001bf4:	00000013          	nop
60001bf8:	0280006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:940
            break;
60001bfc:	00000013          	nop
60001c00:	0200006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:983
            break;
60001c04:	00000013          	nop
60001c08:	0180006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1042
            break;
60001c0c:	00000013          	nop
60001c10:	0100006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1176
            break;
60001c14:	00000013          	nop
60001c18:	0080006f          	j	60001c20 <I2C_isr+0x9a8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1232
            break;
60001c1c:	00000013          	nop
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1235
    }
    
    if ( clear_irq )
60001c20:	fef44783          	lbu	a5,-17(s0)
60001c24:	02078063          	beqz	a5,60001c44 <I2C_isr+0x9cc>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1238
    {
        /* clear interrupt. */
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
60001c28:	fdc42783          	lw	a5,-36(s0)
60001c2c:	0007a783          	lw	a5,0(a5)
60001c30:	00000693          	li	a3,0
60001c34:	00800613          	li	a2,8
60001c38:	00300593          	li	a1,3
60001c3c:	00078513          	mv	a0,a5
60001c40:	f09fe0ef          	jal	ra,60000b48 <HW_set_8bit_reg_field>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1243
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
60001c44:	fdc42783          	lw	a5,-36(s0)
60001c48:	0007a783          	lw	a5,0(a5)
60001c4c:	00478793          	addi	a5,a5,4
60001c50:	00078513          	mv	a0,a5
60001c54:	eedfe0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
60001c58:	00050793          	mv	a5,a0
60001c5c:	fef403a3          	sb	a5,-25(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/core_i2c.c:1244
}
60001c60:	00000013          	nop
60001c64:	02c12083          	lw	ra,44(sp)
60001c68:	02812403          	lw	s0,40(sp)
60001c6c:	02412483          	lw	s1,36(sp)
60001c70:	03010113          	addi	sp,sp,48
60001c74:	00008067          	ret

60001c78 <I2C_enable_irq>:
I2C_enable_irq():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/i2c_interrupt.c:18
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq( i2c_instance_t * this_i2c )
{
60001c78:	fe010113          	addi	sp,sp,-32
60001c7c:	00812e23          	sw	s0,28(sp)
60001c80:	02010413          	addi	s0,sp,32
60001c84:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/i2c_interrupt.c:20
    HAL_ASSERT(0)
}
60001c88:	00000013          	nop
60001c8c:	01c12403          	lw	s0,28(sp)
60001c90:	02010113          	addi	sp,sp,32
60001c94:	00008067          	ret

60001c98 <I2C_disable_irq>:
I2C_disable_irq():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/i2c_interrupt.c:27
/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
60001c98:	fe010113          	addi	sp,sp,-32
60001c9c:	00812e23          	sw	s0,28(sp)
60001ca0:	02010413          	addi	s0,sp,32
60001ca4:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreI2C/i2c_interrupt.c:29
    HAL_ASSERT(0)
}
60001ca8:	00000013          	nop
60001cac:	01c12403          	lw	s0,28(sp)
60001cb0:	02010113          	addi	sp,sp,32
60001cb4:	00008067          	ret

60001cb8 <GPIO_init>:
GPIO_init():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:37
(
    gpio_instance_t *   this_gpio,
    addr_t              base_addr,
    gpio_apb_width_t    bus_width
)
{
60001cb8:	fd010113          	addi	sp,sp,-48
60001cbc:	02112623          	sw	ra,44(sp)
60001cc0:	02812423          	sw	s0,40(sp)
60001cc4:	03010413          	addi	s0,sp,48
60001cc8:	fca42e23          	sw	a0,-36(s0)
60001ccc:	fcb42c23          	sw	a1,-40(s0)
60001cd0:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:38
    uint8_t i = 0;
60001cd4:	fe0407a3          	sb	zero,-17(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:39
    addr_t cfg_reg_addr = base_addr;
60001cd8:	fd842783          	lw	a5,-40(s0)
60001cdc:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:41
    
    this_gpio->base_addr = base_addr;
60001ce0:	fdc42783          	lw	a5,-36(s0)
60001ce4:	fd842703          	lw	a4,-40(s0)
60001ce8:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:42
    this_gpio->apb_bus_width = bus_width;
60001cec:	fdc42783          	lw	a5,-36(s0)
60001cf0:	fd442703          	lw	a4,-44(s0)
60001cf4:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:45
    
    /* Clear configuration. */
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
60001cf8:	fe0407a3          	sb	zero,-17(s0)
60001cfc:	fd842783          	lw	a5,-40(s0)
60001d00:	fef42423          	sw	a5,-24(s0)
60001d04:	0280006f          	j	60001d2c <GPIO_init+0x74>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:47 (discriminator 3)
    {
        HW_set_8bit_reg( cfg_reg_addr, 0 );
60001d08:	00000593          	li	a1,0
60001d0c:	fe842503          	lw	a0,-24(s0)
60001d10:	e29fe0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:48 (discriminator 3)
        cfg_reg_addr += 4;
60001d14:	fe842783          	lw	a5,-24(s0)
60001d18:	00478793          	addi	a5,a5,4
60001d1c:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:45 (discriminator 3)
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
60001d20:	fef44783          	lbu	a5,-17(s0)
60001d24:	00178793          	addi	a5,a5,1
60001d28:	fef407a3          	sb	a5,-17(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:45 (discriminator 1)
60001d2c:	fef44703          	lbu	a4,-17(s0)
60001d30:	01f00793          	li	a5,31
60001d34:	fce7fae3          	bgeu	a5,a4,60001d08 <GPIO_init+0x50>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:51
    }
    /* Clear any pending interrupts */
    switch( this_gpio->apb_bus_width )
60001d38:	fdc42783          	lw	a5,-36(s0)
60001d3c:	0047a783          	lw	a5,4(a5)
60001d40:	00100713          	li	a4,1
60001d44:	02e78663          	beq	a5,a4,60001d70 <GPIO_init+0xb8>
60001d48:	06078263          	beqz	a5,60001dac <GPIO_init+0xf4>
60001d4c:	00200713          	li	a4,2
60001d50:	0ce79063          	bne	a5,a4,60001e10 <GPIO_init+0x158>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:54
    {
        case GPIO_APB_32_BITS_BUS:
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
60001d54:	fdc42783          	lw	a5,-36(s0)
60001d58:	0007a783          	lw	a5,0(a5)
60001d5c:	08078793          	addi	a5,a5,128
60001d60:	fff00593          	li	a1,-1
60001d64:	00078513          	mv	a0,a5
60001d68:	d41fe0ef          	jal	ra,60000aa8 <HW_set_32bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:55
            break;
60001d6c:	0a80006f          	j	60001e14 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:58
            
        case GPIO_APB_16_BITS_BUS:
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, (uint16_t)CLEAR_ALL_IRQ16 );
60001d70:	fdc42783          	lw	a5,-36(s0)
60001d74:	0007a783          	lw	a5,0(a5)
60001d78:	08078713          	addi	a4,a5,128
60001d7c:	000107b7          	lui	a5,0x10
60001d80:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60001d84:	00070513          	mv	a0,a4
60001d88:	d69fe0ef          	jal	ra,60000af0 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
60001d8c:	fdc42783          	lw	a5,-36(s0)
60001d90:	0007a783          	lw	a5,0(a5)
60001d94:	08478713          	addi	a4,a5,132
60001d98:	000107b7          	lui	a5,0x10
60001d9c:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xefff>
60001da0:	00070513          	mv	a0,a4
60001da4:	d4dfe0ef          	jal	ra,60000af0 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:60
            break;
60001da8:	06c0006f          	j	60001e14 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:63
            
        case GPIO_APB_8_BITS_BUS:
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, (uint8_t)CLEAR_ALL_IRQ8 );
60001dac:	fdc42783          	lw	a5,-36(s0)
60001db0:	0007a783          	lw	a5,0(a5)
60001db4:	08078793          	addi	a5,a5,128
60001db8:	0ff00593          	li	a1,255
60001dbc:	00078513          	mv	a0,a5
60001dc0:	d79fe0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:64
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, (uint8_t)CLEAR_ALL_IRQ8 );
60001dc4:	fdc42783          	lw	a5,-36(s0)
60001dc8:	0007a783          	lw	a5,0(a5)
60001dcc:	08478793          	addi	a5,a5,132
60001dd0:	0ff00593          	li	a1,255
60001dd4:	00078513          	mv	a0,a5
60001dd8:	d61fe0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:65
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, (uint8_t)CLEAR_ALL_IRQ8 );
60001ddc:	fdc42783          	lw	a5,-36(s0)
60001de0:	0007a783          	lw	a5,0(a5)
60001de4:	08878793          	addi	a5,a5,136
60001de8:	0ff00593          	li	a1,255
60001dec:	00078513          	mv	a0,a5
60001df0:	d49fe0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
60001df4:	fdc42783          	lw	a5,-36(s0)
60001df8:	0007a783          	lw	a5,0(a5)
60001dfc:	08c78793          	addi	a5,a5,140
60001e00:	0ff00593          	li	a1,255
60001e04:	00078513          	mv	a0,a5
60001e08:	d31fe0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:67
            break;
60001e0c:	0080006f          	j	60001e14 <GPIO_init+0x15c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:71
            
        default:
            HAL_ASSERT(0);
            break;
60001e10:	00000013          	nop
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:73
    }
}
60001e14:	00000013          	nop
60001e18:	02c12083          	lw	ra,44(sp)
60001e1c:	02812403          	lw	s0,40(sp)
60001e20:	03010113          	addi	sp,sp,48
60001e24:	00008067          	ret

60001e28 <GPIO_set_output>:
GPIO_set_output():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:232
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint8_t             value
)
{
60001e28:	fd010113          	addi	sp,sp,-48
60001e2c:	02112623          	sw	ra,44(sp)
60001e30:	02812423          	sw	s0,40(sp)
60001e34:	03010413          	addi	s0,sp,48
60001e38:	fca42e23          	sw	a0,-36(s0)
60001e3c:	fcb42c23          	sw	a1,-40(s0)
60001e40:	00060793          	mv	a5,a2
60001e44:	fcf40ba3          	sb	a5,-41(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:236
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
            
    switch( this_gpio->apb_bus_width )
60001e48:	fdc42783          	lw	a5,-36(s0)
60001e4c:	0047a783          	lw	a5,4(a5)
60001e50:	00100713          	li	a4,1
60001e54:	08e78663          	beq	a5,a4,60001ee0 <GPIO_set_output+0xb8>
60001e58:	12078e63          	beqz	a5,60001f94 <GPIO_set_output+0x16c>
60001e5c:	00200713          	li	a4,2
60001e60:	1ee79463          	bne	a5,a4,60002048 <GPIO_set_output+0x220>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:242
    {
        case GPIO_APB_32_BITS_BUS:
            {
                uint32_t outputs_state;
                
                outputs_state = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
60001e64:	fdc42783          	lw	a5,-36(s0)
60001e68:	0007a783          	lw	a5,0(a5)
60001e6c:	0a078793          	addi	a5,a5,160
60001e70:	00078513          	mv	a0,a5
60001e74:	c3dfe0ef          	jal	ra,60000ab0 <HW_get_32bit_reg>
60001e78:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:243
                if ( 0 == value )
60001e7c:	fd744783          	lbu	a5,-41(s0)
60001e80:	02079463          	bnez	a5,60001ea8 <GPIO_set_output+0x80>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:245
                {
                    outputs_state &= ~(1 << port_id);
60001e84:	fd842783          	lw	a5,-40(s0)
60001e88:	00100713          	li	a4,1
60001e8c:	00f717b3          	sll	a5,a4,a5
60001e90:	fff7c793          	not	a5,a5
60001e94:	00078713          	mv	a4,a5
60001e98:	fec42783          	lw	a5,-20(s0)
60001e9c:	00e7f7b3          	and	a5,a5,a4
60001ea0:	fef42623          	sw	a5,-20(s0)
60001ea4:	0200006f          	j	60001ec4 <GPIO_set_output+0x9c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:249
                }
                else
                {
                    outputs_state |= 1 << port_id;
60001ea8:	fd842783          	lw	a5,-40(s0)
60001eac:	00100713          	li	a4,1
60001eb0:	00f717b3          	sll	a5,a4,a5
60001eb4:	00078713          	mv	a4,a5
60001eb8:	fec42783          	lw	a5,-20(s0)
60001ebc:	00e7e7b3          	or	a5,a5,a4
60001ec0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:251
                }
                HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, outputs_state );
60001ec4:	fdc42783          	lw	a5,-36(s0)
60001ec8:	0007a783          	lw	a5,0(a5)
60001ecc:	0a078793          	addi	a5,a5,160
60001ed0:	fec42583          	lw	a1,-20(s0)
60001ed4:	00078513          	mv	a0,a5
60001ed8:	bd1fe0ef          	jal	ra,60000aa8 <HW_set_32bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:262
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT ) == outputs_state );
            }
            break;
60001edc:	1700006f          	j	6000204c <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:267
            
        case GPIO_APB_16_BITS_BUS:
            {
                uint16_t outputs_state;
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 4) * 4);
60001ee0:	fdc42783          	lw	a5,-36(s0)
60001ee4:	0007a703          	lw	a4,0(a5)
60001ee8:	fd842783          	lw	a5,-40(s0)
60001eec:	0047d793          	srli	a5,a5,0x4
60001ef0:	00279793          	slli	a5,a5,0x2
60001ef4:	00f707b3          	add	a5,a4,a5
60001ef8:	0a078793          	addi	a5,a5,160
60001efc:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:269
                
                outputs_state = HW_get_16bit_reg( gpio_out_reg_addr );
60001f00:	fe442503          	lw	a0,-28(s0)
60001f04:	bf5fe0ef          	jal	ra,60000af8 <HW_get_16bit_reg>
60001f08:	00050793          	mv	a5,a0
60001f0c:	fef41523          	sh	a5,-22(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:270
                if ( 0 == value )
60001f10:	fd744783          	lbu	a5,-41(s0)
60001f14:	04079063          	bnez	a5,60001f54 <GPIO_set_output+0x12c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:272
                {
                    outputs_state &= ~(1 << (port_id & 0x0F));
60001f18:	fd842783          	lw	a5,-40(s0)
60001f1c:	00f7f793          	andi	a5,a5,15
60001f20:	00100713          	li	a4,1
60001f24:	00f717b3          	sll	a5,a4,a5
60001f28:	01079793          	slli	a5,a5,0x10
60001f2c:	4107d793          	srai	a5,a5,0x10
60001f30:	fff7c793          	not	a5,a5
60001f34:	01079713          	slli	a4,a5,0x10
60001f38:	41075713          	srai	a4,a4,0x10
60001f3c:	fea41783          	lh	a5,-22(s0)
60001f40:	00f777b3          	and	a5,a4,a5
60001f44:	01079793          	slli	a5,a5,0x10
60001f48:	4107d793          	srai	a5,a5,0x10
60001f4c:	fef41523          	sh	a5,-22(s0)
60001f50:	0300006f          	j	60001f80 <GPIO_set_output+0x158>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:276
                }
                else
                {
                    outputs_state |= 1 << (port_id & 0x0F);
60001f54:	fd842783          	lw	a5,-40(s0)
60001f58:	00f7f793          	andi	a5,a5,15
60001f5c:	00100713          	li	a4,1
60001f60:	00f717b3          	sll	a5,a4,a5
60001f64:	01079713          	slli	a4,a5,0x10
60001f68:	41075713          	srai	a4,a4,0x10
60001f6c:	fea41783          	lh	a5,-22(s0)
60001f70:	00f767b3          	or	a5,a4,a5
60001f74:	01079793          	slli	a5,a5,0x10
60001f78:	4107d793          	srai	a5,a5,0x10
60001f7c:	fef41523          	sh	a5,-22(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:278
                }
                HW_set_16bit_reg( gpio_out_reg_addr, outputs_state );
60001f80:	fea45783          	lhu	a5,-22(s0)
60001f84:	00078593          	mv	a1,a5
60001f88:	fe442503          	lw	a0,-28(s0)
60001f8c:	b65fe0ef          	jal	ra,60000af0 <HW_set_16bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:289
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HW_get_16bit_reg( gpio_out_reg_addr ) == outputs_state );
            }
            break;
60001f90:	0bc0006f          	j	6000204c <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:294
            
        case GPIO_APB_8_BITS_BUS:
            {
                uint8_t outputs_state;
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 3) * 4);
60001f94:	fdc42783          	lw	a5,-36(s0)
60001f98:	0007a703          	lw	a4,0(a5)
60001f9c:	fd842783          	lw	a5,-40(s0)
60001fa0:	0037d793          	srli	a5,a5,0x3
60001fa4:	00279793          	slli	a5,a5,0x2
60001fa8:	00f707b3          	add	a5,a4,a5
60001fac:	0a078793          	addi	a5,a5,160
60001fb0:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:296
                
                outputs_state = HW_get_8bit_reg( gpio_out_reg_addr );
60001fb4:	fe042503          	lw	a0,-32(s0)
60001fb8:	b89fe0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
60001fbc:	00050793          	mv	a5,a0
60001fc0:	fef404a3          	sb	a5,-23(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:297
                if ( 0 == value )
60001fc4:	fd744783          	lbu	a5,-41(s0)
60001fc8:	04079063          	bnez	a5,60002008 <GPIO_set_output+0x1e0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:299
                {
                    outputs_state &= ~(1 << (port_id & 0x07));
60001fcc:	fd842783          	lw	a5,-40(s0)
60001fd0:	0077f793          	andi	a5,a5,7
60001fd4:	00100713          	li	a4,1
60001fd8:	00f717b3          	sll	a5,a4,a5
60001fdc:	01879793          	slli	a5,a5,0x18
60001fe0:	4187d793          	srai	a5,a5,0x18
60001fe4:	fff7c793          	not	a5,a5
60001fe8:	01879713          	slli	a4,a5,0x18
60001fec:	41875713          	srai	a4,a4,0x18
60001ff0:	fe940783          	lb	a5,-23(s0)
60001ff4:	00f777b3          	and	a5,a4,a5
60001ff8:	01879793          	slli	a5,a5,0x18
60001ffc:	4187d793          	srai	a5,a5,0x18
60002000:	fef404a3          	sb	a5,-23(s0)
60002004:	0300006f          	j	60002034 <GPIO_set_output+0x20c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:303
                }
                else
                {
                    outputs_state |= 1 << (port_id & 0x07);
60002008:	fd842783          	lw	a5,-40(s0)
6000200c:	0077f793          	andi	a5,a5,7
60002010:	00100713          	li	a4,1
60002014:	00f717b3          	sll	a5,a4,a5
60002018:	01879713          	slli	a4,a5,0x18
6000201c:	41875713          	srai	a4,a4,0x18
60002020:	fe940783          	lb	a5,-23(s0)
60002024:	00f767b3          	or	a5,a4,a5
60002028:	01879793          	slli	a5,a5,0x18
6000202c:	4187d793          	srai	a5,a5,0x18
60002030:	fef404a3          	sb	a5,-23(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:305
                }
                HW_set_8bit_reg( gpio_out_reg_addr, outputs_state );
60002034:	fe944783          	lbu	a5,-23(s0)
60002038:	00078593          	mv	a1,a5
6000203c:	fe042503          	lw	a0,-32(s0)
60002040:	af9fe0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:316
                 * It may also indicate that the base address or APB bus width passed as
                 * parameter to the GPIO_init() function do not match the hardware design.
                 */
                HAL_ASSERT( HW_get_8bit_reg( gpio_out_reg_addr ) == outputs_state );
            }
            break;
60002044:	0080006f          	j	6000204c <GPIO_set_output+0x224>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:320
            
        default:
            HAL_ASSERT(0);
            break;
60002048:	00000013          	nop
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:322
    }
}
6000204c:	00000013          	nop
60002050:	02c12083          	lw	ra,44(sp)
60002054:	02812403          	lw	s0,40(sp)
60002058:	03010113          	addi	sp,sp,48
6000205c:	00008067          	ret

60002060 <GPIO_enable_irq>:
GPIO_enable_irq():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:387
void GPIO_enable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
60002060:	fd010113          	addi	sp,sp,-48
60002064:	02112623          	sw	ra,44(sp)
60002068:	02812423          	sw	s0,40(sp)
6000206c:	03010413          	addi	s0,sp,48
60002070:	fca42e23          	sw	a0,-36(s0)
60002074:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:389
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
60002078:	fdc42783          	lw	a5,-36(s0)
6000207c:	0007a783          	lw	a5,0(a5)
60002080:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:393
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
60002084:	fd842703          	lw	a4,-40(s0)
60002088:	01f00793          	li	a5,31
6000208c:	04e7e063          	bltu	a5,a4,600020cc <GPIO_enable_irq+0x6c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:395
    {
        cfg_reg_addr += (port_id * 4);
60002090:	fd842783          	lw	a5,-40(s0)
60002094:	00279793          	slli	a5,a5,0x2
60002098:	fec42703          	lw	a4,-20(s0)
6000209c:	00f707b3          	add	a5,a4,a5
600020a0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:396
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
600020a4:	fec42503          	lw	a0,-20(s0)
600020a8:	a99fe0ef          	jal	ra,60000b40 <HW_get_8bit_reg>
600020ac:	00050793          	mv	a5,a0
600020b0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:397
        cfg_value |= GPIO_INT_ENABLE_MASK;
600020b4:	fe842783          	lw	a5,-24(s0)
600020b8:	0087e793          	ori	a5,a5,8
600020bc:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:398
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
600020c0:	fe842583          	lw	a1,-24(s0)
600020c4:	fec42503          	lw	a0,-20(s0)
600020c8:	a71fe0ef          	jal	ra,60000b38 <HW_set_8bit_reg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../drivers/CoreGPIO/core_gpio.c:400
    }
}
600020cc:	00000013          	nop
600020d0:	02c12083          	lw	ra,44(sp)
600020d4:	02812403          	lw	s0,40(sp)
600020d8:	03010113          	addi	sp,sp,48
600020dc:	00008067          	ret

600020e0 <pvPortMalloc>:
pvPortMalloc():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
600020e0:	fc010113          	addi	sp,sp,-64
600020e4:	02112e23          	sw	ra,60(sp)
600020e8:	02812c23          	sw	s0,56(sp)
600020ec:	04010413          	addi	s0,sp,64
600020f0:	fca42623          	sw	a0,-52(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
600020f4:	fe042223          	sw	zero,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
600020f8:	581000ef          	jal	ra,60002e78 <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
600020fc:	8a81a783          	lw	a5,-1880(gp) # 800000a8 <xHeapHasBeenInitialised.2779>
60002100:	00079863          	bnez	a5,60002110 <pvPortMalloc+0x30>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
60002104:	284000ef          	jal	ra,60002388 <prvHeapInit>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
60002108:	00100713          	li	a4,1
6000210c:	8ae1a423          	sw	a4,-1880(gp) # 800000a8 <xHeapHasBeenInitialised.2779>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
60002110:	fcc42783          	lw	a5,-52(s0)
60002114:	02078a63          	beqz	a5,60002148 <pvPortMalloc+0x68>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
60002118:	00800793          	li	a5,8
6000211c:	00078713          	mv	a4,a5
60002120:	fcc42783          	lw	a5,-52(s0)
60002124:	00e787b3          	add	a5,a5,a4
60002128:	fcf42623          	sw	a5,-52(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
6000212c:	fcc42783          	lw	a5,-52(s0)
60002130:	0037f793          	andi	a5,a5,3
60002134:	00078a63          	beqz	a5,60002148 <pvPortMalloc+0x68>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
60002138:	fcc42783          	lw	a5,-52(s0)
6000213c:	ffc7f793          	andi	a5,a5,-4
60002140:	00478793          	addi	a5,a5,4
60002144:	fcf42623          	sw	a5,-52(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
60002148:	fcc42783          	lw	a5,-52(s0)
6000214c:	14078463          	beqz	a5,60002294 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
60002150:	fcc42703          	lw	a4,-52(s0)
60002154:	000197b7          	lui	a5,0x19
60002158:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x17ffb>
6000215c:	12e7ec63          	bltu	a5,a4,60002294 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
60002160:	89818793          	addi	a5,gp,-1896 # 80000098 <xStart>
60002164:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
60002168:	8981a783          	lw	a5,-1896(gp) # 80000098 <xStart>
6000216c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
60002170:	0180006f          	j	60002188 <pvPortMalloc+0xa8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
60002174:	fec42783          	lw	a5,-20(s0)
60002178:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
6000217c:	fec42783          	lw	a5,-20(s0)
60002180:	0007a783          	lw	a5,0(a5)
60002184:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
60002188:	fec42783          	lw	a5,-20(s0)
6000218c:	0047a783          	lw	a5,4(a5)
60002190:	fcc42703          	lw	a4,-52(s0)
60002194:	00e7f863          	bgeu	a5,a4,600021a4 <pvPortMalloc+0xc4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
60002198:	fec42783          	lw	a5,-20(s0)
6000219c:	0007a783          	lw	a5,0(a5)
600021a0:	fc079ae3          	bnez	a5,60002174 <pvPortMalloc+0x94>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
600021a4:	fec42703          	lw	a4,-20(s0)
600021a8:	8a018793          	addi	a5,gp,-1888 # 800000a0 <xEnd>
600021ac:	0ef70463          	beq	a4,a5,60002294 <pvPortMalloc+0x1b4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
600021b0:	fe842783          	lw	a5,-24(s0)
600021b4:	0007a783          	lw	a5,0(a5)
600021b8:	00800713          	li	a4,8
600021bc:	00e787b3          	add	a5,a5,a4
600021c0:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
600021c4:	fec42783          	lw	a5,-20(s0)
600021c8:	0007a703          	lw	a4,0(a5)
600021cc:	fe842783          	lw	a5,-24(s0)
600021d0:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
600021d4:	fec42783          	lw	a5,-20(s0)
600021d8:	0047a703          	lw	a4,4(a5)
600021dc:	fcc42783          	lw	a5,-52(s0)
600021e0:	40f707b3          	sub	a5,a4,a5
600021e4:	00800713          	li	a4,8
600021e8:	00171713          	slli	a4,a4,0x1
600021ec:	08f77663          	bgeu	a4,a5,60002278 <pvPortMalloc+0x198>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
600021f0:	fec42703          	lw	a4,-20(s0)
600021f4:	fcc42783          	lw	a5,-52(s0)
600021f8:	00f707b3          	add	a5,a4,a5
600021fc:	fcf42e23          	sw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
60002200:	fec42783          	lw	a5,-20(s0)
60002204:	0047a703          	lw	a4,4(a5)
60002208:	fcc42783          	lw	a5,-52(s0)
6000220c:	40f70733          	sub	a4,a4,a5
60002210:	fdc42783          	lw	a5,-36(s0)
60002214:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
60002218:	fec42783          	lw	a5,-20(s0)
6000221c:	fcc42703          	lw	a4,-52(s0)
60002220:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
60002224:	fdc42783          	lw	a5,-36(s0)
60002228:	0047a783          	lw	a5,4(a5)
6000222c:	fcf42c23          	sw	a5,-40(s0)
60002230:	89818793          	addi	a5,gp,-1896 # 80000098 <xStart>
60002234:	fef42023          	sw	a5,-32(s0)
60002238:	0100006f          	j	60002248 <pvPortMalloc+0x168>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
6000223c:	fe042783          	lw	a5,-32(s0)
60002240:	0007a783          	lw	a5,0(a5)
60002244:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
60002248:	fe042783          	lw	a5,-32(s0)
6000224c:	0007a783          	lw	a5,0(a5)
60002250:	0047a783          	lw	a5,4(a5)
60002254:	fd842703          	lw	a4,-40(s0)
60002258:	fee7e2e3          	bltu	a5,a4,6000223c <pvPortMalloc+0x15c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
6000225c:	fe042783          	lw	a5,-32(s0)
60002260:	0007a703          	lw	a4,0(a5)
60002264:	fdc42783          	lw	a5,-36(s0)
60002268:	00e7a023          	sw	a4,0(a5)
6000226c:	fe042783          	lw	a5,-32(s0)
60002270:	fdc42703          	lw	a4,-36(s0)
60002274:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
60002278:	800007b7          	lui	a5,0x80000
6000227c:	0007a703          	lw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60002280:	fec42783          	lw	a5,-20(s0)
60002284:	0047a783          	lw	a5,4(a5)
60002288:	40f70733          	sub	a4,a4,a5
6000228c:	800007b7          	lui	a5,0x80000
60002290:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
60002294:	40d000ef          	jal	ra,60002ea0 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
60002298:	fe442783          	lw	a5,-28(s0)
6000229c:	00079463          	bnez	a5,600022a4 <pvPortMalloc+0x1c4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
600022a0:	760010ef          	jal	ra,60003a00 <vApplicationMallocFailedHook>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
600022a4:	fe442783          	lw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
600022a8:	00078513          	mv	a0,a5
600022ac:	03c12083          	lw	ra,60(sp)
600022b0:	03812403          	lw	s0,56(sp)
600022b4:	04010113          	addi	sp,sp,64
600022b8:	00008067          	ret

600022bc <vPortFree>:
vPortFree():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
600022bc:	fd010113          	addi	sp,sp,-48
600022c0:	02112623          	sw	ra,44(sp)
600022c4:	02812423          	sw	s0,40(sp)
600022c8:	03010413          	addi	s0,sp,48
600022cc:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
600022d0:	fdc42783          	lw	a5,-36(s0)
600022d4:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
600022d8:	fdc42783          	lw	a5,-36(s0)
600022dc:	08078c63          	beqz	a5,60002374 <vPortFree+0xb8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
600022e0:	00800793          	li	a5,8
600022e4:	40f007b3          	neg	a5,a5
600022e8:	fe842703          	lw	a4,-24(s0)
600022ec:	00f707b3          	add	a5,a4,a5
600022f0:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
600022f4:	fe842783          	lw	a5,-24(s0)
600022f8:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
600022fc:	37d000ef          	jal	ra,60002e78 <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
60002300:	fe442783          	lw	a5,-28(s0)
60002304:	0047a783          	lw	a5,4(a5)
60002308:	fef42023          	sw	a5,-32(s0)
6000230c:	89818793          	addi	a5,gp,-1896 # 80000098 <xStart>
60002310:	fef42623          	sw	a5,-20(s0)
60002314:	0100006f          	j	60002324 <vPortFree+0x68>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
60002318:	fec42783          	lw	a5,-20(s0)
6000231c:	0007a783          	lw	a5,0(a5)
60002320:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
60002324:	fec42783          	lw	a5,-20(s0)
60002328:	0007a783          	lw	a5,0(a5)
6000232c:	0047a783          	lw	a5,4(a5)
60002330:	fe042703          	lw	a4,-32(s0)
60002334:	fee7e2e3          	bltu	a5,a4,60002318 <vPortFree+0x5c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
60002338:	fec42783          	lw	a5,-20(s0)
6000233c:	0007a703          	lw	a4,0(a5)
60002340:	fe442783          	lw	a5,-28(s0)
60002344:	00e7a023          	sw	a4,0(a5)
60002348:	fec42783          	lw	a5,-20(s0)
6000234c:	fe442703          	lw	a4,-28(s0)
60002350:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
60002354:	fe442783          	lw	a5,-28(s0)
60002358:	0047a703          	lw	a4,4(a5)
6000235c:	800007b7          	lui	a5,0x80000
60002360:	0007a783          	lw	a5,0(a5) # 80000000 <__stack_top+0xfffe4db0>
60002364:	00f70733          	add	a4,a4,a5
60002368:	800007b7          	lui	a5,0x80000
6000236c:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack_top+0xfffe4db0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
60002370:	331000ef          	jal	ra,60002ea0 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
60002374:	00000013          	nop
60002378:	02c12083          	lw	ra,44(sp)
6000237c:	02812403          	lw	s0,40(sp)
60002380:	03010113          	addi	sp,sp,48
60002384:	00008067          	ret

60002388 <prvHeapInit>:
prvHeapInit():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
60002388:	fe010113          	addi	sp,sp,-32
6000238c:	00812e23          	sw	s0,28(sp)
60002390:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
60002394:	800007b7          	lui	a5,0x80000
60002398:	11478793          	addi	a5,a5,276 # 80000114 <__stack_top+0xfffe4ec4>
6000239c:	ffc7f793          	andi	a5,a5,-4
600023a0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
600023a4:	fec42703          	lw	a4,-20(s0)
600023a8:	88e1ac23          	sw	a4,-1896(gp) # 80000098 <xStart>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
600023ac:	89818793          	addi	a5,gp,-1896 # 80000098 <xStart>
600023b0:	0007a223          	sw	zero,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
600023b4:	8a018793          	addi	a5,gp,-1888 # 800000a0 <xEnd>
600023b8:	00019737          	lui	a4,0x19
600023bc:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
600023c0:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
600023c4:	8a01a023          	sw	zero,-1888(gp) # 800000a0 <xEnd>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
600023c8:	fec42783          	lw	a5,-20(s0)
600023cc:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
600023d0:	fe842783          	lw	a5,-24(s0)
600023d4:	00019737          	lui	a4,0x19
600023d8:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x17ffc>
600023dc:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
600023e0:	fe842783          	lw	a5,-24(s0)
600023e4:	8a018713          	addi	a4,gp,-1888 # 800000a0 <xEnd>
600023e8:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
600023ec:	00000013          	nop
600023f0:	01c12403          	lw	s0,28(sp)
600023f4:	02010113          	addi	sp,sp,32
600023f8:	00008067          	ret

600023fc <raise_soft_interrupt>:
raise_soft_interrupt():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
600023fc:	fe010113          	addi	sp,sp,-32
60002400:	00812e23          	sw	s0,28(sp)
60002404:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
60002408:	f14027f3          	csrr	a5,mhartid
6000240c:	fef42623          	sw	a5,-20(s0)
60002410:	fec42783          	lw	a5,-20(s0)
60002414:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
60002418:	304467f3          	csrrsi	a5,mie,8
6000241c:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
60002420:	44000737          	lui	a4,0x44000
60002424:	fe842783          	lw	a5,-24(s0)
60002428:	00279793          	slli	a5,a5,0x2
6000242c:	00f707b3          	add	a5,a4,a5
60002430:	00100713          	li	a4,1
60002434:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:233
}
60002438:	00000013          	nop
6000243c:	01c12403          	lw	s0,28(sp)
60002440:	02010113          	addi	sp,sp,32
60002444:	00008067          	ret

60002448 <vPortEnterCritical>:
vPortEnterCritical():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
60002448:	ff010113          	addi	sp,sp,-16
6000244c:	00812623          	sw	s0,12(sp)
60002450:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
60002454:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
60002458:	800007b7          	lui	a5,0x80000
6000245c:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4db4>
60002460:	00178713          	addi	a4,a5,1
60002464:	800007b7          	lui	a5,0x80000
60002468:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
6000246c:	00000013          	nop
60002470:	00c12403          	lw	s0,12(sp)
60002474:	01010113          	addi	sp,sp,16
60002478:	00008067          	ret

6000247c <vPortExitCritical>:
vPortExitCritical():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
6000247c:	ff010113          	addi	sp,sp,-16
60002480:	00812623          	sw	s0,12(sp)
60002484:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
60002488:	800007b7          	lui	a5,0x80000
6000248c:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4db4>
60002490:	fff78713          	addi	a4,a5,-1
60002494:	800007b7          	lui	a5,0x80000
60002498:	00e7a223          	sw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
6000249c:	800007b7          	lui	a5,0x80000
600024a0:	0047a783          	lw	a5,4(a5) # 80000004 <__stack_top+0xfffe4db4>
600024a4:	00079463          	bnez	a5,600024ac <vPortExitCritical+0x30>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
600024a8:	30046073          	csrsi	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
600024ac:	00000013          	nop
600024b0:	00c12403          	lw	s0,12(sp)
600024b4:	01010113          	addi	sp,sp,16
600024b8:	00008067          	ret

600024bc <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
600024bc:	fe010113          	addi	sp,sp,-32
600024c0:	00812e23          	sw	s0,28(sp)
600024c4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
600024c8:	80000637          	lui	a2,0x80000
600024cc:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4db8>
600024d0:	00062603          	lw	a2,0(a2)
600024d4:	fec42423          	sw	a2,-24(s0)
600024d8:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
600024dc:	80000637          	lui	a2,0x80000
600024e0:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4db8>
600024e4:	00462603          	lw	a2,4(a2)
600024e8:	00060693          	mv	a3,a2
600024ec:	00000713          	li	a4,0
600024f0:	00069813          	slli	a6,a3,0x0
600024f4:	00000793          	li	a5,0
600024f8:	fe842703          	lw	a4,-24(s0)
600024fc:	00f76733          	or	a4,a4,a5
60002500:	fee42423          	sw	a4,-24(s0)
60002504:	fec42703          	lw	a4,-20(s0)
60002508:	010767b3          	or	a5,a4,a6
6000250c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
60002510:	fe842683          	lw	a3,-24(s0)
60002514:	fec42703          	lw	a4,-20(s0)
60002518:	0000c5b7          	lui	a1,0xc
6000251c:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
60002520:	00000613          	li	a2,0
60002524:	00b687b3          	add	a5,a3,a1
60002528:	00078513          	mv	a0,a5
6000252c:	00d53533          	sltu	a0,a0,a3
60002530:	00c70833          	add	a6,a4,a2
60002534:	01050733          	add	a4,a0,a6
60002538:	00070813          	mv	a6,a4
6000253c:	fef42423          	sw	a5,-24(s0)
60002540:	ff042623          	sw	a6,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
60002544:	800007b7          	lui	a5,0x80000
60002548:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4dbc>
6000254c:	fe842703          	lw	a4,-24(s0)
60002550:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
60002554:	fec42783          	lw	a5,-20(s0)
60002558:	0007d313          	srli	t1,a5,0x0
6000255c:	00000393          	li	t2,0
60002560:	800007b7          	lui	a5,0x80000
60002564:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4dbc>
60002568:	00030713          	mv	a4,t1
6000256c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
60002570:	08000793          	li	a5,128
60002574:	3047a073          	csrs	mie,a5
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
60002578:	00000013          	nop
6000257c:	01c12403          	lw	s0,28(sp)
60002580:	02010113          	addi	sp,sp,32
60002584:	00008067          	ret

60002588 <vPortSetupTimer>:
vPortSetupTimer():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
60002588:	fe010113          	addi	sp,sp,-32
6000258c:	00812e23          	sw	s0,28(sp)
60002590:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
60002594:	80000637          	lui	a2,0x80000
60002598:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4db8>
6000259c:	00062603          	lw	a2,0(a2)
600025a0:	fec42423          	sw	a2,-24(s0)
600025a4:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
600025a8:	80000637          	lui	a2,0x80000
600025ac:	00862603          	lw	a2,8(a2) # 80000008 <__stack_top+0xfffe4db8>
600025b0:	00462603          	lw	a2,4(a2)
600025b4:	00060693          	mv	a3,a2
600025b8:	00000713          	li	a4,0
600025bc:	00069813          	slli	a6,a3,0x0
600025c0:	00000793          	li	a5,0
600025c4:	fe842703          	lw	a4,-24(s0)
600025c8:	00f76733          	or	a4,a4,a5
600025cc:	fee42423          	sw	a4,-24(s0)
600025d0:	fec42703          	lw	a4,-20(s0)
600025d4:	010767b3          	or	a5,a4,a6
600025d8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
600025dc:	fe842683          	lw	a3,-24(s0)
600025e0:	fec42703          	lw	a4,-20(s0)
600025e4:	0000c5b7          	lui	a1,0xc
600025e8:	35058593          	addi	a1,a1,848 # c350 <HEAP_SIZE+0xb350>
600025ec:	00000613          	li	a2,0
600025f0:	00b687b3          	add	a5,a3,a1
600025f4:	00078513          	mv	a0,a5
600025f8:	00d53533          	sltu	a0,a0,a3
600025fc:	00c70833          	add	a6,a4,a2
60002600:	01050733          	add	a4,a0,a6
60002604:	00070813          	mv	a6,a4
60002608:	fef42423          	sw	a5,-24(s0)
6000260c:	ff042623          	sw	a6,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
60002610:	800007b7          	lui	a5,0x80000
60002614:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4dbc>
60002618:	fe842703          	lw	a4,-24(s0)
6000261c:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
60002620:	fec42783          	lw	a5,-20(s0)
60002624:	0007d313          	srli	t1,a5,0x0
60002628:	00000393          	li	t2,0
6000262c:	800007b7          	lui	a5,0x80000
60002630:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffe4dbc>
60002634:	00030713          	mv	a4,t1
60002638:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
6000263c:	08000793          	li	a5,128
60002640:	3047a073          	csrs	mie,a5
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
60002644:	00000013          	nop
60002648:	01c12403          	lw	s0,28(sp)
6000264c:	02010113          	addi	sp,sp,32
60002650:	00008067          	ret

60002654 <prvTaskExitError>:
prvTaskExitError():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
60002654:	ff010113          	addi	sp,sp,-16
60002658:	00812623          	sw	s0,12(sp)
6000265c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
60002660:	800007b7          	lui	a5,0x80000
60002664:	0047a703          	lw	a4,4(a5) # 80000004 <__stack_top+0xfffe4db4>
60002668:	fff00793          	li	a5,-1
6000266c:	00f70663          	beq	a4,a5,60002678 <prvTaskExitError+0x24>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
60002670:	30047073          	csrci	mstatus,8
60002674:	0000006f          	j	60002674 <prvTaskExitError+0x20>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
60002678:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
6000267c:	0000006f          	j	6000267c <prvTaskExitError+0x28>

60002680 <pxPortInitialiseStack>:
pxPortInitialiseStack():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
60002680:	fe010113          	addi	sp,sp,-32
60002684:	00812e23          	sw	s0,28(sp)
60002688:	02010413          	addi	s0,sp,32
6000268c:	fea42623          	sw	a0,-20(s0)
60002690:	feb42423          	sw	a1,-24(s0)
60002694:	fec42223          	sw	a2,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
60002698:	fec42783          	lw	a5,-20(s0)
6000269c:	ffc78793          	addi	a5,a5,-4
600026a0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
600026a4:	fe842703          	lw	a4,-24(s0)
600026a8:	fec42783          	lw	a5,-20(s0)
600026ac:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
600026b0:	fec42783          	lw	a5,-20(s0)
600026b4:	fa878793          	addi	a5,a5,-88
600026b8:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
600026bc:	fe442703          	lw	a4,-28(s0)
600026c0:	fec42783          	lw	a5,-20(s0)
600026c4:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
600026c8:	fec42783          	lw	a5,-20(s0)
600026cc:	fe878793          	addi	a5,a5,-24
600026d0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
600026d4:	00018793          	mv	a5,gp
600026d8:	00078713          	mv	a4,a5
600026dc:	fec42783          	lw	a5,-20(s0)
600026e0:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
600026e4:	fec42783          	lw	a5,-20(s0)
600026e8:	ff478793          	addi	a5,a5,-12
600026ec:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
600026f0:	600027b7          	lui	a5,0x60002
600026f4:	65478713          	addi	a4,a5,1620 # 60002654 <prvTaskExitError>
600026f8:	fec42783          	lw	a5,-20(s0)
600026fc:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233
	
	return pxTopOfStack;
60002700:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
60002704:	00078513          	mv	a0,a5
60002708:	01c12403          	lw	s0,28(sp)
6000270c:	02010113          	addi	sp,sp,32
60002710:	00008067          	ret

60002714 <SysTick_Handler>:
SysTick_Handler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
60002714:	ff010113          	addi	sp,sp,-16
60002718:	00112623          	sw	ra,12(sp)
6000271c:	00812423          	sw	s0,8(sp)
60002720:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
60002724:	8b01a283          	lw	t0,-1872(gp) # 800000b0 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
60002728:	00c2a023          	sw	a2,0(t0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
6000272c:	d91ff0ef          	jal	ra,600024bc <prvSetNextTimerInterrupt>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
60002730:	0d1000ef          	jal	ra,60003000 <xTaskIncrementTick>
60002734:	00050793          	mv	a5,a0
60002738:	00078463          	beqz	a5,60002740 <SysTick_Handler+0x2c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
6000273c:	2b1000ef          	jal	ra,600031ec <vTaskSwitchContext>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
60002740:	8b01a103          	lw	sp,-1872(gp) # 800000b0 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
60002744:	00012103          	lw	sp,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
60002748:	07c12283          	lw	t0,124(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
6000274c:	34129073          	csrw	mepc,t0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
60002750:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
60002754:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
60002758:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
6000275c:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
60002760:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
60002764:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
60002768:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
6000276c:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
60002770:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
60002774:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
60002778:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
6000277c:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
60002780:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
60002784:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
60002788:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
6000278c:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
60002790:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
60002794:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
60002798:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
6000279c:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
600027a0:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
600027a4:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
600027a8:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
600027ac:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
600027b0:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
600027b4:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
600027b8:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
600027bc:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
600027c0:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
600027c4:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
600027c8:	30200073          	mret
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
600027cc:	00000013          	nop
600027d0:	00c12083          	lw	ra,12(sp)
600027d4:	00812403          	lw	s0,8(sp)
600027d8:	01010113          	addi	sp,sp,16
600027dc:	00008067          	ret

600027e0 <xPortStartScheduler>:
xPortStartScheduler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
600027e0:	ff010113          	addi	sp,sp,-16
600027e4:	00112623          	sw	ra,12(sp)
600027e8:	00812423          	sw	s0,8(sp)
600027ec:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
600027f0:	d99ff0ef          	jal	ra,60002588 <vPortSetupTimer>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
600027f4:	800007b7          	lui	a5,0x80000
600027f8:	0007a223          	sw	zero,4(a5) # 80000004 <__stack_top+0xfffe4db4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
600027fc:	00100713          	li	a4,1
60002800:	8ae1a623          	sw	a4,-1876(gp) # 800000ac <g_startscheduler>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
60002804:	c39fd0ef          	jal	ra,6000043c <__enable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
60002808:	bf5ff0ef          	jal	ra,600023fc <raise_soft_interrupt>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
6000280c:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
60002810:	00078513          	mv	a0,a5
60002814:	00c12083          	lw	ra,12(sp)
60002818:	00812403          	lw	s0,8(sp)
6000281c:	01010113          	addi	sp,sp,16
60002820:	00008067          	ret

60002824 <Software_IRQHandler>:
Software_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
60002824:	ff010113          	addi	sp,sp,-16
60002828:	00112623          	sw	ra,12(sp)
6000282c:	00812423          	sw	s0,8(sp)
60002830:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
60002834:	8ac1a703          	lw	a4,-1876(gp) # 800000ac <g_startscheduler>
60002838:	00100793          	li	a5,1
6000283c:	00f71863          	bne	a4,a5,6000284c <Software_IRQHandler+0x28>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
60002840:	00200713          	li	a4,2
60002844:	8ae1a623          	sw	a4,-1876(gp) # 800000ac <g_startscheduler>
60002848:	0100006f          	j	60002858 <Software_IRQHandler+0x34>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
6000284c:	8b01a283          	lw	t0,-1872(gp) # 800000b0 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
60002850:	00c2a023          	sw	a2,0(t0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
60002854:	199000ef          	jal	ra,600031ec <vTaskSwitchContext>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
60002858:	8b01a103          	lw	sp,-1872(gp) # 800000b0 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
		__asm volatile("lw	sp, 0x0(sp)");
6000285c:	00012103          	lw	sp,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

		__asm volatile("lw	t0, 31 * 4(sp)");
60002860:	07c12283          	lw	t0,124(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("csrw	mepc, t0");
60002864:	34129073          	csrw	mepc,t0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	x1, 0x0(sp)");
60002868:	00012083          	lw	ra,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("lw   x4, 3 * 4(sp)");
6000286c:	00c12203          	lw	tp,12(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
		__asm volatile("lw   x5, 4 * 4(sp)");
60002870:	01012283          	lw	t0,16(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339
		__asm volatile("lw   x6, 5 * 4(sp)");
60002874:	01412303          	lw	t1,20(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x7, 6 * 4(sp)");
60002878:	01812383          	lw	t2,24(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x8, 7 * 4(sp)");
6000287c:	01c12403          	lw	s0,28(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x9, 8 * 4(sp)");
60002880:	02012483          	lw	s1,32(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x10, 9 * 4(sp)");
60002884:	02412503          	lw	a0,36(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x11, 10 * 4(sp)");
60002888:	02812583          	lw	a1,40(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x12, 11 * 4(sp)");
6000288c:	02c12603          	lw	a2,44(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x13, 12 * 4(sp)");
60002890:	03012683          	lw	a3,48(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x14, 13 * 4(sp)");
60002894:	03412703          	lw	a4,52(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x15, 14 * 4(sp)");
60002898:	03812783          	lw	a5,56(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x16, 15 * 4(sp)");
6000289c:	03c12803          	lw	a6,60(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x17, 16 * 4(sp)");
600028a0:	04012883          	lw	a7,64(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x18, 17 * 4(sp)");
600028a4:	04412903          	lw	s2,68(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x19, 18 * 4(sp)");
600028a8:	04812983          	lw	s3,72(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x20, 19 * 4(sp)");
600028ac:	04c12a03          	lw	s4,76(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x21, 20 * 4(sp)");
600028b0:	05012a83          	lw	s5,80(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x22, 21 * 4(sp)");
600028b4:	05412b03          	lw	s6,84(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x23, 22 * 4(sp)");
600028b8:	05812b83          	lw	s7,88(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x24, 23 * 4(sp)");
600028bc:	05c12c03          	lw	s8,92(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x25, 24 * 4(sp)");
600028c0:	06012c83          	lw	s9,96(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x26, 25 * 4(sp)");
600028c4:	06412d03          	lw	s10,100(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x27, 26 * 4(sp)");
600028c8:	06812d83          	lw	s11,104(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x28, 27 * 4(sp)");
600028cc:	06c12e03          	lw	t3,108(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x29, 28 * 4(sp)");
600028d0:	07012e83          	lw	t4,112(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x30, 29 * 4(sp)");
600028d4:	07412f03          	lw	t5,116(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x31, 30 * 4(sp)");
600028d8:	07812f83          	lw	t6,120(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366

		__asm volatile("addi	sp, sp, 4 * 32");
600028dc:	08010113          	addi	sp,sp,128
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370

		//PRCI->MSIP[0] = 0x00;

		__asm volatile("addi sp, sp, -1*4");
600028e0:	ffc10113          	addi	sp,sp,-4
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("sw t0, 0(sp)");
600028e4:	00512023          	sw	t0,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("li t0, 0x44000000");	// address of PRCI->MSIP[0]
600028e8:	440002b7          	lui	t0,0x44000
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("sw zero,0(t0)");
600028ec:	0002a023          	sw	zero,0(t0) # 44000000 <RAM_SIZE+0x43f00000>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw t0, 0(sp)");
600028f0:	00012283          	lw	t0,0(sp)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("addi sp, sp, 1*4");
600028f4:	00410113          	addi	sp,sp,4
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377

		__asm volatile("mret");
600028f8:	30200073          	mret
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
	}
}
600028fc:	00000013          	nop
60002900:	00c12083          	lw	ra,12(sp)
60002904:	00812403          	lw	s0,8(sp)
60002908:	01010113          	addi	sp,sp,16
6000290c:	00008067          	ret

60002910 <vPortYield>:
vPortYield():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382

void vPortYield( void )
{
60002910:	ff010113          	addi	sp,sp,-16
60002914:	00112623          	sw	ra,12(sp)
60002918:	00812423          	sw	s0,8(sp)
6000291c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
	raise_soft_interrupt();
60002920:	addff0ef          	jal	ra,600023fc <raise_soft_interrupt>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
}
60002924:	00000013          	nop
60002928:	00c12083          	lw	ra,12(sp)
6000292c:	00812403          	lw	s0,8(sp)
60002930:	01010113          	addi	sp,sp,16
60002934:	00008067          	ret

60002938 <vListInitialise>:
vListInitialise():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
60002938:	fe010113          	addi	sp,sp,-32
6000293c:	00812e23          	sw	s0,28(sp)
60002940:	02010413          	addi	s0,sp,32
60002944:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60002948:	fec42783          	lw	a5,-20(s0)
6000294c:	00878713          	addi	a4,a5,8
60002950:	fec42783          	lw	a5,-20(s0)
60002954:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
60002958:	fec42783          	lw	a5,-20(s0)
6000295c:	fff00713          	li	a4,-1
60002960:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60002964:	fec42783          	lw	a5,-20(s0)
60002968:	00878713          	addi	a4,a5,8
6000296c:	fec42783          	lw	a5,-20(s0)
60002970:	00e7a623          	sw	a4,12(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
60002974:	fec42783          	lw	a5,-20(s0)
60002978:	00878713          	addi	a4,a5,8
6000297c:	fec42783          	lw	a5,-20(s0)
60002980:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
60002984:	fec42783          	lw	a5,-20(s0)
60002988:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
6000298c:	00000013          	nop
60002990:	01c12403          	lw	s0,28(sp)
60002994:	02010113          	addi	sp,sp,32
60002998:	00008067          	ret

6000299c <vListInitialiseItem>:
vListInitialiseItem():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
6000299c:	fe010113          	addi	sp,sp,-32
600029a0:	00812e23          	sw	s0,28(sp)
600029a4:	02010413          	addi	s0,sp,32
600029a8:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
600029ac:	fec42783          	lw	a5,-20(s0)
600029b0:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
600029b4:	00000013          	nop
600029b8:	01c12403          	lw	s0,28(sp)
600029bc:	02010113          	addi	sp,sp,32
600029c0:	00008067          	ret

600029c4 <vListInsertEnd>:
vListInsertEnd():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
600029c4:	fd010113          	addi	sp,sp,-48
600029c8:	02812623          	sw	s0,44(sp)
600029cc:	03010413          	addi	s0,sp,48
600029d0:	fca42e23          	sw	a0,-36(s0)
600029d4:	fcb42c23          	sw	a1,-40(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
600029d8:	fdc42783          	lw	a5,-36(s0)
600029dc:	0047a783          	lw	a5,4(a5)
600029e0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
600029e4:	fd842783          	lw	a5,-40(s0)
600029e8:	fec42703          	lw	a4,-20(s0)
600029ec:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
600029f0:	fec42783          	lw	a5,-20(s0)
600029f4:	0087a703          	lw	a4,8(a5)
600029f8:	fd842783          	lw	a5,-40(s0)
600029fc:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
60002a00:	fec42783          	lw	a5,-20(s0)
60002a04:	0087a783          	lw	a5,8(a5)
60002a08:	fd842703          	lw	a4,-40(s0)
60002a0c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
60002a10:	fec42783          	lw	a5,-20(s0)
60002a14:	fd842703          	lw	a4,-40(s0)
60002a18:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
60002a1c:	fd842783          	lw	a5,-40(s0)
60002a20:	fdc42703          	lw	a4,-36(s0)
60002a24:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
60002a28:	fdc42783          	lw	a5,-36(s0)
60002a2c:	0007a783          	lw	a5,0(a5)
60002a30:	00178713          	addi	a4,a5,1
60002a34:	fdc42783          	lw	a5,-36(s0)
60002a38:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:142
}
60002a3c:	00000013          	nop
60002a40:	02c12403          	lw	s0,44(sp)
60002a44:	03010113          	addi	sp,sp,48
60002a48:	00008067          	ret

60002a4c <uxListRemove>:
uxListRemove():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:213
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
60002a4c:	fd010113          	addi	sp,sp,-48
60002a50:	02812623          	sw	s0,44(sp)
60002a54:	03010413          	addi	s0,sp,48
60002a58:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
60002a5c:	fdc42783          	lw	a5,-36(s0)
60002a60:	0107a783          	lw	a5,16(a5)
60002a64:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
60002a68:	fdc42783          	lw	a5,-36(s0)
60002a6c:	0047a783          	lw	a5,4(a5)
60002a70:	fdc42703          	lw	a4,-36(s0)
60002a74:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f00008>
60002a78:	00e7a423          	sw	a4,8(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
60002a7c:	fdc42783          	lw	a5,-36(s0)
60002a80:	0087a783          	lw	a5,8(a5)
60002a84:	fdc42703          	lw	a4,-36(s0)
60002a88:	00472703          	lw	a4,4(a4)
60002a8c:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
60002a90:	fec42783          	lw	a5,-20(s0)
60002a94:	0047a783          	lw	a5,4(a5)
60002a98:	fdc42703          	lw	a4,-36(s0)
60002a9c:	00f71a63          	bne	a4,a5,60002ab0 <uxListRemove+0x64>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
60002aa0:	fdc42783          	lw	a5,-36(s0)
60002aa4:	0087a703          	lw	a4,8(a5)
60002aa8:	fec42783          	lw	a5,-20(s0)
60002aac:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
60002ab0:	fdc42783          	lw	a5,-36(s0)
60002ab4:	0007a823          	sw	zero,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
60002ab8:	fec42783          	lw	a5,-20(s0)
60002abc:	0007a783          	lw	a5,0(a5)
60002ac0:	fff78713          	addi	a4,a5,-1
60002ac4:	fec42783          	lw	a5,-20(s0)
60002ac8:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
60002acc:	fec42783          	lw	a5,-20(s0)
60002ad0:	0007a783          	lw	a5,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/list.c:238
}
60002ad4:	00078513          	mv	a0,a5
60002ad8:	02c12403          	lw	s0,44(sp)
60002adc:	03010113          	addi	sp,sp,48
60002ae0:	00008067          	ret

60002ae4 <memset>:
memset():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
60002ae4:	fd010113          	addi	sp,sp,-48
60002ae8:	02812623          	sw	s0,44(sp)
60002aec:	03010413          	addi	s0,sp,48
60002af0:	fca42e23          	sw	a0,-36(s0)
60002af4:	fcb42c23          	sw	a1,-40(s0)
60002af8:	fcc42a23          	sw	a2,-44(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
60002afc:	fdc42703          	lw	a4,-36(s0)
60002b00:	fd442783          	lw	a5,-44(s0)
60002b04:	00f767b3          	or	a5,a4,a5
60002b08:	0037f793          	andi	a5,a5,3
60002b0c:	06079863          	bnez	a5,60002b7c <memset+0x98>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
60002b10:	fd842783          	lw	a5,-40(s0)
60002b14:	0ff7f793          	andi	a5,a5,255
60002b18:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:28
    word |= word << 8;
60002b1c:	fe442783          	lw	a5,-28(s0)
60002b20:	00879793          	slli	a5,a5,0x8
60002b24:	fe442703          	lw	a4,-28(s0)
60002b28:	00f767b3          	or	a5,a4,a5
60002b2c:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:29
    word |= word << 16;
60002b30:	fe442783          	lw	a5,-28(s0)
60002b34:	01079793          	slli	a5,a5,0x10
60002b38:	fe442703          	lw	a4,-28(s0)
60002b3c:	00f767b3          	or	a5,a4,a5
60002b40:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
60002b44:	fdc42783          	lw	a5,-36(s0)
60002b48:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60002b4c:	0180006f          	j	60002b64 <memset+0x80>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:34
      *d++ = word;
60002b50:	fec42783          	lw	a5,-20(s0)
60002b54:	00478713          	addi	a4,a5,4
60002b58:	fee42623          	sw	a4,-20(s0)
60002b5c:	fe442703          	lw	a4,-28(s0)
60002b60:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
60002b64:	fdc42703          	lw	a4,-36(s0)
60002b68:	fd442783          	lw	a5,-44(s0)
60002b6c:	00f707b3          	add	a5,a4,a5
60002b70:	fec42703          	lw	a4,-20(s0)
60002b74:	fcf76ee3          	bltu	a4,a5,60002b50 <memset+0x6c>
60002b78:	0400006f          	j	60002bb8 <memset+0xd4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
60002b7c:	fdc42783          	lw	a5,-36(s0)
60002b80:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60002b84:	0200006f          	j	60002ba4 <memset+0xc0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:38
      *d++ = byte;
60002b88:	fe842783          	lw	a5,-24(s0)
60002b8c:	00178713          	addi	a4,a5,1
60002b90:	fee42423          	sw	a4,-24(s0)
60002b94:	fd842703          	lw	a4,-40(s0)
60002b98:	01871713          	slli	a4,a4,0x18
60002b9c:	41875713          	srai	a4,a4,0x18
60002ba0:	00e78023          	sb	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
60002ba4:	fdc42703          	lw	a4,-36(s0)
60002ba8:	fd442783          	lw	a5,-44(s0)
60002bac:	00f707b3          	add	a5,a4,a5
60002bb0:	fe842703          	lw	a4,-24(s0)
60002bb4:	fcf76ae3          	bltu	a4,a5,60002b88 <memset+0xa4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:40
  }
  return dest;
60002bb8:	fdc42783          	lw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/string.c:41
}
60002bbc:	00078513          	mv	a0,a5
60002bc0:	02c12403          	lw	s0,44(sp)
60002bc4:	03010113          	addi	sp,sp,48
60002bc8:	00008067          	ret

60002bcc <xTaskGenericCreate>:
xTaskGenericCreate():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
60002bcc:	fc010113          	addi	sp,sp,-64
60002bd0:	02112e23          	sw	ra,60(sp)
60002bd4:	02812c23          	sw	s0,56(sp)
60002bd8:	04010413          	addi	s0,sp,64
60002bdc:	fca42e23          	sw	a0,-36(s0)
60002be0:	fcb42c23          	sw	a1,-40(s0)
60002be4:	fcd42823          	sw	a3,-48(s0)
60002be8:	fce42623          	sw	a4,-52(s0)
60002bec:	fcf42423          	sw	a5,-56(s0)
60002bf0:	fd042223          	sw	a6,-60(s0)
60002bf4:	fd142023          	sw	a7,-64(s0)
60002bf8:	00060793          	mv	a5,a2
60002bfc:	fcf41b23          	sh	a5,-42(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
60002c00:	fdc42783          	lw	a5,-36(s0)
60002c04:	00079663          	bnez	a5,60002c10 <xTaskGenericCreate+0x44>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
60002c08:	30047073          	csrci	mstatus,8
60002c0c:	0000006f          	j	60002c0c <xTaskGenericCreate+0x40>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
60002c10:	fcc42703          	lw	a4,-52(s0)
60002c14:	00400793          	li	a5,4
60002c18:	00e7f663          	bgeu	a5,a4,60002c24 <xTaskGenericCreate+0x58>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
60002c1c:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
60002c20:	0000006f          	j	60002c20 <xTaskGenericCreate+0x54>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
60002c24:	fd645783          	lhu	a5,-42(s0)
60002c28:	fc442583          	lw	a1,-60(s0)
60002c2c:	00078513          	mv	a0,a5
60002c30:	175000ef          	jal	ra,600035a4 <prvAllocateTCBAndStack>
60002c34:	fea42423          	sw	a0,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
60002c38:	fe842783          	lw	a5,-24(s0)
60002c3c:	16078263          	beqz	a5,60002da0 <xTaskGenericCreate+0x1d4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
60002c40:	fe842783          	lw	a5,-24(s0)
60002c44:	0307a703          	lw	a4,48(a5)
60002c48:	fd645683          	lhu	a3,-42(s0)
60002c4c:	400007b7          	lui	a5,0x40000
60002c50:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3fefffff>
60002c54:	00f687b3          	add	a5,a3,a5
60002c58:	00279793          	slli	a5,a5,0x2
60002c5c:	00f707b3          	add	a5,a4,a5
60002c60:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
60002c64:	fe442783          	lw	a5,-28(s0)
60002c68:	ffc7f793          	andi	a5,a5,-4
60002c6c:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
60002c70:	fe442783          	lw	a5,-28(s0)
60002c74:	0037f793          	andi	a5,a5,3
60002c78:	00078663          	beqz	a5,60002c84 <xTaskGenericCreate+0xb8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
60002c7c:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
60002c80:	0000006f          	j	60002c80 <xTaskGenericCreate+0xb4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
60002c84:	fd645783          	lhu	a5,-42(s0)
60002c88:	00078713          	mv	a4,a5
60002c8c:	fc042683          	lw	a3,-64(s0)
60002c90:	fcc42603          	lw	a2,-52(s0)
60002c94:	fd842583          	lw	a1,-40(s0)
60002c98:	fe842503          	lw	a0,-24(s0)
60002c9c:	670000ef          	jal	ra,6000330c <prvInitialiseTCBVariables>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
60002ca0:	fd042603          	lw	a2,-48(s0)
60002ca4:	fdc42583          	lw	a1,-36(s0)
60002ca8:	fe442503          	lw	a0,-28(s0)
60002cac:	9d5ff0ef          	jal	ra,60002680 <pxPortInitialiseStack>
60002cb0:	00050713          	mv	a4,a0
60002cb4:	fe842783          	lw	a5,-24(s0)
60002cb8:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
60002cbc:	fc842783          	lw	a5,-56(s0)
60002cc0:	00078863          	beqz	a5,60002cd0 <xTaskGenericCreate+0x104>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
60002cc4:	fc842783          	lw	a5,-56(s0)
60002cc8:	fe842703          	lw	a4,-24(s0)
60002ccc:	00e7a023          	sw	a4,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
60002cd0:	f78ff0ef          	jal	ra,60002448 <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
60002cd4:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <uxCurrentNumberOfTasks>
60002cd8:	00178713          	addi	a4,a5,1
60002cdc:	8ce1a023          	sw	a4,-1856(gp) # 800000c0 <uxCurrentNumberOfTasks>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
60002ce0:	8b01a783          	lw	a5,-1872(gp) # 800000b0 <pxCurrentTCB>
60002ce4:	02079063          	bnez	a5,60002d04 <xTaskGenericCreate+0x138>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
60002ce8:	fe842703          	lw	a4,-24(s0)
60002cec:	8ae1a823          	sw	a4,-1872(gp) # 800000b0 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
60002cf0:	8c01a703          	lw	a4,-1856(gp) # 800000c0 <uxCurrentNumberOfTasks>
60002cf4:	00100793          	li	a5,1
60002cf8:	02f71663          	bne	a4,a5,60002d24 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
60002cfc:	748000ef          	jal	ra,60003444 <prvInitialiseTaskLists>
60002d00:	0240006f          	j	60002d24 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
60002d04:	8cc1a783          	lw	a5,-1844(gp) # 800000cc <xSchedulerRunning>
60002d08:	00079e63          	bnez	a5,60002d24 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
60002d0c:	8b01a783          	lw	a5,-1872(gp) # 800000b0 <pxCurrentTCB>
60002d10:	02c7a783          	lw	a5,44(a5)
60002d14:	fcc42703          	lw	a4,-52(s0)
60002d18:	00f76663          	bltu	a4,a5,60002d24 <xTaskGenericCreate+0x158>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
60002d1c:	fe842703          	lw	a4,-24(s0)
60002d20:	8ae1a823          	sw	a4,-1872(gp) # 800000b0 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
60002d24:	8dc1a783          	lw	a5,-1828(gp) # 800000dc <uxTaskNumber>
60002d28:	00178713          	addi	a4,a5,1
60002d2c:	8ce1ae23          	sw	a4,-1828(gp) # 800000dc <uxTaskNumber>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
60002d30:	8dc1a703          	lw	a4,-1828(gp) # 800000dc <uxTaskNumber>
60002d34:	fe842783          	lw	a5,-24(s0)
60002d38:	04e7a423          	sw	a4,72(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
60002d3c:	fe842783          	lw	a5,-24(s0)
60002d40:	02c7a703          	lw	a4,44(a5)
60002d44:	8c81a783          	lw	a5,-1848(gp) # 800000c8 <uxTopReadyPriority>
60002d48:	00e7f863          	bgeu	a5,a4,60002d58 <xTaskGenericCreate+0x18c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
60002d4c:	fe842783          	lw	a5,-24(s0)
60002d50:	02c7a703          	lw	a4,44(a5)
60002d54:	8ce1a423          	sw	a4,-1848(gp) # 800000c8 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
60002d58:	fe842783          	lw	a5,-24(s0)
60002d5c:	02c7a703          	lw	a4,44(a5)
60002d60:	00070793          	mv	a5,a4
60002d64:	00279793          	slli	a5,a5,0x2
60002d68:	00e787b3          	add	a5,a5,a4
60002d6c:	00279793          	slli	a5,a5,0x2
60002d70:	80019737          	lui	a4,0x80019
60002d74:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdec0>
60002d78:	00e78733          	add	a4,a5,a4
60002d7c:	fe842783          	lw	a5,-24(s0)
60002d80:	00478793          	addi	a5,a5,4
60002d84:	00078593          	mv	a1,a5
60002d88:	00070513          	mv	a0,a4
60002d8c:	c39ff0ef          	jal	ra,600029c4 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
60002d90:	00100793          	li	a5,1
60002d94:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
60002d98:	ee4ff0ef          	jal	ra,6000247c <vPortExitCritical>
60002d9c:	00c0006f          	j	60002da8 <xTaskGenericCreate+0x1dc>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
60002da0:	fff00793          	li	a5,-1
60002da4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
60002da8:	fec42703          	lw	a4,-20(s0)
60002dac:	00100793          	li	a5,1
60002db0:	02f71063          	bne	a4,a5,60002dd0 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
60002db4:	8cc1a783          	lw	a5,-1844(gp) # 800000cc <xSchedulerRunning>
60002db8:	00078c63          	beqz	a5,60002dd0 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
60002dbc:	8b01a783          	lw	a5,-1872(gp) # 800000b0 <pxCurrentTCB>
60002dc0:	02c7a783          	lw	a5,44(a5)
60002dc4:	fcc42703          	lw	a4,-52(s0)
60002dc8:	00e7f463          	bgeu	a5,a4,60002dd0 <xTaskGenericCreate+0x204>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
60002dcc:	b45ff0ef          	jal	ra,60002910 <vPortYield>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
60002dd0:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:737
}
60002dd4:	00078513          	mv	a0,a5
60002dd8:	03c12083          	lw	ra,60(sp)
60002ddc:	03812403          	lw	s0,56(sp)
60002de0:	04010113          	addi	sp,sp,64
60002de4:	00008067          	ret

60002de8 <vTaskStartScheduler>:
vTaskStartScheduler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
60002de8:	fe010113          	addi	sp,sp,-32
60002dec:	00112e23          	sw	ra,28(sp)
60002df0:	00812c23          	sw	s0,24(sp)
60002df4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
60002df8:	00000893          	li	a7,0
60002dfc:	00000813          	li	a6,0
60002e00:	00000793          	li	a5,0
60002e04:	00000713          	li	a4,0
60002e08:	00000693          	li	a3,0
60002e0c:	40000613          	li	a2,1024
60002e10:	600045b7          	lui	a1,0x60004
60002e14:	dec58593          	addi	a1,a1,-532 # 60003dec <vI2COV2640Camera+0x3bc>
60002e18:	60003537          	lui	a0,0x60003
60002e1c:	2d850513          	addi	a0,a0,728 # 600032d8 <prvIdleTask>
60002e20:	dadff0ef          	jal	ra,60002bcc <xTaskGenericCreate>
60002e24:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
60002e28:	fec42703          	lw	a4,-20(s0)
60002e2c:	00100793          	li	a5,1
60002e30:	02f71263          	bne	a4,a5,60002e54 <vTaskStartScheduler+0x6c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
60002e34:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
60002e38:	fff00713          	li	a4,-1
60002e3c:	8ee1a023          	sw	a4,-1824(gp) # 800000e0 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
60002e40:	00100713          	li	a4,1
60002e44:	8ce1a623          	sw	a4,-1844(gp) # 800000cc <xSchedulerRunning>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
60002e48:	8c01a223          	sw	zero,-1852(gp) # 800000c4 <xTickCount>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
60002e4c:	995ff0ef          	jal	ra,600027e0 <xPortStartScheduler>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
60002e50:	0140006f          	j	60002e64 <vTaskStartScheduler+0x7c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
60002e54:	fec42783          	lw	a5,-20(s0)
60002e58:	00079663          	bnez	a5,60002e64 <vTaskStartScheduler+0x7c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
60002e5c:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
60002e60:	0000006f          	j	60002e60 <vTaskStartScheduler+0x78>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1617
}
60002e64:	00000013          	nop
60002e68:	01c12083          	lw	ra,28(sp)
60002e6c:	01812403          	lw	s0,24(sp)
60002e70:	02010113          	addi	sp,sp,32
60002e74:	00008067          	ret

60002e78 <vTaskSuspendAll>:
vTaskSuspendAll():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
60002e78:	ff010113          	addi	sp,sp,-16
60002e7c:	00812623          	sw	s0,12(sp)
60002e80:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
60002e84:	8e41a783          	lw	a5,-1820(gp) # 800000e4 <uxSchedulerSuspended>
60002e88:	00178713          	addi	a4,a5,1
60002e8c:	8ee1a223          	sw	a4,-1820(gp) # 800000e4 <uxSchedulerSuspended>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1638
}
60002e90:	00000013          	nop
60002e94:	00c12403          	lw	s0,12(sp)
60002e98:	01010113          	addi	sp,sp,16
60002e9c:	00008067          	ret

60002ea0 <xTaskResumeAll>:
xTaskResumeAll():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
60002ea0:	fe010113          	addi	sp,sp,-32
60002ea4:	00112e23          	sw	ra,28(sp)
60002ea8:	00812c23          	sw	s0,24(sp)
60002eac:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
60002eb0:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
60002eb4:	8e41a783          	lw	a5,-1820(gp) # 800000e4 <uxSchedulerSuspended>
60002eb8:	00079663          	bnez	a5,60002ec4 <xTaskResumeAll+0x24>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
60002ebc:	30047073          	csrci	mstatus,8
60002ec0:	0000006f          	j	60002ec0 <xTaskResumeAll+0x20>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
60002ec4:	d84ff0ef          	jal	ra,60002448 <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
60002ec8:	8e41a783          	lw	a5,-1820(gp) # 800000e4 <uxSchedulerSuspended>
60002ecc:	fff78713          	addi	a4,a5,-1
60002ed0:	8ee1a223          	sw	a4,-1820(gp) # 800000e4 <uxSchedulerSuspended>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
60002ed4:	8e41a783          	lw	a5,-1820(gp) # 800000e4 <uxSchedulerSuspended>
60002ed8:	10079663          	bnez	a5,60002fe4 <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
60002edc:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <uxCurrentNumberOfTasks>
60002ee0:	10078263          	beqz	a5,60002fe4 <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
60002ee4:	0a80006f          	j	60002f8c <xTaskResumeAll+0xec>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
60002ee8:	800197b7          	lui	a5,0x80019
60002eec:	19c78793          	addi	a5,a5,412 # 8001919c <__stack_top+0xffffdf4c>
60002ef0:	00c7a783          	lw	a5,12(a5)
60002ef4:	00c7a783          	lw	a5,12(a5)
60002ef8:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
60002efc:	fe842783          	lw	a5,-24(s0)
60002f00:	01878793          	addi	a5,a5,24
60002f04:	00078513          	mv	a0,a5
60002f08:	b45ff0ef          	jal	ra,60002a4c <uxListRemove>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
60002f0c:	fe842783          	lw	a5,-24(s0)
60002f10:	00478793          	addi	a5,a5,4
60002f14:	00078513          	mv	a0,a5
60002f18:	b35ff0ef          	jal	ra,60002a4c <uxListRemove>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
60002f1c:	fe842783          	lw	a5,-24(s0)
60002f20:	02c7a703          	lw	a4,44(a5)
60002f24:	8c81a783          	lw	a5,-1848(gp) # 800000c8 <uxTopReadyPriority>
60002f28:	00e7f863          	bgeu	a5,a4,60002f38 <xTaskResumeAll+0x98>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
60002f2c:	fe842783          	lw	a5,-24(s0)
60002f30:	02c7a703          	lw	a4,44(a5)
60002f34:	8ce1a423          	sw	a4,-1848(gp) # 800000c8 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
60002f38:	fe842783          	lw	a5,-24(s0)
60002f3c:	02c7a703          	lw	a4,44(a5)
60002f40:	00070793          	mv	a5,a4
60002f44:	00279793          	slli	a5,a5,0x2
60002f48:	00e787b3          	add	a5,a5,a4
60002f4c:	00279793          	slli	a5,a5,0x2
60002f50:	80019737          	lui	a4,0x80019
60002f54:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdec0>
60002f58:	00e78733          	add	a4,a5,a4
60002f5c:	fe842783          	lw	a5,-24(s0)
60002f60:	00478793          	addi	a5,a5,4
60002f64:	00078593          	mv	a1,a5
60002f68:	00070513          	mv	a0,a4
60002f6c:	a59ff0ef          	jal	ra,600029c4 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
60002f70:	fe842783          	lw	a5,-24(s0)
60002f74:	02c7a703          	lw	a4,44(a5)
60002f78:	8b01a783          	lw	a5,-1872(gp) # 800000b0 <pxCurrentTCB>
60002f7c:	02c7a783          	lw	a5,44(a5)
60002f80:	00f76663          	bltu	a4,a5,60002f8c <xTaskResumeAll+0xec>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
60002f84:	00100713          	li	a4,1
60002f88:	8ce1aa23          	sw	a4,-1836(gp) # 800000d4 <xYieldPending>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
60002f8c:	800197b7          	lui	a5,0x80019
60002f90:	19c7a783          	lw	a5,412(a5) # 8001919c <__stack_top+0xffffdf4c>
60002f94:	f4079ae3          	bnez	a5,60002ee8 <xTaskResumeAll+0x48>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
60002f98:	8d01a783          	lw	a5,-1840(gp) # 800000d0 <uxPendedTicks>
60002f9c:	02078863          	beqz	a5,60002fcc <xTaskResumeAll+0x12c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
60002fa0:	0240006f          	j	60002fc4 <xTaskResumeAll+0x124>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
60002fa4:	05c000ef          	jal	ra,60003000 <xTaskIncrementTick>
60002fa8:	00050793          	mv	a5,a0
60002fac:	00078663          	beqz	a5,60002fb8 <xTaskResumeAll+0x118>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
60002fb0:	00100713          	li	a4,1
60002fb4:	8ce1aa23          	sw	a4,-1836(gp) # 800000d4 <xYieldPending>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
60002fb8:	8d01a783          	lw	a5,-1840(gp) # 800000d0 <uxPendedTicks>
60002fbc:	fff78713          	addi	a4,a5,-1
60002fc0:	8ce1a823          	sw	a4,-1840(gp) # 800000d0 <uxPendedTicks>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
60002fc4:	8d01a783          	lw	a5,-1840(gp) # 800000d0 <uxPendedTicks>
60002fc8:	fc079ee3          	bnez	a5,60002fa4 <xTaskResumeAll+0x104>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
60002fcc:	8d41a703          	lw	a4,-1836(gp) # 800000d4 <xYieldPending>
60002fd0:	00100793          	li	a5,1
60002fd4:	00f71863          	bne	a4,a5,60002fe4 <xTaskResumeAll+0x144>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
60002fd8:	00100793          	li	a5,1
60002fdc:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
60002fe0:	931ff0ef          	jal	ra,60002910 <vPortYield>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
60002fe4:	c98ff0ef          	jal	ra,6000247c <vPortExitCritical>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
60002fe8:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1759
}
60002fec:	00078513          	mv	a0,a5
60002ff0:	01c12083          	lw	ra,28(sp)
60002ff4:	01812403          	lw	s0,24(sp)
60002ff8:	02010113          	addi	sp,sp,32
60002ffc:	00008067          	ret

60003000 <xTaskIncrementTick>:
xTaskIncrementTick():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
60003000:	fd010113          	addi	sp,sp,-48
60003004:	02112623          	sw	ra,44(sp)
60003008:	02812423          	sw	s0,40(sp)
6000300c:	03010413          	addi	s0,sp,48
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
60003010:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
60003014:	8e41a783          	lw	a5,-1820(gp) # 800000e4 <uxSchedulerSuspended>
60003018:	1a079063          	bnez	a5,600031b8 <xTaskIncrementTick+0x1b8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
6000301c:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <xTickCount>
60003020:	00178713          	addi	a4,a5,1
60003024:	8ce1a223          	sw	a4,-1852(gp) # 800000c4 <xTickCount>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
60003028:	8c41a783          	lw	a5,-1852(gp) # 800000c4 <xTickCount>
6000302c:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
60003030:	fe842783          	lw	a5,-24(s0)
60003034:	04079063          	bnez	a5,60003074 <xTaskIncrementTick+0x74>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
60003038:	8b41a783          	lw	a5,-1868(gp) # 800000b4 <pxDelayedTaskList>
6000303c:	0007a783          	lw	a5,0(a5)
60003040:	00078663          	beqz	a5,6000304c <xTaskIncrementTick+0x4c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
60003044:	30047073          	csrci	mstatus,8
60003048:	0000006f          	j	60003048 <xTaskIncrementTick+0x48>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
6000304c:	8b41a783          	lw	a5,-1868(gp) # 800000b4 <pxDelayedTaskList>
60003050:	fef42223          	sw	a5,-28(s0)
60003054:	8b81a703          	lw	a4,-1864(gp) # 800000b8 <pxOverflowDelayedTaskList>
60003058:	8ae1aa23          	sw	a4,-1868(gp) # 800000b4 <pxDelayedTaskList>
6000305c:	fe442703          	lw	a4,-28(s0)
60003060:	8ae1ac23          	sw	a4,-1864(gp) # 800000b8 <pxOverflowDelayedTaskList>
60003064:	8d81a783          	lw	a5,-1832(gp) # 800000d8 <xNumOfOverflows>
60003068:	00178713          	addi	a4,a5,1
6000306c:	8ce1ac23          	sw	a4,-1832(gp) # 800000d8 <xNumOfOverflows>
60003070:	634000ef          	jal	ra,600036a4 <prvResetNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
60003074:	8e01a783          	lw	a5,-1824(gp) # 800000e0 <xNextTaskUnblockTime>
60003078:	fe842703          	lw	a4,-24(s0)
6000307c:	10f76063          	bltu	a4,a5,6000317c <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60003080:	8b41a783          	lw	a5,-1868(gp) # 800000b4 <pxDelayedTaskList>
60003084:	0007a783          	lw	a5,0(a5)
60003088:	00079663          	bnez	a5,60003094 <xTaskIncrementTick+0x94>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
6000308c:	00100793          	li	a5,1
60003090:	0080006f          	j	60003098 <xTaskIncrementTick+0x98>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
60003094:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
60003098:	00078863          	beqz	a5,600030a8 <xTaskIncrementTick+0xa8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
6000309c:	fff00713          	li	a4,-1
600030a0:	8ee1a023          	sw	a4,-1824(gp) # 800000e0 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1983
						break;
600030a4:	0d80006f          	j	6000317c <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
600030a8:	8b41a783          	lw	a5,-1868(gp) # 800000b4 <pxDelayedTaskList>
600030ac:	00c7a783          	lw	a5,12(a5)
600030b0:	00c7a783          	lw	a5,12(a5)
600030b4:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
600030b8:	fe042783          	lw	a5,-32(s0)
600030bc:	0047a783          	lw	a5,4(a5)
600030c0:	fcf42e23          	sw	a5,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
600030c4:	fe842703          	lw	a4,-24(s0)
600030c8:	fdc42783          	lw	a5,-36(s0)
600030cc:	00f77863          	bgeu	a4,a5,600030dc <xTaskIncrementTick+0xdc>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
600030d0:	fdc42703          	lw	a4,-36(s0)
600030d4:	8ee1a023          	sw	a4,-1824(gp) # 800000e0 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2002
							break;
600030d8:	0a40006f          	j	6000317c <xTaskIncrementTick+0x17c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
600030dc:	fe042783          	lw	a5,-32(s0)
600030e0:	00478793          	addi	a5,a5,4
600030e4:	00078513          	mv	a0,a5
600030e8:	965ff0ef          	jal	ra,60002a4c <uxListRemove>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
600030ec:	fe042783          	lw	a5,-32(s0)
600030f0:	0287a783          	lw	a5,40(a5)
600030f4:	00078a63          	beqz	a5,60003108 <xTaskIncrementTick+0x108>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
600030f8:	fe042783          	lw	a5,-32(s0)
600030fc:	01878793          	addi	a5,a5,24
60003100:	00078513          	mv	a0,a5
60003104:	949ff0ef          	jal	ra,60002a4c <uxListRemove>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
60003108:	fe042783          	lw	a5,-32(s0)
6000310c:	02c7a703          	lw	a4,44(a5)
60003110:	8c81a783          	lw	a5,-1848(gp) # 800000c8 <uxTopReadyPriority>
60003114:	00e7f863          	bgeu	a5,a4,60003124 <xTaskIncrementTick+0x124>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
60003118:	fe042783          	lw	a5,-32(s0)
6000311c:	02c7a703          	lw	a4,44(a5)
60003120:	8ce1a423          	sw	a4,-1848(gp) # 800000c8 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
60003124:	fe042783          	lw	a5,-32(s0)
60003128:	02c7a703          	lw	a4,44(a5)
6000312c:	00070793          	mv	a5,a4
60003130:	00279793          	slli	a5,a5,0x2
60003134:	00e787b3          	add	a5,a5,a4
60003138:	00279793          	slli	a5,a5,0x2
6000313c:	80019737          	lui	a4,0x80019
60003140:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdec0>
60003144:	00e78733          	add	a4,a5,a4
60003148:	fe042783          	lw	a5,-32(s0)
6000314c:	00478793          	addi	a5,a5,4
60003150:	00078593          	mv	a1,a5
60003154:	00070513          	mv	a0,a4
60003158:	86dff0ef          	jal	ra,600029c4 <vListInsertEnd>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
6000315c:	fe042783          	lw	a5,-32(s0)
60003160:	02c7a703          	lw	a4,44(a5)
60003164:	8b01a783          	lw	a5,-1872(gp) # 800000b0 <pxCurrentTCB>
60003168:	02c7a783          	lw	a5,44(a5)
6000316c:	f0f76ae3          	bltu	a4,a5,60003080 <xTaskIncrementTick+0x80>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
60003170:	00100793          	li	a5,1
60003174:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
60003178:	f09ff06f          	j	60003080 <xTaskIncrementTick+0x80>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
6000317c:	8b01a783          	lw	a5,-1872(gp) # 800000b0 <pxCurrentTCB>
60003180:	02c7a703          	lw	a4,44(a5)
60003184:	800196b7          	lui	a3,0x80019
60003188:	00070793          	mv	a5,a4
6000318c:	00279793          	slli	a5,a5,0x2
60003190:	00e787b3          	add	a5,a5,a4
60003194:	00279793          	slli	a5,a5,0x2
60003198:	11068713          	addi	a4,a3,272 # 80019110 <__stack_top+0xffffdec0>
6000319c:	00e787b3          	add	a5,a5,a4
600031a0:	0007a703          	lw	a4,0(a5)
600031a4:	00100793          	li	a5,1
600031a8:	00e7fe63          	bgeu	a5,a4,600031c4 <xTaskIncrementTick+0x1c4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
600031ac:	00100793          	li	a5,1
600031b0:	fef42623          	sw	a5,-20(s0)
600031b4:	0100006f          	j	600031c4 <xTaskIncrementTick+0x1c4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
600031b8:	8d01a783          	lw	a5,-1840(gp) # 800000d0 <uxPendedTicks>
600031bc:	00178713          	addi	a4,a5,1
600031c0:	8ce1a823          	sw	a4,-1840(gp) # 800000d0 <uxPendedTicks>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
600031c4:	8d41a783          	lw	a5,-1836(gp) # 800000d4 <xYieldPending>
600031c8:	00078663          	beqz	a5,600031d4 <xTaskIncrementTick+0x1d4>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
600031cc:	00100793          	li	a5,1
600031d0:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
600031d4:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2108
}
600031d8:	00078513          	mv	a0,a5
600031dc:	02c12083          	lw	ra,44(sp)
600031e0:	02812403          	lw	s0,40(sp)
600031e4:	03010113          	addi	sp,sp,48
600031e8:	00008067          	ret

600031ec <vTaskSwitchContext>:
vTaskSwitchContext():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
600031ec:	fe010113          	addi	sp,sp,-32
600031f0:	00812e23          	sw	s0,28(sp)
600031f4:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
600031f8:	8e41a783          	lw	a5,-1820(gp) # 800000e4 <uxSchedulerSuspended>
600031fc:	00078863          	beqz	a5,6000320c <vTaskSwitchContext+0x20>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
60003200:	00100713          	li	a4,1
60003204:	8ce1aa23          	sw	a4,-1836(gp) # 800000d4 <xYieldPending>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
60003208:	0c00006f          	j	600032c8 <vTaskSwitchContext+0xdc>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
6000320c:	8c01aa23          	sw	zero,-1836(gp) # 800000d4 <xYieldPending>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
60003210:	0200006f          	j	60003230 <vTaskSwitchContext+0x44>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
60003214:	8c81a783          	lw	a5,-1848(gp) # 800000c8 <uxTopReadyPriority>
60003218:	00079663          	bnez	a5,60003224 <vTaskSwitchContext+0x38>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
6000321c:	30047073          	csrci	mstatus,8
60003220:	0000006f          	j	60003220 <vTaskSwitchContext+0x34>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
60003224:	8c81a783          	lw	a5,-1848(gp) # 800000c8 <uxTopReadyPriority>
60003228:	fff78713          	addi	a4,a5,-1
6000322c:	8ce1a423          	sw	a4,-1848(gp) # 800000c8 <uxTopReadyPriority>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
60003230:	8c81a703          	lw	a4,-1848(gp) # 800000c8 <uxTopReadyPriority>
60003234:	800196b7          	lui	a3,0x80019
60003238:	00070793          	mv	a5,a4
6000323c:	00279793          	slli	a5,a5,0x2
60003240:	00e787b3          	add	a5,a5,a4
60003244:	00279793          	slli	a5,a5,0x2
60003248:	11068713          	addi	a4,a3,272 # 80019110 <__stack_top+0xffffdec0>
6000324c:	00e787b3          	add	a5,a5,a4
60003250:	0007a783          	lw	a5,0(a5)
60003254:	fc0780e3          	beqz	a5,60003214 <vTaskSwitchContext+0x28>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
60003258:	8c81a703          	lw	a4,-1848(gp) # 800000c8 <uxTopReadyPriority>
6000325c:	00070793          	mv	a5,a4
60003260:	00279793          	slli	a5,a5,0x2
60003264:	00e787b3          	add	a5,a5,a4
60003268:	00279793          	slli	a5,a5,0x2
6000326c:	80019737          	lui	a4,0x80019
60003270:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdec0>
60003274:	00e787b3          	add	a5,a5,a4
60003278:	fef42623          	sw	a5,-20(s0)
6000327c:	fec42783          	lw	a5,-20(s0)
60003280:	0047a783          	lw	a5,4(a5)
60003284:	0047a703          	lw	a4,4(a5)
60003288:	fec42783          	lw	a5,-20(s0)
6000328c:	00e7a223          	sw	a4,4(a5)
60003290:	fec42783          	lw	a5,-20(s0)
60003294:	0047a703          	lw	a4,4(a5)
60003298:	fec42783          	lw	a5,-20(s0)
6000329c:	00878793          	addi	a5,a5,8
600032a0:	00f71c63          	bne	a4,a5,600032b8 <vTaskSwitchContext+0xcc>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
600032a4:	fec42783          	lw	a5,-20(s0)
600032a8:	0047a783          	lw	a5,4(a5)
600032ac:	0047a703          	lw	a4,4(a5)
600032b0:	fec42783          	lw	a5,-20(s0)
600032b4:	00e7a223          	sw	a4,4(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
600032b8:	fec42783          	lw	a5,-20(s0)
600032bc:	0047a783          	lw	a5,4(a5)
600032c0:	00c7a703          	lw	a4,12(a5)
600032c4:	8ae1a823          	sw	a4,-1872(gp) # 800000b0 <pxCurrentTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2257
}
600032c8:	00000013          	nop
600032cc:	01c12403          	lw	s0,28(sp)
600032d0:	02010113          	addi	sp,sp,32
600032d4:	00008067          	ret

600032d8 <prvIdleTask>:
prvIdleTask():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
600032d8:	fe010113          	addi	sp,sp,-32
600032dc:	00112e23          	sw	ra,28(sp)
600032e0:	00812c23          	sw	s0,24(sp)
600032e4:	02010413          	addi	s0,sp,32
600032e8:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
600032ec:	218000ef          	jal	ra,60003504 <prvCheckTasksWaitingTermination>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
600032f0:	800197b7          	lui	a5,0x80019
600032f4:	1107a703          	lw	a4,272(a5) # 80019110 <__stack_top+0xffffdec0>
600032f8:	00100793          	li	a5,1
600032fc:	00e7f463          	bgeu	a5,a4,60003304 <prvIdleTask+0x2c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
60003300:	e10ff0ef          	jal	ra,60002910 <vPortYield>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
60003304:	710000ef          	jal	ra,60003a14 <vApplicationIdleHook>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
60003308:	fe5ff06f          	j	600032ec <prvIdleTask+0x14>

6000330c <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
6000330c:	fc010113          	addi	sp,sp,-64
60003310:	02112e23          	sw	ra,60(sp)
60003314:	02812c23          	sw	s0,56(sp)
60003318:	04010413          	addi	s0,sp,64
6000331c:	fca42e23          	sw	a0,-36(s0)
60003320:	fcb42c23          	sw	a1,-40(s0)
60003324:	fcc42a23          	sw	a2,-44(s0)
60003328:	fcd42823          	sw	a3,-48(s0)
6000332c:	00070793          	mv	a5,a4
60003330:	fcf41723          	sh	a5,-50(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
60003334:	fe042623          	sw	zero,-20(s0)
60003338:	0440006f          	j	6000337c <prvInitialiseTCBVariables+0x70>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
6000333c:	fd842703          	lw	a4,-40(s0)
60003340:	fec42783          	lw	a5,-20(s0)
60003344:	00f707b3          	add	a5,a4,a5
60003348:	00078703          	lb	a4,0(a5)
6000334c:	fdc42683          	lw	a3,-36(s0)
60003350:	fec42783          	lw	a5,-20(s0)
60003354:	00f687b3          	add	a5,a3,a5
60003358:	02e78a23          	sb	a4,52(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
6000335c:	fd842703          	lw	a4,-40(s0)
60003360:	fec42783          	lw	a5,-20(s0)
60003364:	00f707b3          	add	a5,a4,a5
60003368:	00078783          	lb	a5,0(a5)
6000336c:	02078063          	beqz	a5,6000338c <prvInitialiseTCBVariables+0x80>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
60003370:	fec42783          	lw	a5,-20(s0)
60003374:	00178793          	addi	a5,a5,1
60003378:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
6000337c:	fec42703          	lw	a4,-20(s0)
60003380:	00f00793          	li	a5,15
60003384:	fae7fce3          	bgeu	a5,a4,6000333c <prvInitialiseTCBVariables+0x30>
60003388:	0080006f          	j	60003390 <prvInitialiseTCBVariables+0x84>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2845
		{
			break;
6000338c:	00000013          	nop
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
60003390:	fdc42783          	lw	a5,-36(s0)
60003394:	040781a3          	sb	zero,67(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
60003398:	fd442703          	lw	a4,-44(s0)
6000339c:	00400793          	li	a5,4
600033a0:	00e7f663          	bgeu	a5,a4,600033ac <prvInitialiseTCBVariables+0xa0>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
600033a4:	00400793          	li	a5,4
600033a8:	fcf42a23          	sw	a5,-44(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
600033ac:	fdc42783          	lw	a5,-36(s0)
600033b0:	fd442703          	lw	a4,-44(s0)
600033b4:	02e7a623          	sw	a4,44(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
600033b8:	fdc42783          	lw	a5,-36(s0)
600033bc:	fd442703          	lw	a4,-44(s0)
600033c0:	04e7a823          	sw	a4,80(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
600033c4:	fdc42783          	lw	a5,-36(s0)
600033c8:	0407aa23          	sw	zero,84(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
600033cc:	fdc42783          	lw	a5,-36(s0)
600033d0:	00478793          	addi	a5,a5,4
600033d4:	00078513          	mv	a0,a5
600033d8:	dc4ff0ef          	jal	ra,6000299c <vListInitialiseItem>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
600033dc:	fdc42783          	lw	a5,-36(s0)
600033e0:	01878793          	addi	a5,a5,24
600033e4:	00078513          	mv	a0,a5
600033e8:	db4ff0ef          	jal	ra,6000299c <vListInitialiseItem>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
600033ec:	fdc42783          	lw	a5,-36(s0)
600033f0:	fdc42703          	lw	a4,-36(s0)
600033f4:	00e7a823          	sw	a4,16(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
600033f8:	00500713          	li	a4,5
600033fc:	fd442783          	lw	a5,-44(s0)
60003400:	40f70733          	sub	a4,a4,a5
60003404:	fdc42783          	lw	a5,-36(s0)
60003408:	00e7ac23          	sw	a4,24(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
6000340c:	fdc42783          	lw	a5,-36(s0)
60003410:	fdc42703          	lw	a4,-36(s0)
60003414:	02e7a223          	sw	a4,36(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
60003418:	fdc42783          	lw	a5,-36(s0)
6000341c:	0407a223          	sw	zero,68(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
60003420:	fdc42783          	lw	a5,-36(s0)
60003424:	0407ac23          	sw	zero,88(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
60003428:	fdc42783          	lw	a5,-36(s0)
6000342c:	0407ae23          	sw	zero,92(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
60003430:	00000013          	nop
60003434:	03c12083          	lw	ra,60(sp)
60003438:	03812403          	lw	s0,56(sp)
6000343c:	04010113          	addi	sp,sp,64
60003440:	00008067          	ret

60003444 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
60003444:	fe010113          	addi	sp,sp,-32
60003448:	00112e23          	sw	ra,28(sp)
6000344c:	00812c23          	sw	s0,24(sp)
60003450:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
60003454:	fe042623          	sw	zero,-20(s0)
60003458:	0380006f          	j	60003490 <prvInitialiseTaskLists+0x4c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
6000345c:	fec42703          	lw	a4,-20(s0)
60003460:	00070793          	mv	a5,a4
60003464:	00279793          	slli	a5,a5,0x2
60003468:	00e787b3          	add	a5,a5,a4
6000346c:	00279793          	slli	a5,a5,0x2
60003470:	80019737          	lui	a4,0x80019
60003474:	11070713          	addi	a4,a4,272 # 80019110 <__stack_top+0xffffdec0>
60003478:	00e787b3          	add	a5,a5,a4
6000347c:	00078513          	mv	a0,a5
60003480:	cb8ff0ef          	jal	ra,60002938 <vListInitialise>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
60003484:	fec42783          	lw	a5,-20(s0)
60003488:	00178793          	addi	a5,a5,1
6000348c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
60003490:	fec42703          	lw	a4,-20(s0)
60003494:	00400793          	li	a5,4
60003498:	fce7f2e3          	bgeu	a5,a4,6000345c <prvInitialiseTaskLists+0x18>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
6000349c:	800197b7          	lui	a5,0x80019
600034a0:	17478513          	addi	a0,a5,372 # 80019174 <__stack_top+0xffffdf24>
600034a4:	c94ff0ef          	jal	ra,60002938 <vListInitialise>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
600034a8:	800197b7          	lui	a5,0x80019
600034ac:	18878513          	addi	a0,a5,392 # 80019188 <__stack_top+0xffffdf38>
600034b0:	c88ff0ef          	jal	ra,60002938 <vListInitialise>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
600034b4:	800197b7          	lui	a5,0x80019
600034b8:	19c78513          	addi	a0,a5,412 # 8001919c <__stack_top+0xffffdf4c>
600034bc:	c7cff0ef          	jal	ra,60002938 <vListInitialise>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
600034c0:	800197b7          	lui	a5,0x80019
600034c4:	1b078513          	addi	a0,a5,432 # 800191b0 <__stack_top+0xffffdf60>
600034c8:	c70ff0ef          	jal	ra,60002938 <vListInitialise>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
600034cc:	800197b7          	lui	a5,0x80019
600034d0:	1c478513          	addi	a0,a5,452 # 800191c4 <__stack_top+0xffffdf74>
600034d4:	c64ff0ef          	jal	ra,60002938 <vListInitialise>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
600034d8:	80019737          	lui	a4,0x80019
600034dc:	17470713          	addi	a4,a4,372 # 80019174 <__stack_top+0xffffdf24>
600034e0:	8ae1aa23          	sw	a4,-1868(gp) # 800000b4 <pxDelayedTaskList>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
600034e4:	80019737          	lui	a4,0x80019
600034e8:	18870713          	addi	a4,a4,392 # 80019188 <__stack_top+0xffffdf38>
600034ec:	8ae1ac23          	sw	a4,-1864(gp) # 800000b8 <pxOverflowDelayedTaskList>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3025
}
600034f0:	00000013          	nop
600034f4:	01c12083          	lw	ra,28(sp)
600034f8:	01812403          	lw	s0,24(sp)
600034fc:	02010113          	addi	sp,sp,32
60003500:	00008067          	ret

60003504 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
60003504:	fe010113          	addi	sp,sp,-32
60003508:	00112e23          	sw	ra,28(sp)
6000350c:	00812c23          	sw	s0,24(sp)
60003510:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
60003514:	0740006f          	j	60003588 <prvCheckTasksWaitingTermination+0x84>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
60003518:	961ff0ef          	jal	ra,60002e78 <vTaskSuspendAll>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
6000351c:	800197b7          	lui	a5,0x80019
60003520:	1b07a783          	lw	a5,432(a5) # 800191b0 <__stack_top+0xffffdf60>
60003524:	0017b793          	seqz	a5,a5
60003528:	0ff7f793          	andi	a5,a5,255
6000352c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
60003530:	971ff0ef          	jal	ra,60002ea0 <xTaskResumeAll>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
60003534:	fec42783          	lw	a5,-20(s0)
60003538:	04079863          	bnez	a5,60003588 <prvCheckTasksWaitingTermination+0x84>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
6000353c:	f0dfe0ef          	jal	ra,60002448 <vPortEnterCritical>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
60003540:	800197b7          	lui	a5,0x80019
60003544:	1b078793          	addi	a5,a5,432 # 800191b0 <__stack_top+0xffffdf60>
60003548:	00c7a783          	lw	a5,12(a5)
6000354c:	00c7a783          	lw	a5,12(a5)
60003550:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
60003554:	fe842783          	lw	a5,-24(s0)
60003558:	00478793          	addi	a5,a5,4
6000355c:	00078513          	mv	a0,a5
60003560:	cecff0ef          	jal	ra,60002a4c <uxListRemove>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
60003564:	8c01a783          	lw	a5,-1856(gp) # 800000c0 <uxCurrentNumberOfTasks>
60003568:	fff78713          	addi	a4,a5,-1
6000356c:	8ce1a023          	sw	a4,-1856(gp) # 800000c0 <uxCurrentNumberOfTasks>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
60003570:	8bc1a783          	lw	a5,-1860(gp) # 800000bc <uxTasksDeleted>
60003574:	fff78713          	addi	a4,a5,-1
60003578:	8ae1ae23          	sw	a4,-1860(gp) # 800000bc <uxTasksDeleted>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
6000357c:	f01fe0ef          	jal	ra,6000247c <vPortExitCritical>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
60003580:	fe842503          	lw	a0,-24(s0)
60003584:	0e0000ef          	jal	ra,60003664 <prvDeleteTCB>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
60003588:	8bc1a783          	lw	a5,-1860(gp) # 800000bc <uxTasksDeleted>
6000358c:	f80796e3          	bnez	a5,60003518 <prvCheckTasksWaitingTermination+0x14>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
60003590:	00000013          	nop
60003594:	01c12083          	lw	ra,28(sp)
60003598:	01812403          	lw	s0,24(sp)
6000359c:	02010113          	addi	sp,sp,32
600035a0:	00008067          	ret

600035a4 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3100
	}
}
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
600035a4:	fd010113          	addi	sp,sp,-48
600035a8:	02112623          	sw	ra,44(sp)
600035ac:	02812423          	sw	s0,40(sp)
600035b0:	03010413          	addi	s0,sp,48
600035b4:	00050793          	mv	a5,a0
600035b8:	fcb42c23          	sw	a1,-40(s0)
600035bc:	fcf41f23          	sh	a5,-34(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
600035c0:	fd842783          	lw	a5,-40(s0)
600035c4:	00079e63          	bnez	a5,600035e0 <prvAllocateTCBAndStack+0x3c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
600035c8:	fde45783          	lhu	a5,-34(s0)
600035cc:	00279793          	slli	a5,a5,0x2
600035d0:	00078513          	mv	a0,a5
600035d4:	b0dfe0ef          	jal	ra,600020e0 <pvPortMalloc>
600035d8:	00050793          	mv	a5,a0
600035dc:	0080006f          	j	600035e4 <prvAllocateTCBAndStack+0x40>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
600035e0:	fd842783          	lw	a5,-40(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
600035e4:	fef42423          	sw	a5,-24(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
600035e8:	fe842783          	lw	a5,-24(s0)
600035ec:	02078a63          	beqz	a5,60003620 <prvAllocateTCBAndStack+0x7c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
600035f0:	06000513          	li	a0,96
600035f4:	aedfe0ef          	jal	ra,600020e0 <pvPortMalloc>
600035f8:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
600035fc:	fec42783          	lw	a5,-20(s0)
60003600:	00078a63          	beqz	a5,60003614 <prvAllocateTCBAndStack+0x70>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
60003604:	fec42783          	lw	a5,-20(s0)
60003608:	fe842703          	lw	a4,-24(s0)
6000360c:	02e7a823          	sw	a4,48(a5)
60003610:	0140006f          	j	60003624 <prvAllocateTCBAndStack+0x80>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
60003614:	fe842503          	lw	a0,-24(s0)
60003618:	ca5fe0ef          	jal	ra,600022bc <vPortFree>
6000361c:	0080006f          	j	60003624 <prvAllocateTCBAndStack+0x80>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
60003620:	fe042623          	sw	zero,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
60003624:	fec42783          	lw	a5,-20(s0)
60003628:	02078263          	beqz	a5,6000364c <prvAllocateTCBAndStack+0xa8>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
6000362c:	fec42783          	lw	a5,-20(s0)
60003630:	0307a703          	lw	a4,48(a5)
60003634:	fde45783          	lhu	a5,-34(s0)
60003638:	00279793          	slli	a5,a5,0x2
6000363c:	00078613          	mv	a2,a5
60003640:	0a500593          	li	a1,165
60003644:	00070513          	mv	a0,a4
60003648:	c9cff0ef          	jal	ra,60002ae4 <memset>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
6000364c:	fec42783          	lw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3171
}
60003650:	00078513          	mv	a0,a5
60003654:	02c12083          	lw	ra,44(sp)
60003658:	02812403          	lw	s0,40(sp)
6000365c:	03010113          	addi	sp,sp,48
60003660:	00008067          	ret

60003664 <prvDeleteTCB>:
prvDeleteTCB():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
60003664:	fe010113          	addi	sp,sp,-32
60003668:	00112e23          	sw	ra,28(sp)
6000366c:	00812c23          	sw	s0,24(sp)
60003670:	02010413          	addi	s0,sp,32
60003674:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
60003678:	fec42783          	lw	a5,-20(s0)
6000367c:	0307a783          	lw	a5,48(a5)
60003680:	00078513          	mv	a0,a5
60003684:	c39fe0ef          	jal	ra,600022bc <vPortFree>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
60003688:	fec42503          	lw	a0,-20(s0)
6000368c:	c31fe0ef          	jal	ra,600022bc <vPortFree>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3340
	}
60003690:	00000013          	nop
60003694:	01c12083          	lw	ra,28(sp)
60003698:	01812403          	lw	s0,24(sp)
6000369c:	02010113          	addi	sp,sp,32
600036a0:	00008067          	ret

600036a4 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
600036a4:	fe010113          	addi	sp,sp,-32
600036a8:	00812e23          	sw	s0,28(sp)
600036ac:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
600036b0:	8b41a783          	lw	a5,-1868(gp) # 800000b4 <pxDelayedTaskList>
600036b4:	0007a783          	lw	a5,0(a5)
600036b8:	00079663          	bnez	a5,600036c4 <prvResetNextTaskUnblockTime+0x20>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
600036bc:	00100793          	li	a5,1
600036c0:	0080006f          	j	600036c8 <prvResetNextTaskUnblockTime+0x24>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
600036c4:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
600036c8:	00078863          	beqz	a5,600036d8 <prvResetNextTaskUnblockTime+0x34>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
600036cc:	fff00713          	li	a4,-1
600036d0:	8ee1a023          	sw	a4,-1824(gp) # 800000e0 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
600036d4:	0200006f          	j	600036f4 <prvResetNextTaskUnblockTime+0x50>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
600036d8:	8b41a783          	lw	a5,-1868(gp) # 800000b4 <pxDelayedTaskList>
600036dc:	00c7a783          	lw	a5,12(a5)
600036e0:	00c7a783          	lw	a5,12(a5)
600036e4:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
600036e8:	fec42783          	lw	a5,-20(s0)
600036ec:	0047a703          	lw	a4,4(a5)
600036f0:	8ee1a023          	sw	a4,-1824(gp) # 800000e0 <xNextTaskUnblockTime>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../FreeRTOS/tasks.c:3366
}
600036f4:	00000013          	nop
600036f8:	01c12403          	lw	s0,28(sp)
600036fc:	02010113          	addi	sp,sp,32
60003700:	00008067          	ret

60003704 <BasicIO_Init>:
BasicIO_Init():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:101

// --- Private functions -------------------------------------------------------

// --- Public Functions --------------------------------------------------------

void BasicIO_Init(addr_t interface_addr) {
60003704:	fe010113          	addi	sp,sp,-32
60003708:	00112e23          	sw	ra,28(sp)
6000370c:	00812c23          	sw	s0,24(sp)
60003710:	02010413          	addi	s0,sp,32
60003714:	fea42623          	sw	a0,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:104

 	GPIO_init(BASIC_GPIO_PBS,
 						interface_addr | BASIC_IO_GPIO_ADDR,
60003718:	fec42783          	lw	a5,-20(s0)
6000371c:	1007e793          	ori	a5,a5,256
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:103
 	GPIO_init(BASIC_GPIO_PBS,
60003720:	00200613          	li	a2,2
60003724:	00078593          	mv	a1,a5
60003728:	8e818513          	addi	a0,gp,-1816 # 800000e8 <g_gpio_in_PBs>
6000372c:	d8cfe0ef          	jal	ra,60001cb8 <GPIO_init>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:107
						GPIO_APB_32_BITS_BUS);
 	GPIO_init(BASIC_GPIO_LEDS,
 						interface_addr | BASIC_IO_GPIO_ADDR,
60003730:	fec42783          	lw	a5,-20(s0)
60003734:	1007e793          	ori	a5,a5,256
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:106
 	GPIO_init(BASIC_GPIO_LEDS,
60003738:	00200613          	li	a2,2
6000373c:	00078593          	mv	a1,a5
60003740:	8f018513          	addi	a0,gp,-1808 # 800000f0 <g_gpio_out_LEDs>
60003744:	d74fe0ef          	jal	ra,60001cb8 <GPIO_init>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:110
						GPIO_APB_32_BITS_BUS);
  
  GPIO_enable_irq(BASIC_GPIO_PBS, PB1);
60003748:	00000593          	li	a1,0
6000374c:	8e818513          	addi	a0,gp,-1816 # 800000e8 <g_gpio_in_PBs>
60003750:	911fe0ef          	jal	ra,60002060 <GPIO_enable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:111
  GPIO_enable_irq(BASIC_GPIO_PBS, PB2);  
60003754:	00100593          	li	a1,1
60003758:	8e818513          	addi	a0,gp,-1816 # 800000e8 <g_gpio_in_PBs>
6000375c:	905fe0ef          	jal	ra,60002060 <GPIO_enable_irq>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:113

  GPIO_set_output(BASIC_GPIO_LEDS, LED1_GREEN, LED_OFF);
60003760:	00000613          	li	a2,0
60003764:	00200593          	li	a1,2
60003768:	8f018513          	addi	a0,gp,-1808 # 800000f0 <g_gpio_out_LEDs>
6000376c:	ebcfe0ef          	jal	ra,60001e28 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:114
  GPIO_set_output(BASIC_GPIO_LEDS, LED1_RED, LED_OFF);
60003770:	00000613          	li	a2,0
60003774:	00300593          	li	a1,3
60003778:	8f018513          	addi	a0,gp,-1808 # 800000f0 <g_gpio_out_LEDs>
6000377c:	eacfe0ef          	jal	ra,60001e28 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:115
  GPIO_set_output(BASIC_GPIO_LEDS, LED2_GREEN, LED_OFF);
60003780:	00000613          	li	a2,0
60003784:	00400593          	li	a1,4
60003788:	8f018513          	addi	a0,gp,-1808 # 800000f0 <g_gpio_out_LEDs>
6000378c:	e9cfe0ef          	jal	ra,60001e28 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:116
  GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_OFF);
60003790:	00000613          	li	a2,0
60003794:	00500593          	li	a1,5
60003798:	8f018513          	addi	a0,gp,-1808 # 800000f0 <g_gpio_out_LEDs>
6000379c:	e8cfe0ef          	jal	ra,60001e28 <GPIO_set_output>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:118
    
  UART_init(BASIC_UART,
600037a0:	00100693          	li	a3,1
600037a4:	01a00613          	li	a2,26
600037a8:	fec42583          	lw	a1,-20(s0)
600037ac:	8f818513          	addi	a0,gp,-1800 # 800000f8 <g_uart_term>
600037b0:	bd0fd0ef          	jal	ra,60000b80 <UART_init>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:123
  					interface_addr | BASIC_IO_UART_ADDR,
						BAUD_VALUE_115200,
            (DATA_8_BITS | NO_PARITY));
   
}
600037b4:	00000013          	nop
600037b8:	01c12083          	lw	ra,28(sp)
600037bc:	01812403          	lw	s0,24(sp)
600037c0:	02010113          	addi	sp,sp,32
600037c4:	00008067          	ret

600037c8 <UART_Tx_Msg>:
UART_Tx_Msg():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:179
	GPIO_set_output(BASIC_GPIO_LEDS, LED2_RED, LED_OFF);
}

// --- Terminal Functions ------------------------------------------------------

void UART_Tx_Msg(char* msg, uint8_t type) {
600037c8:	fe010113          	addi	sp,sp,-32
600037cc:	00112e23          	sw	ra,28(sp)
600037d0:	00812c23          	sw	s0,24(sp)
600037d4:	02010413          	addi	s0,sp,32
600037d8:	fea42623          	sw	a0,-20(s0)
600037dc:	00058793          	mv	a5,a1
600037e0:	fef405a3          	sb	a5,-21(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:180
	if (type == 1) {
600037e4:	feb44703          	lbu	a4,-21(s0)
600037e8:	00100793          	li	a5,1
600037ec:	00f71a63          	bne	a4,a5,60003800 <UART_Tx_Msg+0x38>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:181
		UART_polled_tx_string(BASIC_UART, (const uint8_t *) msg);
600037f0:	fec42583          	lw	a1,-20(s0)
600037f4:	8f818513          	addi	a0,gp,-1800 # 800000f8 <g_uart_term>
600037f8:	d54fd0ef          	jal	ra,60000d4c <UART_polled_tx_string>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:185
	} else {
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
	}
}
600037fc:	0140006f          	j	60003810 <UART_Tx_Msg+0x48>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:183
		UART_send(BASIC_UART, (const uint8_t *) msg, sizeof(*msg));
60003800:	00100613          	li	a2,1
60003804:	fec42583          	lw	a1,-20(s0)
60003808:	8f818513          	addi	a0,gp,-1800 # 800000f8 <g_uart_term>
6000380c:	c8cfd0ef          	jal	ra,60000c98 <UART_send>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../Creative/BasicIO.c:185
}
60003810:	00000013          	nop
60003814:	01c12083          	lw	ra,28(sp)
60003818:	01812403          	lw	s0,24(sp)
6000381c:	02010113          	addi	sp,sp,32
60003820:	00008067          	ret

60003824 <PLIC_init>:
PLIC_init():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:124
{
60003824:	fe010113          	addi	sp,sp,-32
60003828:	00812e23          	sw	s0,28(sp)
6000382c:	02010413          	addi	s0,sp,32
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
60003830:	f14027f3          	csrr	a5,mhartid
60003834:	fef42423          	sw	a5,-24(s0)
60003838:	fe842783          	lw	a5,-24(s0)
6000383c:	fef42223          	sw	a5,-28(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
60003840:	fe042623          	sw	zero,-20(s0)
60003844:	03c0006f          	j	60003880 <PLIC_init+0x5c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
60003848:	40000737          	lui	a4,0x40000
6000384c:	fe442783          	lw	a5,-28(s0)
60003850:	00579693          	slli	a3,a5,0x5
60003854:	fec42783          	lw	a5,-20(s0)
60003858:	00f686b3          	add	a3,a3,a5
6000385c:	000017b7          	lui	a5,0x1
60003860:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
60003864:	00f687b3          	add	a5,a3,a5
60003868:	00279793          	slli	a5,a5,0x2
6000386c:	00f707b3          	add	a5,a4,a5
60003870:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
60003874:	fec42783          	lw	a5,-20(s0)
60003878:	00178793          	addi	a5,a5,1
6000387c:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:129 (discriminator 1)
60003880:	fec42783          	lw	a5,-20(s0)
60003884:	fc0782e3          	beqz	a5,60003848 <PLIC_init+0x24>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
60003888:	fe042623          	sw	zero,-20(s0)
6000388c:	0240006f          	j	600038b0 <PLIC_init+0x8c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
60003890:	40000737          	lui	a4,0x40000
60003894:	fec42783          	lw	a5,-20(s0)
60003898:	00279793          	slli	a5,a5,0x2
6000389c:	00f707b3          	add	a5,a4,a5
600038a0:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
600038a4:	fec42783          	lw	a5,-20(s0)
600038a8:	00178793          	addi	a5,a5,1
600038ac:	fef42623          	sw	a5,-20(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:137 (discriminator 1)
600038b0:	fec42703          	lw	a4,-20(s0)
600038b4:	01e00793          	li	a5,30
600038b8:	fce7fce3          	bgeu	a5,a4,60003890 <PLIC_init+0x6c>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
600038bc:	40000737          	lui	a4,0x40000
600038c0:	fe442783          	lw	a5,-28(s0)
600038c4:	20078793          	addi	a5,a5,512
600038c8:	00c79793          	slli	a5,a5,0xc
600038cc:	00f707b3          	add	a5,a4,a5
600038d0:	0007a023          	sw	zero,0(a5)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
600038d4:	000017b7          	lui	a5,0x1
600038d8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0x800>
600038dc:	3047a7f3          	csrrs	a5,mie,a5
600038e0:	fef42023          	sw	a5,-32(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\riscv_hal/riscv_plic.h:147
}
600038e4:	00000013          	nop
600038e8:	01c12403          	lw	s0,28(sp)
600038ec:	02010113          	addi	sp,sp,32
600038f0:	00008067          	ret

600038f4 <External_31_IRQHandler>:
External_31_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:113


/*----------------------------------------------------------------------------
 * User Pushbutton #1 Interrupt Handler
 */
void External_31_IRQHandler() {
600038f4:	ff010113          	addi	sp,sp,-16
600038f8:	00812623          	sw	s0,12(sp)
600038fc:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:118
/*
	GPIO_clear_irq(&g_gpio_in_pbs, PB1);
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60003900:	00000013          	nop
60003904:	00c12403          	lw	s0,12(sp)
60003908:	01010113          	addi	sp,sp,16
6000390c:	00008067          	ret

60003910 <External_30_IRQHandler>:
External_30_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:123

/*----------------------------------------------------------------------------
 * User Pushbutton #2 Interrupt Handler
 */
void External_30_IRQHandler() {
60003910:	ff010113          	addi	sp,sp,-16
60003914:	00812623          	sw	s0,12(sp)
60003918:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:128
/*
	GPIO_clear_irq(&g_gpio_in_pbs, PB2);
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
6000391c:	00000013          	nop
60003920:	00c12403          	lw	s0,12(sp)
60003924:	01010113          	addi	sp,sp,16
60003928:	00008067          	ret

6000392c <External_29_IRQHandler>:
External_29_IRQHandler():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:133

/*----------------------------------------------------------------------------
 * User Timer Interrupt Handler
 */
void External_29_IRQHandler() {
6000392c:	ff010113          	addi	sp,sp,-16
60003930:	00812623          	sw	s0,12(sp)
60003934:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:137
/*
	PLIC_CompleteIRQ(PLIC_ClaimIRQ());
*/
}
60003938:	00000013          	nop
6000393c:	00c12403          	lw	s0,12(sp)
60003940:	01010113          	addi	sp,sp,16
60003944:	00008067          	ret

60003948 <main>:
main():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:172
//#define I2C_CH &i2c_channel
static i2c_instance_t i2c_camera;
//static i2c_instance_t i2c_channel;


int main(void) {
60003948:	ff010113          	addi	sp,sp,-16
6000394c:	00112623          	sw	ra,12(sp)
60003950:	00812423          	sw	s0,8(sp)
60003954:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:174

	PLIC_init();
60003958:	ecdff0ef          	jal	ra,60003824 <PLIC_init>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:178

	// -- Hardware setup -------------------------------------------------------

	BasicIO_Init(BASIC_IO_INTR_ADDR);
6000395c:	70000537          	lui	a0,0x70000
60003960:	da5ff0ef          	jal	ra,60003704 <BasicIO_Init>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:180

	GPIO_init(PIN, CoreGPIO_C1_0_ADDR | 0x00000000UL,
60003964:	00200613          	li	a2,2
60003968:	700025b7          	lui	a1,0x70002
6000396c:	90018513          	addi	a0,gp,-1792 # 80000100 <g_pin_led>
60003970:	b48fe0ef          	jal	ra,60001cb8 <GPIO_init>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:185
			GPIO_APB_32_BITS_BUS);

	// PCLK = 50 MHz, camera operating frequency 5-48 MHz
	// Note: channel 0 is initialized with I2C_init()
	I2C_init(I2C_CAM, CoreI2C_C0_0_ADDR, I2C_SER_ADDR, I2C_PCLK_DIV_160);
60003974:	00300693          	li	a3,3
60003978:	03000613          	li	a2,48
6000397c:	700035b7          	lui	a1,0x70003
60003980:	800197b7          	lui	a5,0x80019
60003984:	1d878513          	addi	a0,a5,472 # 800191d8 <__stack_top+0xffffdf88>
60003988:	c74fd0ef          	jal	ra,60000dfc <I2C_init>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:189
	//I2C_channel_init(I2C_CAM, I2C_CH, I2C_CHANNEL_0, I2C_PCLK_DIV_160);

	uint8_t ax_buffer;
	I2C_write(I2C_CAM, 0x04, 0x00, 1, I2C_RELEASE_BUS);
6000398c:	00000713          	li	a4,0
60003990:	00100693          	li	a3,1
60003994:	00000613          	li	a2,0
60003998:	00400593          	li	a1,4
6000399c:	800197b7          	lui	a5,0x80019
600039a0:	1d878513          	addi	a0,a5,472 # 800191d8 <__stack_top+0xffffdf88>
600039a4:	dc0fd0ef          	jal	ra,60000f64 <I2C_write>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:194
	// -- Main program ---------------------------------------------------------

	//UART_Tx_Msg(g_MSG_INTRO, 1);
	//UART_Tx_Msg(g_MSG_DEMO, 1);
	UART_Tx_Msg("\rHello World!\n\r", 1);
600039a8:	00100593          	li	a1,1
600039ac:	600047b7          	lui	a5,0x60004
600039b0:	ed078513          	addi	a0,a5,-304 # 60003ed0 <vI2COV2640Camera+0x4a0>
600039b4:	e15ff0ef          	jal	ra,600037c8 <UART_Tx_Msg>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:200

	/* Create the three test tasks. */
	//xTaskCreate(vLEDTestTask1, "LED1", 1000, NULL, 2, NULL);
	//xTaskCreate(vLEDTestTask2, "LED2", 1000, NULL, 3, NULL);
	//xTaskCreate(vLEDTestTask3, "LED3", 1000, NULL, 2, NULL);
	xTaskCreate(vI2COV2640Camera, "OV2640", 1000, NULL, 1, NULL);
600039b8:	00000893          	li	a7,0
600039bc:	00000813          	li	a6,0
600039c0:	00000793          	li	a5,0
600039c4:	00100713          	li	a4,1
600039c8:	00000693          	li	a3,0
600039cc:	3e800613          	li	a2,1000
600039d0:	600045b7          	lui	a1,0x60004
600039d4:	ee058593          	addi	a1,a1,-288 # 60003ee0 <vI2COV2640Camera+0x4b0>
600039d8:	60004537          	lui	a0,0x60004
600039dc:	a3050513          	addi	a0,a0,-1488 # 60003a30 <vI2COV2640Camera>
600039e0:	9ecff0ef          	jal	ra,60002bcc <xTaskGenericCreate>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:203

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
600039e4:	c04ff0ef          	jal	ra,60002de8 <vTaskStartScheduler>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:206

	/* Exit FreeRTOS */
	return 0;
600039e8:	00000793          	li	a5,0
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:207
}
600039ec:	00078513          	mv	a0,a5
600039f0:	00c12083          	lw	ra,12(sp)
600039f4:	00812403          	lw	s0,8(sp)
600039f8:	01010113          	addi	sp,sp,16
600039fc:	00008067          	ret

60003a00 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:211

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void) {
60003a00:	ff010113          	addi	sp,sp,-16
60003a04:	00812623          	sw	s0,12(sp)
60003a08:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:223
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
60003a0c:	30047073          	csrci	mstatus,8
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:224 (discriminator 1)
	for(;;);
60003a10:	0000006f          	j	60003a10 <vApplicationMallocFailedHook+0x10>

60003a14 <vApplicationIdleHook>:
vApplicationIdleHook():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:228
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook(void) {
60003a14:	ff010113          	addi	sp,sp,-16
60003a18:	00812623          	sw	s0,12(sp)
60003a1c:	01010413          	addi	s0,sp,16
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:239
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
60003a20:	00000013          	nop
60003a24:	00c12403          	lw	s0,12(sp)
60003a28:	01010113          	addi	sp,sp,16
60003a2c:	00008067          	ret

60003a30 <vI2COV2640Camera>:
vI2COV2640Camera():
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:279
		vTaskDelay(4);
		GPIO_set_output(PIN, GPIO_1, 0);
		vTaskDelay(4);
	}
}
static void vI2COV2640Camera(void *pvParameters) {
60003a30:	fd010113          	addi	sp,sp,-48
60003a34:	02112623          	sw	ra,44(sp)
60003a38:	02812423          	sw	s0,40(sp)
60003a3c:	03010413          	addi	s0,sp,48
60003a40:	fca42e23          	sw	a0,-36(s0)
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:285

	(void) pvParameters;
	uint8_t rx_buffer;
	i2c_status_t status;

	I2C_isr(I2C_CAM);
60003a44:	800197b7          	lui	a5,0x80019
60003a48:	1d878513          	addi	a0,a5,472 # 800191d8 <__stack_top+0xffffdf88>
60003a4c:	82dfd0ef          	jal	ra,60001278 <I2C_isr>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:286
	I2C_read(I2C_CAM, 0x00, &rx_buffer, 1, I2C_RELEASE_BUS);
60003a50:	fef40793          	addi	a5,s0,-17
60003a54:	00000713          	li	a4,0
60003a58:	00100693          	li	a3,1
60003a5c:	00078613          	mv	a2,a5
60003a60:	00000593          	li	a1,0
60003a64:	800197b7          	lui	a5,0x80019
60003a68:	1d878513          	addi	a0,a5,472 # 800191d8 <__stack_top+0xffffdf88>
60003a6c:	e58fd0ef          	jal	ra,600010c4 <I2C_read>
C:\Users\cheec\Desktop\Master\Software Project\PF_MiV_OTB_Morse\Debug/../main.c:290 (discriminator 1)
	//status = I2C_wait_complete(I2C_CAM, I2C_NO_TIMEOUT);
	//rx_buffer_L = i2c_camera_read(PIDL_ADDR);

	for(;;){
60003a70:	0000006f          	j	60003a70 <vI2COV2640Camera+0x40>
	...
60003a80:	6568                	flw	fa0,76(a0)
60003a82:	6c6c                	flw	fa1,92(s0)
60003a84:	0000006f          	j	60003a84 <vI2COV2640Camera+0x54>
60003a88:	12e0                	addi	s0,sp,364
60003a8a:	6000                	flw	fs0,0(s0)
60003a8c:	1b84                	addi	s1,sp,496
60003a8e:	6000                	flw	fs0,0(s0)
60003a90:	1b84                	addi	s1,sp,496
60003a92:	6000                	flw	fs0,0(s0)
60003a94:	1b84                	addi	s1,sp,496
60003a96:	6000                	flw	fs0,0(s0)
60003a98:	1b84                	addi	s1,sp,496
60003a9a:	6000                	flw	fs0,0(s0)
60003a9c:	1b84                	addi	s1,sp,496
60003a9e:	6000                	flw	fs0,0(s0)
60003aa0:	1b84                	addi	s1,sp,496
60003aa2:	6000                	flw	fs0,0(s0)
60003aa4:	1b84                	addi	s1,sp,496
60003aa6:	6000                	flw	fs0,0(s0)
60003aa8:	12e0                	addi	s0,sp,364
60003aaa:	6000                	flw	fs0,0(s0)
60003aac:	1b84                	addi	s1,sp,496
60003aae:	6000                	flw	fs0,0(s0)
60003ab0:	1b84                	addi	s1,sp,496
60003ab2:	6000                	flw	fs0,0(s0)
60003ab4:	1b84                	addi	s1,sp,496
60003ab6:	6000                	flw	fs0,0(s0)
60003ab8:	1b84                	addi	s1,sp,496
60003aba:	6000                	flw	fs0,0(s0)
60003abc:	1b84                	addi	s1,sp,496
60003abe:	6000                	flw	fs0,0(s0)
60003ac0:	1b84                	addi	s1,sp,496
60003ac2:	6000                	flw	fs0,0(s0)
60003ac4:	1b84                	addi	s1,sp,496
60003ac6:	6000                	flw	fs0,0(s0)
60003ac8:	13fc                	addi	a5,sp,492
60003aca:	6000                	flw	fs0,0(s0)
60003acc:	1b84                	addi	s1,sp,496
60003ace:	6000                	flw	fs0,0(s0)
60003ad0:	1b84                	addi	s1,sp,496
60003ad2:	6000                	flw	fs0,0(s0)
60003ad4:	1b84                	addi	s1,sp,496
60003ad6:	6000                	flw	fs0,0(s0)
60003ad8:	1b84                	addi	s1,sp,496
60003ada:	6000                	flw	fs0,0(s0)
60003adc:	1b84                	addi	s1,sp,496
60003ade:	6000                	flw	fs0,0(s0)
60003ae0:	1b84                	addi	s1,sp,496
60003ae2:	6000                	flw	fs0,0(s0)
60003ae4:	1b84                	addi	s1,sp,496
60003ae6:	6000                	flw	fs0,0(s0)
60003ae8:	13c0                	addi	s0,sp,484
60003aea:	6000                	flw	fs0,0(s0)
60003aec:	1b84                	addi	s1,sp,496
60003aee:	6000                	flw	fs0,0(s0)
60003af0:	1b84                	addi	s1,sp,496
60003af2:	6000                	flw	fs0,0(s0)
60003af4:	1b84                	addi	s1,sp,496
60003af6:	6000                	flw	fs0,0(s0)
60003af8:	1b84                	addi	s1,sp,496
60003afa:	6000                	flw	fs0,0(s0)
60003afc:	1b84                	addi	s1,sp,496
60003afe:	6000                	flw	fs0,0(s0)
60003b00:	1b84                	addi	s1,sp,496
60003b02:	6000                	flw	fs0,0(s0)
60003b04:	1b84                	addi	s1,sp,496
60003b06:	6000                	flw	fs0,0(s0)
60003b08:	13fc                	addi	a5,sp,492
60003b0a:	6000                	flw	fs0,0(s0)
60003b0c:	1b84                	addi	s1,sp,496
60003b0e:	6000                	flw	fs0,0(s0)
60003b10:	1b84                	addi	s1,sp,496
60003b12:	6000                	flw	fs0,0(s0)
60003b14:	1b84                	addi	s1,sp,496
60003b16:	6000                	flw	fs0,0(s0)
60003b18:	1b84                	addi	s1,sp,496
60003b1a:	6000                	flw	fs0,0(s0)
60003b1c:	1b84                	addi	s1,sp,496
60003b1e:	6000                	flw	fs0,0(s0)
60003b20:	1b84                	addi	s1,sp,496
60003b22:	6000                	flw	fs0,0(s0)
60003b24:	1b84                	addi	s1,sp,496
60003b26:	6000                	flw	fs0,0(s0)
60003b28:	14f4                	addi	a3,sp,620
60003b2a:	6000                	flw	fs0,0(s0)
60003b2c:	1b84                	addi	s1,sp,496
60003b2e:	6000                	flw	fs0,0(s0)
60003b30:	1b84                	addi	s1,sp,496
60003b32:	6000                	flw	fs0,0(s0)
60003b34:	1b84                	addi	s1,sp,496
60003b36:	6000                	flw	fs0,0(s0)
60003b38:	1b84                	addi	s1,sp,496
60003b3a:	6000                	flw	fs0,0(s0)
60003b3c:	1b84                	addi	s1,sp,496
60003b3e:	6000                	flw	fs0,0(s0)
60003b40:	1b84                	addi	s1,sp,496
60003b42:	6000                	flw	fs0,0(s0)
60003b44:	1b84                	addi	s1,sp,496
60003b46:	6000                	flw	fs0,0(s0)
60003b48:	13a0                	addi	s0,sp,488
60003b4a:	6000                	flw	fs0,0(s0)
60003b4c:	1b84                	addi	s1,sp,496
60003b4e:	6000                	flw	fs0,0(s0)
60003b50:	1b84                	addi	s1,sp,496
60003b52:	6000                	flw	fs0,0(s0)
60003b54:	1b84                	addi	s1,sp,496
60003b56:	6000                	flw	fs0,0(s0)
60003b58:	1b84                	addi	s1,sp,496
60003b5a:	6000                	flw	fs0,0(s0)
60003b5c:	1b84                	addi	s1,sp,496
60003b5e:	6000                	flw	fs0,0(s0)
60003b60:	1b84                	addi	s1,sp,496
60003b62:	6000                	flw	fs0,0(s0)
60003b64:	1b84                	addi	s1,sp,496
60003b66:	6000                	flw	fs0,0(s0)
60003b68:	1530                	addi	a2,sp,680
60003b6a:	6000                	flw	fs0,0(s0)
60003b6c:	1b84                	addi	s1,sp,496
60003b6e:	6000                	flw	fs0,0(s0)
60003b70:	1b84                	addi	s1,sp,496
60003b72:	6000                	flw	fs0,0(s0)
60003b74:	1b84                	addi	s1,sp,496
60003b76:	6000                	flw	fs0,0(s0)
60003b78:	1b84                	addi	s1,sp,496
60003b7a:	6000                	flw	fs0,0(s0)
60003b7c:	1b84                	addi	s1,sp,496
60003b7e:	6000                	flw	fs0,0(s0)
60003b80:	1b84                	addi	s1,sp,496
60003b82:	6000                	flw	fs0,0(s0)
60003b84:	1b84                	addi	s1,sp,496
60003b86:	6000                	flw	fs0,0(s0)
60003b88:	15dc                	addi	a5,sp,740
60003b8a:	6000                	flw	fs0,0(s0)
60003b8c:	1b84                	addi	s1,sp,496
60003b8e:	6000                	flw	fs0,0(s0)
60003b90:	1b84                	addi	s1,sp,496
60003b92:	6000                	flw	fs0,0(s0)
60003b94:	1b84                	addi	s1,sp,496
60003b96:	6000                	flw	fs0,0(s0)
60003b98:	1b84                	addi	s1,sp,496
60003b9a:	6000                	flw	fs0,0(s0)
60003b9c:	1b84                	addi	s1,sp,496
60003b9e:	6000                	flw	fs0,0(s0)
60003ba0:	1b84                	addi	s1,sp,496
60003ba2:	6000                	flw	fs0,0(s0)
60003ba4:	1b84                	addi	s1,sp,496
60003ba6:	6000                	flw	fs0,0(s0)
60003ba8:	1618                	addi	a4,sp,800
60003baa:	6000                	flw	fs0,0(s0)
60003bac:	1b84                	addi	s1,sp,496
60003bae:	6000                	flw	fs0,0(s0)
60003bb0:	1b84                	addi	s1,sp,496
60003bb2:	6000                	flw	fs0,0(s0)
60003bb4:	1b84                	addi	s1,sp,496
60003bb6:	6000                	flw	fs0,0(s0)
60003bb8:	1b84                	addi	s1,sp,496
60003bba:	6000                	flw	fs0,0(s0)
60003bbc:	1b84                	addi	s1,sp,496
60003bbe:	6000                	flw	fs0,0(s0)
60003bc0:	1b84                	addi	s1,sp,496
60003bc2:	6000                	flw	fs0,0(s0)
60003bc4:	1b84                	addi	s1,sp,496
60003bc6:	6000                	flw	fs0,0(s0)
60003bc8:	168c                	addi	a1,sp,864
60003bca:	6000                	flw	fs0,0(s0)
60003bcc:	1b84                	addi	s1,sp,496
60003bce:	6000                	flw	fs0,0(s0)
60003bd0:	1b84                	addi	s1,sp,496
60003bd2:	6000                	flw	fs0,0(s0)
60003bd4:	1b84                	addi	s1,sp,496
60003bd6:	6000                	flw	fs0,0(s0)
60003bd8:	1b84                	addi	s1,sp,496
60003bda:	6000                	flw	fs0,0(s0)
60003bdc:	1b84                	addi	s1,sp,496
60003bde:	6000                	flw	fs0,0(s0)
60003be0:	1b84                	addi	s1,sp,496
60003be2:	6000                	flw	fs0,0(s0)
60003be4:	1b84                	addi	s1,sp,496
60003be6:	6000                	flw	fs0,0(s0)
60003be8:	178c                	addi	a1,sp,992
60003bea:	6000                	flw	fs0,0(s0)
60003bec:	1b84                	addi	s1,sp,496
60003bee:	6000                	flw	fs0,0(s0)
60003bf0:	1b84                	addi	s1,sp,496
60003bf2:	6000                	flw	fs0,0(s0)
60003bf4:	1b84                	addi	s1,sp,496
60003bf6:	6000                	flw	fs0,0(s0)
60003bf8:	1b84                	addi	s1,sp,496
60003bfa:	6000                	flw	fs0,0(s0)
60003bfc:	1b84                	addi	s1,sp,496
60003bfe:	6000                	flw	fs0,0(s0)
60003c00:	1b84                	addi	s1,sp,496
60003c02:	6000                	flw	fs0,0(s0)
60003c04:	1b84                	addi	s1,sp,496
60003c06:	6000                	flw	fs0,0(s0)
60003c08:	1780                	addi	s0,sp,992
60003c0a:	6000                	flw	fs0,0(s0)
60003c0c:	1b84                	addi	s1,sp,496
60003c0e:	6000                	flw	fs0,0(s0)
60003c10:	1b84                	addi	s1,sp,496
60003c12:	6000                	flw	fs0,0(s0)
60003c14:	1b84                	addi	s1,sp,496
60003c16:	6000                	flw	fs0,0(s0)
60003c18:	1b84                	addi	s1,sp,496
60003c1a:	6000                	flw	fs0,0(s0)
60003c1c:	1b84                	addi	s1,sp,496
60003c1e:	6000                	flw	fs0,0(s0)
60003c20:	1b84                	addi	s1,sp,496
60003c22:	6000                	flw	fs0,0(s0)
60003c24:	1b84                	addi	s1,sp,496
60003c26:	6000                	flw	fs0,0(s0)
60003c28:	178c                	addi	a1,sp,992
60003c2a:	6000                	flw	fs0,0(s0)
60003c2c:	1b84                	addi	s1,sp,496
60003c2e:	6000                	flw	fs0,0(s0)
60003c30:	1b84                	addi	s1,sp,496
60003c32:	6000                	flw	fs0,0(s0)
60003c34:	1b84                	addi	s1,sp,496
60003c36:	6000                	flw	fs0,0(s0)
60003c38:	1b84                	addi	s1,sp,496
60003c3a:	6000                	flw	fs0,0(s0)
60003c3c:	1b84                	addi	s1,sp,496
60003c3e:	6000                	flw	fs0,0(s0)
60003c40:	1b84                	addi	s1,sp,496
60003c42:	6000                	flw	fs0,0(s0)
60003c44:	1b84                	addi	s1,sp,496
60003c46:	6000                	flw	fs0,0(s0)
60003c48:	1780                	addi	s0,sp,992
60003c4a:	6000                	flw	fs0,0(s0)
60003c4c:	1b84                	addi	s1,sp,496
60003c4e:	6000                	flw	fs0,0(s0)
60003c50:	1b84                	addi	s1,sp,496
60003c52:	6000                	flw	fs0,0(s0)
60003c54:	1b84                	addi	s1,sp,496
60003c56:	6000                	flw	fs0,0(s0)
60003c58:	1b84                	addi	s1,sp,496
60003c5a:	6000                	flw	fs0,0(s0)
60003c5c:	1b84                	addi	s1,sp,496
60003c5e:	6000                	flw	fs0,0(s0)
60003c60:	1b84                	addi	s1,sp,496
60003c62:	6000                	flw	fs0,0(s0)
60003c64:	1b84                	addi	s1,sp,496
60003c66:	6000                	flw	fs0,0(s0)
60003c68:	1800                	addi	s0,sp,48
60003c6a:	6000                	flw	fs0,0(s0)
60003c6c:	1b84                	addi	s1,sp,496
60003c6e:	6000                	flw	fs0,0(s0)
60003c70:	1b84                	addi	s1,sp,496
60003c72:	6000                	flw	fs0,0(s0)
60003c74:	1b84                	addi	s1,sp,496
60003c76:	6000                	flw	fs0,0(s0)
60003c78:	1b84                	addi	s1,sp,496
60003c7a:	6000                	flw	fs0,0(s0)
60003c7c:	1b84                	addi	s1,sp,496
60003c7e:	6000                	flw	fs0,0(s0)
60003c80:	1b84                	addi	s1,sp,496
60003c82:	6000                	flw	fs0,0(s0)
60003c84:	1b84                	addi	s1,sp,496
60003c86:	6000                	flw	fs0,0(s0)
60003c88:	1728                	addi	a0,sp,936
60003c8a:	6000                	flw	fs0,0(s0)
60003c8c:	1b84                	addi	s1,sp,496
60003c8e:	6000                	flw	fs0,0(s0)
60003c90:	1b84                	addi	s1,sp,496
60003c92:	6000                	flw	fs0,0(s0)
60003c94:	1b84                	addi	s1,sp,496
60003c96:	6000                	flw	fs0,0(s0)
60003c98:	1b84                	addi	s1,sp,496
60003c9a:	6000                	flw	fs0,0(s0)
60003c9c:	1b84                	addi	s1,sp,496
60003c9e:	6000                	flw	fs0,0(s0)
60003ca0:	1b84                	addi	s1,sp,496
60003ca2:	6000                	flw	fs0,0(s0)
60003ca4:	1b84                	addi	s1,sp,496
60003ca6:	6000                	flw	fs0,0(s0)
60003ca8:	1800                	addi	s0,sp,48
60003caa:	6000                	flw	fs0,0(s0)
60003cac:	1b84                	addi	s1,sp,496
60003cae:	6000                	flw	fs0,0(s0)
60003cb0:	1b84                	addi	s1,sp,496
60003cb2:	6000                	flw	fs0,0(s0)
60003cb4:	1b84                	addi	s1,sp,496
60003cb6:	6000                	flw	fs0,0(s0)
60003cb8:	1b84                	addi	s1,sp,496
60003cba:	6000                	flw	fs0,0(s0)
60003cbc:	1b84                	addi	s1,sp,496
60003cbe:	6000                	flw	fs0,0(s0)
60003cc0:	1b84                	addi	s1,sp,496
60003cc2:	6000                	flw	fs0,0(s0)
60003cc4:	1b84                	addi	s1,sp,496
60003cc6:	6000                	flw	fs0,0(s0)
60003cc8:	1728                	addi	a0,sp,936
60003cca:	6000                	flw	fs0,0(s0)
60003ccc:	1b84                	addi	s1,sp,496
60003cce:	6000                	flw	fs0,0(s0)
60003cd0:	1b84                	addi	s1,sp,496
60003cd2:	6000                	flw	fs0,0(s0)
60003cd4:	1b84                	addi	s1,sp,496
60003cd6:	6000                	flw	fs0,0(s0)
60003cd8:	1b84                	addi	s1,sp,496
60003cda:	6000                	flw	fs0,0(s0)
60003cdc:	1b84                	addi	s1,sp,496
60003cde:	6000                	flw	fs0,0(s0)
60003ce0:	1b84                	addi	s1,sp,496
60003ce2:	6000                	flw	fs0,0(s0)
60003ce4:	1b84                	addi	s1,sp,496
60003ce6:	6000                	flw	fs0,0(s0)
60003ce8:	18b4                	addi	a3,sp,120
60003cea:	6000                	flw	fs0,0(s0)
60003cec:	1b84                	addi	s1,sp,496
60003cee:	6000                	flw	fs0,0(s0)
60003cf0:	1b84                	addi	s1,sp,496
60003cf2:	6000                	flw	fs0,0(s0)
60003cf4:	1b84                	addi	s1,sp,496
60003cf6:	6000                	flw	fs0,0(s0)
60003cf8:	1b84                	addi	s1,sp,496
60003cfa:	6000                	flw	fs0,0(s0)
60003cfc:	1b84                	addi	s1,sp,496
60003cfe:	6000                	flw	fs0,0(s0)
60003d00:	1b84                	addi	s1,sp,496
60003d02:	6000                	flw	fs0,0(s0)
60003d04:	1b84                	addi	s1,sp,496
60003d06:	6000                	flw	fs0,0(s0)
60003d08:	1a08                	addi	a0,sp,304
60003d0a:	6000                	flw	fs0,0(s0)
60003d0c:	1b84                	addi	s1,sp,496
60003d0e:	6000                	flw	fs0,0(s0)
60003d10:	1b84                	addi	s1,sp,496
60003d12:	6000                	flw	fs0,0(s0)
60003d14:	1b84                	addi	s1,sp,496
60003d16:	6000                	flw	fs0,0(s0)
60003d18:	1b84                	addi	s1,sp,496
60003d1a:	6000                	flw	fs0,0(s0)
60003d1c:	1b84                	addi	s1,sp,496
60003d1e:	6000                	flw	fs0,0(s0)
60003d20:	1b84                	addi	s1,sp,496
60003d22:	6000                	flw	fs0,0(s0)
60003d24:	1b84                	addi	s1,sp,496
60003d26:	6000                	flw	fs0,0(s0)
60003d28:	1a08                	addi	a0,sp,304
60003d2a:	6000                	flw	fs0,0(s0)
60003d2c:	1b84                	addi	s1,sp,496
60003d2e:	6000                	flw	fs0,0(s0)
60003d30:	1b84                	addi	s1,sp,496
60003d32:	6000                	flw	fs0,0(s0)
60003d34:	1b84                	addi	s1,sp,496
60003d36:	6000                	flw	fs0,0(s0)
60003d38:	1b84                	addi	s1,sp,496
60003d3a:	6000                	flw	fs0,0(s0)
60003d3c:	1b84                	addi	s1,sp,496
60003d3e:	6000                	flw	fs0,0(s0)
60003d40:	1b84                	addi	s1,sp,496
60003d42:	6000                	flw	fs0,0(s0)
60003d44:	1b84                	addi	s1,sp,496
60003d46:	6000                	flw	fs0,0(s0)
60003d48:	1a08                	addi	a0,sp,304
60003d4a:	6000                	flw	fs0,0(s0)
60003d4c:	1b84                	addi	s1,sp,496
60003d4e:	6000                	flw	fs0,0(s0)
60003d50:	1b84                	addi	s1,sp,496
60003d52:	6000                	flw	fs0,0(s0)
60003d54:	1b84                	addi	s1,sp,496
60003d56:	6000                	flw	fs0,0(s0)
60003d58:	1b84                	addi	s1,sp,496
60003d5a:	6000                	flw	fs0,0(s0)
60003d5c:	1b84                	addi	s1,sp,496
60003d5e:	6000                	flw	fs0,0(s0)
60003d60:	1b84                	addi	s1,sp,496
60003d62:	6000                	flw	fs0,0(s0)
60003d64:	1b84                	addi	s1,sp,496
60003d66:	6000                	flw	fs0,0(s0)
60003d68:	1b24                	addi	s1,sp,440
60003d6a:	6000                	flw	fs0,0(s0)
60003d6c:	1b84                	addi	s1,sp,496
60003d6e:	6000                	flw	fs0,0(s0)
60003d70:	1b84                	addi	s1,sp,496
60003d72:	6000                	flw	fs0,0(s0)
60003d74:	1b84                	addi	s1,sp,496
60003d76:	6000                	flw	fs0,0(s0)
60003d78:	1b84                	addi	s1,sp,496
60003d7a:	6000                	flw	fs0,0(s0)
60003d7c:	1b84                	addi	s1,sp,496
60003d7e:	6000                	flw	fs0,0(s0)
60003d80:	1b84                	addi	s1,sp,496
60003d82:	6000                	flw	fs0,0(s0)
60003d84:	1b84                	addi	s1,sp,496
60003d86:	6000                	flw	fs0,0(s0)
60003d88:	1b24                	addi	s1,sp,440
60003d8a:	6000                	flw	fs0,0(s0)
60003d8c:	1b84                	addi	s1,sp,496
60003d8e:	6000                	flw	fs0,0(s0)
60003d90:	1b84                	addi	s1,sp,496
60003d92:	6000                	flw	fs0,0(s0)
60003d94:	1b84                	addi	s1,sp,496
60003d96:	6000                	flw	fs0,0(s0)
60003d98:	1b84                	addi	s1,sp,496
60003d9a:	6000                	flw	fs0,0(s0)
60003d9c:	1b84                	addi	s1,sp,496
60003d9e:	6000                	flw	fs0,0(s0)
60003da0:	1b84                	addi	s1,sp,496
60003da2:	6000                	flw	fs0,0(s0)
60003da4:	1b84                	addi	s1,sp,496
60003da6:	6000                	flw	fs0,0(s0)
60003da8:	1b84                	addi	s1,sp,496
60003daa:	6000                	flw	fs0,0(s0)
60003dac:	1b84                	addi	s1,sp,496
60003dae:	6000                	flw	fs0,0(s0)
60003db0:	1b84                	addi	s1,sp,496
60003db2:	6000                	flw	fs0,0(s0)
60003db4:	1b84                	addi	s1,sp,496
60003db6:	6000                	flw	fs0,0(s0)
60003db8:	1b84                	addi	s1,sp,496
60003dba:	6000                	flw	fs0,0(s0)
60003dbc:	1b84                	addi	s1,sp,496
60003dbe:	6000                	flw	fs0,0(s0)
60003dc0:	1b84                	addi	s1,sp,496
60003dc2:	6000                	flw	fs0,0(s0)
60003dc4:	1b84                	addi	s1,sp,496
60003dc6:	6000                	flw	fs0,0(s0)
60003dc8:	19d0                	addi	a2,sp,244
60003dca:	6000                	flw	fs0,0(s0)
60003dcc:	1b84                	addi	s1,sp,496
60003dce:	6000                	flw	fs0,0(s0)
60003dd0:	1b84                	addi	s1,sp,496
60003dd2:	6000                	flw	fs0,0(s0)
60003dd4:	1b84                	addi	s1,sp,496
60003dd6:	6000                	flw	fs0,0(s0)
60003dd8:	1b84                	addi	s1,sp,496
60003dda:	6000                	flw	fs0,0(s0)
60003ddc:	1b84                	addi	s1,sp,496
60003dde:	6000                	flw	fs0,0(s0)
60003de0:	1b84                	addi	s1,sp,496
60003de2:	6000                	flw	fs0,0(s0)
60003de4:	1b84                	addi	s1,sp,496
60003de6:	6000                	flw	fs0,0(s0)
60003de8:	1bec                	addi	a1,sp,508
60003dea:	6000                	flw	fs0,0(s0)
60003dec:	4449                	li	s0,18
60003dee:	454c                	lw	a1,12(a0)
60003df0:	0000                	unimp
60003df2:	0000                	unimp
60003df4:	0d0a                	slli	s10,s10,0x2
60003df6:	4328                	lw	a0,64(a4)
60003df8:	2029                	jal	60003e02 <vI2COV2640Camera+0x3d2>
60003dfa:	79706f43          	fmadd.s	ft10,ft0,fs7,fa5,unknown
60003dfe:	6972                	flw	fs2,28(sp)
60003e00:	20746867          	0x20746867
60003e04:	3032                	fld	ft0,296(sp)
60003e06:	3931                	jal	60003a22 <vApplicationIdleHook+0xe>
60003e08:	4620                	lw	s0,72(a2)
60003e0a:	7475                	lui	s0,0xffffd
60003e0c:	7275                	lui	tp,0xffffd
60003e0e:	2065                	jal	60003eb6 <vI2COV2640Camera+0x486>
60003e10:	6c45                	lui	s8,0x11
60003e12:	6365                	lui	t1,0x19
60003e14:	7274                	flw	fa3,100(a2)
60003e16:	63696e6f          	jal	t3,6009a44c <__data_load+0x9654c>
60003e1a:	202d2073          	csrs	hedeleg,s10
60003e1e:	61657243          	fmadd.s	ft4,fa0,fs6,fa2
60003e22:	6974                	flw	fa3,84(a0)
60003e24:	6576                	flw	fa0,92(sp)
60003e26:	4220                	lw	s0,64(a2)
60003e28:	6472616f          	jal	sp,6002ac6e <__data_load+0x26d6e>
60003e2c:	0d0a                	slli	s10,s10,0x2
60003e2e:	0000                	unimp
60003e30:	0d0a                	slli	s10,s10,0x2
60003e32:	7246                	flw	ft4,112(sp)
60003e34:	6565                	lui	a0,0x19
60003e36:	5452                	lw	s0,52(sp)
60003e38:	5320534f          	fnmadd.d	ft6,ft0,fs2,fa0,unknown
60003e3c:	6d69                	lui	s10,0x1a
60003e3e:	6c70                	flw	fa2,92(s0)
60003e40:	2065                	jal	60003ee8 <vI2COV2640Camera+0x4b8>
60003e42:	6544                	flw	fs1,12(a0)
60003e44:	6f6d                	lui	t5,0x1b
60003e46:	0d0a                	slli	s10,s10,0x2
60003e48:	2020                	fld	fs0,64(s0)
60003e4a:	6854                	flw	fa3,20(s0)
60003e4c:	7369                	lui	t1,0xffffa
60003e4e:	6420                	flw	fs0,72(s0)
60003e50:	6d65                	lui	s10,0x19
60003e52:	7263206f          	j	60036578 <__data_load+0x32678>
60003e56:	6165                	addi	sp,sp,112
60003e58:	6574                	flw	fa3,76(a0)
60003e5a:	20332073          	csrs	hideleg,t1
60003e5e:	6c62                	flw	fs8,24(sp)
60003e60:	6e69                	lui	t3,0x1a
60003e62:	676e696b          	0x676e696b
60003e66:	4c20                	lw	s0,88(s0)
60003e68:	4445                	li	s0,17
60003e6a:	7420                	flw	fs0,104(s0)
60003e6c:	7361                	lui	t1,0xffff8
60003e6e:	6120736b          	0x6120736b
60003e72:	646e                	flw	fs0,216(sp)
60003e74:	6120                	flw	fs0,64(a0)
60003e76:	76697463          	bgeu	s2,t1,600045de <__data_load+0x6de>
60003e7a:	7461                	lui	s0,0xffff8
60003e7c:	2065                	jal	60003f24 <__data_load+0x24>
60003e7e:	6874                	flw	fa3,84(s0)
60003e80:	2065                	jal	60003f28 <__data_load+0x28>
60003e82:	7246                	flw	ft4,112(sp)
60003e84:	6565                	lui	a0,0x19
60003e86:	5452                	lw	s0,52(sp)
60003e88:	0d0a534f          	0xd0a534f
60003e8c:	2020                	fld	fs0,64(s0)
60003e8e:	65686373          	csrrsi	t1,0x656,16
60003e92:	7564                	flw	fs1,108(a0)
60003e94:	656c                	flw	fa1,76(a0)
60003e96:	2e72                	fld	ft8,280(sp)
60003e98:	4c20                	lw	s0,88(s0)
60003e9a:	4445                	li	s0,17
60003e9c:	2031                	jal	60003ea8 <vI2COV2640Camera+0x478>
60003e9e:	6552                	flw	fa0,20(sp)
60003ea0:	2c64                	fld	fs1,216(s0)
60003ea2:	4c20                	lw	s0,88(s0)
60003ea4:	4445                	li	s0,17
60003ea6:	2032                	fld	ft0,264(sp)
60003ea8:	65657247          	0x65657247
60003eac:	206e                	fld	ft0,216(sp)
60003eae:	6e61                	lui	t3,0x18
60003eb0:	2064                	fld	fs1,192(s0)
60003eb2:	6552                	flw	fa0,20(sp)
60003eb4:	2064                	fld	fs1,192(s0)
60003eb6:	756f6873          	csrrsi	a6,0x756,30
60003eba:	646c                	flw	fa1,76(s0)
60003ebc:	7320                	flw	fs0,96(a4)
60003ebe:	6174                	flw	fa3,68(a0)
60003ec0:	7472                	flw	fs0,60(sp)
60003ec2:	6220                	flw	fs0,64(a2)
60003ec4:	696c                	flw	fa1,84(a0)
60003ec6:	6b6e                	flw	fs6,216(sp)
60003ec8:	6e69                	lui	t3,0x1a
60003eca:	0d0a2e67          	0xd0a2e67
60003ece:	0000                	unimp
60003ed0:	480d                	li	a6,3
60003ed2:	6c65                	lui	s8,0x19
60003ed4:	6f6c                	flw	fa1,92(a4)
60003ed6:	5720                	lw	s0,104(a4)
60003ed8:	646c726f          	jal	tp,600cb51e <__data_load+0xc761e>
60003edc:	0a21                	addi	s4,s4,8
60003ede:	000d                	c.nop	3
60003ee0:	3632564f          	fnmadd.q	fa2,ft4,ft3,ft6,unknown
60003ee4:	3034                	fld	fa3,96(s0)
	...
